(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
'use strict';

var _polyfills = require('../js-exports/polyfills');

var _d3Tip = require('../js-vendor/d3-tip');

/* exported arrayFind, d3Tip */
(function () {
  "use strict";

  var alaskaPath = "M273.716737,378.974222L273.716737,378.974222L273.716737,378.974222ZM268.905889,383.068236L268.905889,383.068236L268.905889,383.068236ZM268.860289,382.599903L268.860289,382.599903L268.860289,382.599903ZM301.381014,236.335483L303.303833,236.366706L308.04628,238.384442L308.684687,236.901386L313.092731,235.383206L314.149141,236.436956L317.082771,236.323775L317.325973,237.982456L319.583196,238.083928L321.490815,239.793345L320.297603,242.587734L320.677607,244.176165L320.350804,248.703388L316.178362,248.336526L313.662737,248.980485L312.727927,250.455735L310.622706,247.403762L308.555486,247.009582L305.97906,243.660998L303.911839,242.392595L302.125821,240.171914ZM253.933739,385.511375L253.933739,385.511375L253.933739,385.511375ZM253.067331,387.298848L255.651357,386.241195L259.139791,385.831403L260.644606,387.216889L261.685817,385.768959L264.763848,385.956292L264.216642,383.185319L266.428264,383.212639L265.843058,382.061319L268.358684,381.983264L271.079511,382.752111L267.826678,380.398736L267.089471,380.714861L265.630256,378.572236L267.233872,376.749638L272.128321,375.96518L273.671137,376.574013L272.804728,380.535333L278.094381,378.287333L278.793588,379.657208L273.899139,382.451597L273.96754,383.36875L276.331163,382.888708L276.467965,384.863514L272.386724,385.249889L271.482315,387.228598L270.805908,385.585528L270.068701,387.954514L268.98189,386.007028L268.715887,388.539931L264.665047,387.310556L258.486185,388.617987L257.414574,389.781015L253.667737,388.28625ZM252.801328,387.712542L252.801328,387.712542L252.801328,387.712542ZM254.503745,372.866374L254.503745,372.866374L254.503745,372.866374ZM325.344053,128.700763L325.344053,128.700763L325.344053,128.700763ZM329.539295,113.522859L331.272113,112.188108L337.709377,110.607483L346.251863,106.915455L356.534765,103.453691L361.216412,102.329691L368.512485,101.385218L373.391734,102.21651L375.01055,102.977552L372.578526,106.259788L372.107321,109.40933L370.883709,110.576261L371.590516,113.913136L377.624976,115.731831L380.923409,115.591331L381.865819,117.175859L384.161042,117.854942L386.562666,117.12122L389.336693,120.095137L389.222692,118.514512L392.597126,114.38147L394.641546,115.283011L397.673977,115.501567L396.716367,112.894511L393.357134,110.876775L389.777498,111.313886L390.757908,108.277525L388.721087,102.977552L386.167462,101.51401L385.658257,98.547898L387.467075,96.705787L388.645086,97.084357L389.883899,100.780288L390.719907,101.357899L389.648296,104.335719L390.514705,106.661774L393.212732,109.869858L395.614356,109.393719L394.390744,108.058969L391.601516,103.004871L393.151932,99.355774L396.184362,97.896135L393.205132,95.492023L387.277073,96.05012L385.422654,94.094829L382.922229,93.841148L377.632576,91.120912L377.556576,87.588897L376.842168,80.466327L375.831358,78.089535L373.330933,75.330271L368.193282,66.962714L364.203242,63.914645L362.128421,59.477186L357.902779,56.468144L361.923219,55.765644L363.808038,53.053213L365.852459,45.907226L370.108501,47.671282L373.216932,48.27231L382.283823,48.654782L385.01225,47.749337L388.531085,45.450601L392.110721,41.688323L393.205132,39.592531L394.284343,34.655516L395.97916,31.170335L403.130831,23.353071L407.196872,20.956765L410.373704,22.353959L413.497335,22.139307L417.897779,20.105959L420.869409,17.850153L425.915859,13.268292L429.769098,11.980375L430.0047,13.358056L428.233882,13.393181L429.761498,14.685L431.182712,14.005917L433.272733,14.560111L438.212782,14.15032L440.310403,13.377569L444.353644,10.235833L448.541285,4.799263L450.479305,3.484027L450.600906,4.810971L453.830938,6.446235L454.644146,7.738055L457.471375,8.549833L457.440974,10.899305L455.882959,12.557986L453.709337,12.897528L454.03614,15.781681L456.483365,16.285139L457.448574,13.623444L459.515795,12.116972L461.142211,9.080611L464.577446,12.901431L464.387444,16.975931L466.04426,16.89007L467.199472,18.404348L469.160292,16.031459L472.762728,16.04707L474.434744,15.360181L479.465995,16.452959L482.103221,17.815028L480.074001,20.874806L480.431204,23.719932L483.220432,24.340473L485.766458,24.160946L484.504845,27.021682L486.860869,26.885085L490.128901,28.379849L491.671717,26.514321L495.821358,26.557252L496.224162,27.724182L498.169782,27.267557L500.069801,25.382515L503.170632,25.242015L505.488655,25.878168L507.077071,27.326099L509.949899,27.817849L511.04431,29.796557L513.491535,29.16821L517.147171,32.227988L521.175212,33.152947L526.259663,32.060169L531.404914,33.113919L531.480915,32.368488L534.938949,35.069211L539.202592,36.43128L541.368614,36.158086L542.668227,34.452572L549.515895,31.271808L551.636316,30.838599L557.04757,33.512002L559.03879,35.201905L564.609646,37.668461L567.216472,39.455934L568.120881,40.9546L569.283693,39.615947L570.96331,40.224781L601.523215,254.237527L607.261273,255.408361L607.664077,253.285249L613.508535,255.326402L616.198962,251.306541L623.092231,249.737624L622.735027,255.989875L624.749047,257.831986L629.04309,259.147222L630.540305,262.109431L644.524445,271.780515L647.891279,278.961627L649.601296,276.43653L653.97134,271.858571L656.775768,271.105335L657.497775,268.139223L656.517365,264.064723L658.500985,263.662736L658.774588,261.360097L657.307773,260.739556L661.601816,258.265194L666.207462,254.03068L669.521095,255.669847L672.561126,258.085666L672.469925,261.336681L673.95954,261.937709L674.856349,264.252056L678.02558,264.224737L678.580386,265.434598L681.172012,266.234667L682.859229,268.018237L682.904829,269.423237L685.397654,271.67514L690.900109,273.353335L693.240932,275.605238L698.051781,278.555738L697.314573,279.769502L702.087421,284.152322L704.177442,287.16917L707.589876,289.971364L713.388734,296.449976L716.656767,299.232657L718.97479,301.859227L718.267983,304.922908L722.486025,304.821436L722.630426,308.884228L726.141661,309.496964L726.111261,310.745853L727.920079,313.9032L730.937309,312.66602L732.829728,313.665131L738.385384,315.366742L742.375424,315.070131L745.02025,316.631242L747.102671,316.588312L748.333883,318.648979L750.857109,318.894854L752.422724,317.770854L754.474745,319.866646L755.181552,322.06391L754.353144,325.713007L755.96436,329.666522L760,335.575328L759.04999,337.897481L758.837188,341.171912L757.909979,344.914676L754.892749,350.74933L753.608336,349.012593L752.415124,350.507357L751.130711,349.945357L748.447884,343.962398L746.464265,342.02662L747.862679,338.974648L748.797488,338.849759L747.110271,336.137328L747.163472,334.34205L745.506655,330.02948L739.616596,325.006604L739.228992,325.556896L742.413424,327.945396L744.769448,330.52123L746.669467,337.261328L745.795458,337.24962L746.388264,340.403065L745.309053,342.381773L743.135431,341.753426L743.96384,340.496731L743.796638,338.053592L742.694627,341.554384L739.9966,341.546579L737.708977,340.758217L738.681787,343.59944L738.362584,345.991843L737.04017,344.727343L735.254153,340.83237L736.796968,335.083578L735.573356,334.708911L734.410544,330.232425L736.599366,329.615786L734.919749,327.605855L733.551736,329.483091L731.773318,330.209008L733.772138,330.712466L734.144541,334.314731L733.171732,336.445647L733.369334,338.646814L730.0481,337.440856L728.801688,335.130411L728.672487,332.695078L730.0329,332.144786L729.470495,328.725952L730.435704,328.136633L728.96889,323.781132L731.317313,321.876576L729.105691,322.24734L727.122071,327.059466L728.528085,329.358202L727.395674,329.299661L726.179662,331.325202L724.659647,330.400244L723.610836,328.019549L721.528415,329.264536L719.468795,325.498355L720.753208,324.557785L721.02681,322.110743L722.106021,321.466785L723.284033,323.866993L725.533655,324.31191L723.405634,322.762507L723.056031,320.147646L721.794418,318.430423L724.218842,318.379687L721.938819,317.345451L721.733617,314.77352L719.978,316.096562L718.769588,315.831173L718.480785,313.052395L714.703547,311.850339L711.777518,309.075464L713.677537,308.232464L709.702697,307.518255L706.928669,307.69388L703.531435,306.819658L703.121031,305.059505L706.98947,302.815408L703.554236,302.710033L703.645436,301.515782L701.97342,300.243477L701.889819,297.675449L701.00821,298.452102L699.267793,297.335907L699.100591,295.283046L702.566226,295.76699L705.545455,296.773907L700.271003,293.893657L699.556596,294.088795L698.758588,290.599712L698.773788,293.663393L697.854179,293.733643L694.715347,290.314809L692.252923,288.85517L690.664507,284.078169L691.796918,282.883919L690.444104,281.229141L689.805698,283.691794L690.337703,286.041267L688.270483,286.704739L684.941649,286.696934L683.368434,285.405114L683.421634,283.399086L682.152422,283.520072L681.065611,281.455502L674.917149,274.297807L673.131131,269.493487L670.197502,265.649251L669.384294,261.60207L669.665497,266.722515L668.107481,266.722515L670.97271,269.411529L671.428714,272.346418L676.315563,279.535335L675.563156,279.59778L679.127591,286.384711L679.507595,288.761503L676.277563,288.421961L673.161532,283.566905L673.685937,285.955406L671.732717,285.229489L668.457085,287.079406L668.206282,285.065572L666.785068,282.922947L667.142271,281.517947L664.284643,277.825919L664.945849,276.897057L662.627826,274.208043L663.798238,276.678502L663.798238,279.363613L662.605026,279.531433L659.435794,278.23571L657.908179,275.741835L657.558576,277.431738L651.698917,274.988599L653.97894,277.131224L652.96813,278.060085L656.274163,277.993738L658.668187,278.571349L659.291393,279.988058L662.308623,281.549169L665.629856,284.554308L667.066271,287.567253L663.403034,290.084545L660.165402,290.065031L661.396614,291.797865L660.157802,292.863323L656.904969,290.463115L656.882169,289.471809L653.484935,289.233739L646.477665,286.025656L646.219262,285.108503L642.784028,282.907336L642.206422,280.756905L638.071981,277.857141L633.375134,276.725335L629.696697,274.715404L624.209442,273.095751L617.513775,269.961821L619.383394,268.76757L620.941409,265.18482L618.790588,262.327986L618.570186,261.043972L619.793798,258.671083L619.140191,257.703194L617.460575,260.82932L617.103371,263.057806L611.441314,267.077667L604.646846,266.944973L597.783978,264.564278L599.448394,263.26075L598.239982,259.826306L595.671157,258.393986L598.201982,261.059583L595.853559,263.042195L584.719447,261.60207L580.455805,261.941611L572.407324,263.99057L569.374894,265.520459L565.179652,265.036514L567.588876,264.357431L564.427244,262.30457L565.096051,261.399125L562.352424,262.007959L557.305973,261.133736L559.205992,260.068278L556.492765,259.162833L558.01278,255.502027L555.732757,256.825069L554.699147,259.596042L553.619936,259.564819L549.097891,256.524555L544.887449,256.341125L546.711467,254.932222L548.383484,251.50168L545.95146,252.922291L544.203442,252.945708L544.925449,250.916263L542.554226,252.664707L541.155812,252.336874L543.435834,250.186443L537.142971,251.833416L536.223362,250.678193L540.251403,249.19904L541.99182,247.704276L541.171012,246.986165L539.430594,248.676068L537.614176,248.644846L535.577356,246.646623L537.196172,246.139262L535.706557,245.307971L536.656567,242.564317L540.608606,242.298929L538.890989,241.256887L536.344963,242.010123L533.418934,246.002665L531.473315,241.151512L531.556916,244.332276L530.705707,246.34611L526.852469,247.411568L526.449664,245.651415L527.110871,243.317554L526.343263,241.82279L525.590856,245.811429L525.96326,248.441901L524.382444,247.493526L524.352044,249.386374L519.898399,249.870318L520.270803,247.208624L521.95802,244.753776L521.889619,243.461956L523.865639,240.761234L524.154442,238.708373L520.362004,245.046484L519.297993,242.536998L516.447964,245.647512L519.411994,243.563429L518.051581,249.046832L515.99196,249.737624L513.97794,251.884152L513.901939,253.499902L515.847558,250.635263L517.466375,250.646971L516.767168,254.139958L518.515185,250.826499L520.400004,251.240193L520.605206,252.988638L518.04398,256.20843L516.257963,255.158583L513.628336,257.82418L516.523965,255.794736L518.735587,257.113875L520.734407,254.491208L522.505225,258.101278L518.02878,262.663625L520.217602,262.819736L520.97761,265.945862L519.02439,268.053362L518.697587,264.458903L517.98318,264.52525L517.00277,269.688626L515.839958,267.682598L515.02675,270.235015L513.514335,269.434945L509.129091,269.325668L510.094301,267.464042L508.612286,267.889445L507.107471,271.046793L506.263863,265.742917L505.481055,265.91464L506.058661,268.646584L504.409444,270.348196L503.375834,272.822557L502.99583,270.570654L501.99262,269.875959L501.848218,272.724988L500.503005,271.963946L502.243422,275.546696L499.834198,274.812974L499.796198,276.221877L498.00258,276.64728L496.604166,279.644613L495.874559,279.441669L494.99295,282.033114L494.278543,281.010586L496.421764,274.465627L493.404534,281.057419L491.808518,279.203599L491.907319,281.857489L490.349303,281.822364L487.324473,286.181767L484.337643,286.829628L482.316023,285.502683L480.370404,287.426753L478.584386,287.785809L475.650757,285.432433L476.365164,283.032225L477.824378,283.106378L477.01877,281.556975L479.655997,280.214419L482.240022,280.756905L481.761218,279.847558L485.948859,275.972099L488.251683,273.271376L486.359264,273.400168L481.609216,276.838516L479.861199,276.43653L477.261973,273.513349L479.199992,268.096293L483.04563,262.648014L483.281233,260.048764L484.246442,259.373583L484.687247,255.814249L483.129231,251.767068L487.636076,249.800068L491.428514,246.408554L494.810548,244.570345L496.847368,247.762818L498.770188,248.164804L500.655007,246.236832L502.98823,247.235943L508.331083,248.036013L510.200702,249.288804L508.01188,246.712971L506.157462,247.157887L504.667847,245.854359L501.901419,245.046484L498.291383,241.994512L499.818998,240.706595L502.099021,236.870164L505.389854,234.9539L502.942629,234.216275L500.320603,236.635997L499.180592,239.996289L496.748567,239.485025L493.822538,239.812859L492.910529,238.649831L488.563286,240.573901L486.02486,244.285443L482.399624,245.007457L479.161992,248.055526L479.655997,251.915374L478.189182,251.29093L475.901559,252.941805L475.240352,254.463888L472.519525,257.164611L473.484735,259.065264L469.737897,262.83925L466.317863,262.79632L469.403494,266.172223L467.685877,269.926696L466.492665,270.687737L463.870639,270.441862L461.499415,271.60489L464.303843,272.139571L463.505835,274.754432L460.0098,276.280418L459.112991,272.697668L458.588586,275.507668L457.098971,277.685419L454.826548,278.231808L455.259753,280.327599L453.177332,280.612502L450.798508,282.158002L449.704097,285.912475L449.780098,289.538156L451.117711,288.402448L455.054551,288.6171L456.088161,290.283587L457.539775,290.521656L459.310593,292.32474L457.820978,297.078324L455.799358,298.865796L452.158922,299.252171L451.528115,301.800685L450.076501,301.828005L449.9549,304.926811L448.351284,304.755088L446.139661,306.42938L448.609686,305.758102L448.267683,308.478339L446.101661,309.254992L446.322063,310.859033L444.536045,308.67738L444.665247,310.581936L443.092031,312.123534L441.237612,311.366395L439.155192,311.7957L436.221562,313.391937L436.487565,315.093548L433.363934,315.85459L433.531135,318.278215L432.353124,318.641173L430.650707,316.568798L429.389094,318.38359L429.784298,319.460757L427.922279,319.921284L427.808278,321.970243L424.03104,321.131146L424.00824,324.144091L422.161422,322.860076L417.152972,326.825299L419.660997,326.247688L418.802188,328.538619L419.790198,329.428452L418.00418,331.664744L415.754558,332.351633L416.286563,333.928355L414.394144,332.308703L412.706927,335.3958L412.098921,333.75273L407.660477,337.901384L405.616056,335.407508L404.430444,335.926578L405.144851,337.413536L403.594436,337.561842L403.602036,340.824565L401.306813,340.684065L400.638006,339.122953L398.335183,339.556162L395.196352,341.718301L399.02679,341.445106L398.152782,343.517482L395.105151,341.987593L395.089951,343.369176L392.612326,342.557398L389.9751,344.72344L393.623136,347.127551L392.065121,348.196913L389.693897,353.524205L388.698287,353.62958L388.03708,350.589316L386.919869,350.491746L387.04147,353.204177L384.503045,352.310441L383.347833,354.136941L377.617376,354.460872L376.636966,356.162483L375.816158,353.688122L374.364544,359.233969L372.206122,358.734414L373.642536,355.030677L371.430914,354.035469L370.678507,355.499011L369.515695,354.577955L367.828478,357.177205L363.625636,358.441705L360.760408,361.165845L360.372804,358.047525L359.088391,361.115109L357.302373,361.005831L355.660757,359.448622L354.649946,360.91997L351.131111,362.25472L349.9987,361.407817L347.741477,361.528803L348.600286,358.664164L350.553506,356.65033L350.340703,355.803427L347.346273,355.713664L345.879459,357.466011L345.522255,360.112095L341.881819,364.069512L340.392204,363.050887L341.04581,365.790637L339.388994,366.696081L338.089381,364.545651L337.473775,366.660956L334.540145,366.696081L333.430534,364.510526L335.00375,364.822748L334.137341,361.497581L332.404524,360.041845L331.279713,361.856636L332.678127,363.753387L332.00172,364.580776L331.895319,367.788859L327.897679,367.632748L326.263663,363.23822L324.698047,363.132845L323.95324,364.60029L325.853259,366.340929L323.03363,368.776262L321.080411,369.072873L322.676427,365.778929L323.254033,362.539623L326.423264,361.532706L329.151692,362.145442L328.96929,360.47115L333.02013,358.523664L334.920149,358.402678L334.03854,356.755705L339.229392,352.345566L346.01626,348.833066L353.243932,348.001774L355.615156,349.379454L358.548785,348.715982L356.314363,350.163913L357.98638,354.269636L360.289203,354.937011L359.04279,353.637385L359.03519,351.315232L362.789628,352.454844L362.820028,354.062788L365.556056,355.151663L366.186862,353.707635L362.03722,349.644843L363.473635,347.935427L366.202062,343.275509L373.946539,338.37362L377.571776,337.2223L384.693047,333.940064L385.98506,332.956564L387.869879,334.896244L389.503895,334.732328L389.329093,331.57498L391.867519,327.582438L395.272353,324.222146L398.243982,323.039604L400.486005,320.619882L403.579236,318.887048L405.061251,320.093007L404.924449,318.020631L403.746437,317.798173L406.459665,306.632325L408.496485,305.562963L407.531275,302.991033L407.865679,300.302018L409.180492,297.76131L410.677707,296.965143L414.508145,293.58924L416.157362,287.481392L414.553746,289.815253L411.521315,290.431892L402.02122,294.096601L400.364404,294.108309L399.110391,292.843809L398.806388,290.724601L396.784768,289.245448L398.350384,284.925072L396.526365,286.654003L394.618746,287.188684L393.721937,290.420184L392.802328,290.463115L393.569936,295.688935L392.703527,297.894004L389.595096,297.082226L387.254273,289.90892L385.726657,287.255031L384.00904,286.57985L384.746247,284.562114L383.233832,284.460642L382.200222,287.102822L380.763808,287.575059L379.9506,285.026544L377.168972,284.382586L377.419774,281.927739L376.568566,279.960738L371.271313,282.977586L370.154102,284.526989L368.634086,283.239072L363.374834,285.865642L363.093631,287.235517L358.822388,288.835656L357.393574,286.946711L354.482745,286.587656L353.418734,285.768072L357.583576,285.498781L359.080791,283.118086L359.369594,279.285558L357.879979,274.871516L357.515175,272.061515L359.179592,269.700334L362.614826,267.546001L361.284813,264.002278L361.414014,262.530931L360.046,258.581319L359.947199,256.415277L357.887579,250.877235L356.276363,251.509485L355.113551,254.737083L353.160332,254.108735L352.461125,254.951736L348.402684,256.204527L344.085841,256.544069L338.195782,255.263958L336.409764,254.03068L335.97656,251.525096L337.268573,251.216777L334.806148,248.129679L334.213342,245.503109L332.830128,243.629776L332.852929,242.201359L330.97571,241.912553L328.361284,237.86147L330.641306,236.893581L329.774898,235.843733L328.03448,236.542331L326.104061,235.734456L327.373274,234.536303L331.781318,232.0034L331.393714,230.465705L333.559736,229.626608L332.852929,228.065496L330.831308,226.949302L331.735717,225.111093L333.620536,225.306232L332.03212,223.678774L330.656507,220.907801L329.372094,222.917732L327.03887,221.715676L327.236472,218.929093L328.064881,217.672398L325.268053,216.048842L325.351654,213.886703L327.517675,212.817342L326.142061,210.912786L323.436434,211.189883L324.02164,208.387689L328.574086,208.450133L326.187662,206.959272L325.762058,204.551258L331.04411,205.000077L330.322103,201.655396L331.150512,199.376174L338.811388,192.152131L341.646216,190.672978L343.903439,190.544187L343.561436,187.464895L345.613456,182.559102L347.414674,180.962866L348.653487,181.212644L348.630686,178.976352L351.906319,176.943005L354.741147,177.126435L357.705177,178.984158L359.156792,181.82538L360.99601,183.858728L364.00564,183.86263L368.573286,180.958963L373.748937,175.842421L373.589336,174.472546L375.884559,175.889254L374.744547,177.337185L379.380594,177.426949L382.124221,178.094324L385.255453,177.590866L385.726657,176.470768L389.602696,172.837282L390.324703,170.636115L389.488695,164.53217L389.9599,161.97585L387.649476,157.183238L385.103451,156.086558L387.178272,153.670738L390.567906,154.982071L393.136731,152.730168L393.623136,150.450946L392.885929,147.875112L390.575506,145.049501L388.234682,148.070251L386.676667,148.382474L385.361854,147.320918L382.671427,148.839099L379.9506,148.89764L379.182992,150.111404L375.785758,151.535918L374.258143,154.677655L372.434124,155.743113L372.745727,152.129141L369.9869,147.644848L368.223682,148.624446L369.728497,150.743654L370.96731,151.106613L369.728497,153.190696L365.738457,148.675182L363.108831,147.863404L357.98638,147.23896L353.175532,148.61664L351.450315,148.468335L345.628656,144.79582L340.688607,142.259015L339.373794,140.526181L339.100191,138.149389L340.529005,135.573555L338.598586,132.037638L337.428174,127.830443L340.551806,129.231541L343.538635,126.359096L342.299823,124.610651L340.681007,124.34136L337.716977,122.167512L334.532545,120.875693L331.332913,116.648984L329.531695,115.236178ZM243.582436,392.001695L243.582436,392.001695L243.582436,392.001695ZM243.339233,390.655237L243.339233,390.655237L243.339233,390.655237ZM242.412024,392.017306L242.412024,392.017306L242.412024,392.017306ZM322.722027,108.808302L322.722027,108.808302L322.722027,108.808302ZM232.866329,392.875918L234.903149,392.313918L235.746757,391.033806L237.274373,391.096251L237.555576,389.722473L239.349193,388.481389L239.455595,386.834417L242.609626,385.113292L246.158862,386.409014L245.406454,384.726917L246.356464,382.685764L249.343293,381.058305L252.618926,381.101236L255.210552,382.927736L253.690537,385.698709L249.366094,387.04907L247.01767,387.177861L242.602026,390.780126L238.459985,391.392862ZM230.525505,393.551098L230.525505,393.551098L230.525505,393.551098ZM225.258653,386.647084L225.258653,386.647084L225.258653,386.647084ZM250.430104,307.463616L254.199742,309.102783L252.413724,310.090186ZM225.296653,384.863514L225.296653,384.863514L225.296653,384.863514ZM220.873409,388.832639L221.367414,388.376014L225.372654,389.031681L224.156642,391.26407L222.902629,389.589778L221.238212,390.011278ZM219.870199,386.873445L219.870199,386.873445L219.870199,386.873445ZM217.787778,390.389848L218.418584,389.125348L219.877799,390.003473ZM246.706067,293.007726L248.537685,292.231073L250.620106,292.750143L248.537685,294.131726ZM207.740477,390.932334L208.591686,389.449278L211.160512,388.746778L212.330923,389.769306L211.190912,391.135279ZM203.241232,389.363417L203.241232,389.363417L203.241232,389.363417ZM200.794008,390.436681L200.794008,390.436681L200.794008,390.436681ZM279.04439,149.709418L281.476415,146.247654L282.388424,143.605473L282.692427,145.966654L284.774848,148.22246L288.833288,151.028557L291.99492,149.799182L295.627756,150.509488L296.96537,153.405349L296.668967,155.860197L300.013,158.221377L301.122611,160.239114L306.883469,162.772017L308.502285,163.989684L307.757478,165.484448L305.667457,166.889448L302.475425,165.195642L300.719807,165.250281L297.877379,167.275823L296.608166,169.086712L295.756958,165.433712L293.537735,162.089031L291.96452,161.491906L292.02532,159.251711L290.497705,156.757836L287.99728,154.611308L285.747657,153.670738L281.613216,155.025002L279.181192,152.753585ZM181.451815,388.571153L182.774228,387.209084L185.419054,387.127125L186.361464,388.973139L182.561426,389.574167ZM175.364154,391.135279L175.364154,391.135279L175.364154,391.135279ZM242.784428,209.898064L245.224052,208.290119L244.730047,210.639592L247.481275,214.61262L249.115291,215.162912L250.285703,217.364079L246.234862,215.779551L243.97004,210.990842ZM243.483635,206.237258L243.483635,206.237258L243.483635,206.237258ZM161.250813,384.21175L163.158432,385.43332L167.133271,386.014834L170.264503,388.707751L171.533715,388.754584L175.744157,390.678654L172.780128,390.432779L168.265683,389.051195L165.696857,387.54082L162.246422,386.498778ZM154.327143,384.309319L154.327143,384.309319L154.327143,384.309319ZM153.559536,380.18018L153.559536,380.18018L153.559536,380.18018ZM147.608676,376.285207L147.608676,376.285207L147.608676,376.285207ZM143.162632,379.426944L149.820298,379.953819L151.264313,381.354916L156.781968,381.491514L159.9816,380.13725L157.458375,378.474666L161.912019,377.475555L163.766438,379.57525L161.919619,382.190111L159.905599,381.635916L160.893609,384.086861L158.742787,384.121986L157.488775,382.923833L153.878739,383.513153L151.097111,383.122875L149.561896,381.620305L144.735847,380.519722ZM140.692607,379.497194L140.692607,379.497194L140.692607,379.497194ZM142.053021,375.126082L142.053021,375.126082L142.053021,375.126082ZM137.173772,378.642486L137.173772,378.642486L137.173772,378.642486ZM135.349753,378.060972L135.349753,378.060972L135.349753,378.060972ZM134.612546,376.730124L134.612546,376.730124L134.612546,376.730124ZM133.624536,376.874527L133.624536,376.874527L133.624536,376.874527ZM132.894929,377.241388L132.894929,377.241388L132.894929,377.241388ZM132.134921,376.858916L132.134921,376.858916L132.134921,376.858916ZM131.671317,377.846319L133.563736,378.076583L133.320533,379.598666ZM132.066521,376.269596L132.066521,376.269596L132.066521,376.269596ZM131.564916,376.250082L131.564916,376.250082L131.564916,376.250082ZM131.97532,373.670346L133.320533,372.870277L134.817748,374.731902L133.616936,376.534985L131.732117,375.102666ZM129.558496,378.384902L131.055711,379.067888L130.0297,380.082611ZM117.664377,378.049263L123.060431,374.177707L123.721637,372.409749L126.807268,373.096638L125.97126,374.860693L124.420844,375.500749L125.819258,376.776958L129.239292,377.456041L127.582476,379.848444L125.614056,378.701027L123.106031,379.309861L121.669617,378.595652L119.913999,379.563541L120.681607,377.143819L117.97598,379.142041ZM113.99354,369.506082L113.99354,369.506082L113.99354,369.506082ZM108.97749,372.105332L111.645116,372.901499L116.569966,372.862471L117.793578,370.567637L119.207192,371.246721L116.334363,375.535874L114.343143,375.30561L113.712337,373.654735ZM103.779038,365.37304L105.496655,365.154484L107.738677,366.317512L108.103481,368.631859L110.740707,370.181262L108.278283,369.720735L105.055851,371.921901L103.657437,369.556818L105.663857,370.274929ZM98.800988,372.983457L98.800988,372.983457L98.800988,372.983457ZM95.054151,368.11279L95.054151,368.11279L95.054151,368.11279ZM92.500525,367.539081L92.500525,367.539081L92.500525,367.539081ZM94.468945,363.206998L95.943359,362.684025L95.715357,364.57297ZM88.746087,370.516901L88.746087,370.516901L88.746087,370.516901ZM88.145681,370.996943L88.145681,370.996943L88.145681,370.996943ZM90.0229,366.052123L90.0229,366.052123L90.0229,366.052123ZM85.668057,371.914096L85.668057,371.914096L85.668057,371.914096ZM502.311823,276.292127L502.311823,276.292127L502.311823,276.292127ZM502.258623,270.664321L502.258623,270.664321L502.258623,270.664321ZM501.126211,24.008737L501.126211,24.008737L501.126211,24.008737ZM502.182622,275.91746L502.182622,275.91746L502.182622,275.91746ZM500.814608,276.054057L500.814608,276.054057L500.814608,276.054057ZM495.836558,242.544804L495.836558,242.544804L495.836558,242.544804ZM493.845338,283.075155L493.845338,283.075155L493.845338,283.075155ZM490.774908,281.888711L490.774908,281.888711L490.774908,281.888711ZM489.885699,284.242086L491.512115,282.216544L490.516505,284.948489ZM488.259283,284.538697L488.259283,284.538697L488.259283,284.538697ZM482.407224,286.0881L482.407224,286.0881L482.407224,286.0881ZM481.723217,278.969433L481.723217,278.969433L481.723217,278.969433ZM481.259613,279.383127L481.259613,279.383127L481.259613,279.383127ZM480.902409,288.027781L480.902409,288.027781L480.902409,288.027781ZM481.077211,279.726572L481.077211,279.726572L481.077211,279.726572ZM485.804458,25.612779L485.804458,25.612779L485.804458,25.612779ZM478.546385,288.695156L478.546385,288.695156L478.546385,288.695156ZM485.606856,25.089807L485.606856,25.089807L485.606856,25.089807ZM476.714767,287.719461L476.714767,287.719461L476.714767,287.719461ZM476.783168,282.743419L476.783168,282.743419L476.783168,282.743419ZM475.901559,309.785769L475.901559,309.785769L475.901559,309.785769ZM484.238842,23.610654L484.238842,23.610654L484.238842,23.610654ZM483.714437,23.485765L483.714437,23.485765L483.714437,23.485765ZM474.867949,293.218476L474.867949,293.218476L474.867949,293.218476ZM474.525945,293.839018L474.525945,293.839018L474.525945,293.839018ZM474.229542,293.015531L474.229542,293.015531L474.229542,293.015531ZM475.209952,260.236097L476.083961,259.642875L477.163172,256.356736L478.173982,257.125583ZM473.256733,291.90324L473.256733,291.90324L473.256733,291.90324ZM472.443524,293.608754L472.443524,293.608754L472.443524,293.608754ZM470.475105,319.800298L470.475105,319.800298L470.475105,319.800298ZM470.0495,328.784494L470.0495,328.784494L470.0495,328.784494ZM480.97841,22.990112L480.97841,22.990112L480.97841,22.990112ZM470.870309,293.07017L470.870309,293.07017L470.870309,293.07017ZM469.897499,319.160243L469.897499,319.160243L469.897499,319.160243ZM470.171102,302.46806L470.171102,302.46806L470.171102,302.46806ZM468.521885,314.539353L468.521885,314.539353L468.521885,314.539353ZM468.233082,299.252171L468.233082,299.252171L468.233082,299.252171ZM468.704287,264.13107L468.704287,264.13107L468.704287,264.13107ZM467.784678,262.72607L467.784678,262.72607L467.784678,262.72607ZM477.436774,16.039264L477.436774,16.039264L477.436774,16.039264ZM463.878239,314.874992L465.618656,314.277867L464.835848,315.749215ZM464.341843,271.35121L464.341843,271.35121L464.341843,271.35121ZM458.634186,290.455309L458.634186,290.455309L458.634186,290.455309ZM457.167372,312.154756L460.321403,308.724214L462.373424,308.716408L461.99342,306.757214L463.536235,307.565089L463.870639,305.93763L465.337453,306.636227L464.03024,304.53263L466.811868,302.944199L466.804268,300.906949L468.03548,299.771241L471.128711,299.685379L469.905099,302.74906L468.331883,304.575561L469.9583,306.281075L471.341513,304.423352L473.705137,307.182616L474.898349,306.171797L475.103551,308.361255L473.575936,310.734145L470.877909,308.626644L471.364314,311.108811L467.587076,311.616172L463.536235,314.582284ZM458.869789,275.882335L458.869789,275.882335L458.869789,275.882335ZM455.259753,315.031103L455.259753,315.031103L455.259753,315.031103ZM455.920959,299.697088L455.920959,299.697088L455.920959,299.697088ZM456.95457,281.806752L458.846988,281.022294L459.698197,282.384364L457.630976,283.118086ZM453.222932,338.666328L453.222932,338.666328L453.222932,338.666328ZM449.9625,342.022718L449.9625,342.022718L449.9625,342.022718ZM449.377294,342.416898L449.377294,342.416898L449.377294,342.416898ZM448.814888,342.401287L448.814888,342.401287L448.814888,342.401287ZM450.96571,304.165769L450.96571,304.165769L450.96571,304.165769ZM450.479305,302.74906L450.479305,302.74906L450.479305,302.74906ZM448.062481,336.297342L448.062481,336.297342L448.062481,336.297342ZM451.170912,281.814558L451.170912,281.814558L451.170912,281.814558ZM446.086461,343.213065L446.086461,343.213065L446.086461,343.213065ZM449.384894,289.026892L449.384894,289.026892L449.384894,289.026892ZM443.228832,346.265037L445.159252,344.676607L446.755268,344.72344L447.598876,346.315774L449.544495,346.214301L448.434884,347.467093L444.862849,347.502218ZM444.733647,310.964408L444.733647,310.964408L444.733647,310.964408ZM444.634846,311.452256L444.634846,311.452256L444.634846,311.452256ZM443.783638,311.2337L443.783638,311.2337L443.783638,311.2337ZM437.528775,348.40376L439.04879,346.331385L441.921619,344.809301L442.879229,345.972329ZM439.101991,327.414619L441.435214,323.886507L446.626066,320.670618L449.711697,321.201396L449.514095,323.613313L450.874509,324.389966L451.786518,322.785924L451.148111,321.271646L453.519335,320.975035L450.532505,320.065687L450.547705,317.587423L451.938519,316.38927L454.499745,316.151201L455.457355,318.492868L456.156562,317.11909L458.345383,318.176743L458.056581,317.068354L455.601756,315.148187L456.354164,314.207617L460.861009,317.403993L458.474585,313.938325L462.99663,315.035006L464.661047,316.13559L463.923839,317.915256L469.137491,314.757909L470.475105,316.104367L468.924689,316.334631L469.205892,318.344562L468.195082,322.220021L469.677097,321.521424L470.315503,322.910813L472.291523,322.785924L470.482705,325.268091L469.836698,327.426327L467.640276,327.082883L464.949849,325.342243L462.692627,325.311021L466.545865,328.187369L465.246252,330.513425L463.802238,330.763202L462.859829,328.936702L460.245402,329.580661L462.175822,330.849063L460.481005,331.848175L458.854589,331.567175L459.264993,333.046328L462.00862,332.484328L462.96623,333.397578L458.656987,334.822092L458.185782,336.551022L456.840568,336.387106L456.688567,332.09405L454.332543,336.414425L448.488085,341.968079L446.299263,341.776842L447.507675,339.485912L450.532505,337.234009L448.883289,337.136439L451.224112,332.593605L444.460045,339.450787L444.292843,337.46037L441.936819,335.832911L442.157222,331.438383L441.511215,329.697744L439.580796,328.722049ZM460.861009,8.85425L460.861009,8.85425L460.861009,8.85425ZM459.500595,8.315666L459.500595,8.315666L459.500595,8.315666ZM458.200982,7.507791L458.200982,7.507791L458.200982,7.507791ZM424.02344,361.294636L426.675867,359.858414L426.067861,362.847942ZM456.194562,6.828708L456.194562,6.828708L456.194562,6.828708ZM426.356664,321.704854L426.356664,321.704854L426.356664,321.704854ZM421.690217,324.546077L421.690217,324.546077L421.690217,324.546077ZM452.96453,3.905527L452.96453,3.905527L452.96453,3.905527ZM421.059411,324.909035L421.059411,324.909035L421.059411,324.909035ZM420.664207,325.100271L420.664207,325.100271L420.664207,325.100271ZM420.322203,325.369563L420.322203,325.369563L420.322203,325.369563ZM419.904199,326.044744L419.904199,326.044744L419.904199,326.044744ZM419.805398,326.189146L419.805398,326.189146L419.805398,326.189146ZM452.113321,3.370846L452.113321,3.370846L452.113321,3.370846ZM417.221372,333.229758L417.221372,333.229758L417.221372,333.229758ZM416.97057,332.745814L416.97057,332.745814L416.97057,332.745814ZM414.135741,333.534175L414.135741,333.534175L414.135741,333.534175ZM411.574516,355.124344L412.782928,353.844233L412.509325,356.162483ZM413.611336,334.759647L413.611336,334.759647L413.611336,334.759647ZM413.482135,334.279606L413.482135,334.279606L413.482135,334.279606ZM413.292133,335.079675L413.292133,335.079675L413.292133,335.079675ZM411.179312,352.072371L411.179312,352.072371L411.179312,352.072371ZM405.433654,342.86962L406.322863,341.991495L409.431294,343.084273ZM405.350054,335.852425L405.350054,335.852425L405.350054,335.852425ZM404.453245,340.274273L404.453245,340.274273L404.453245,340.274273ZM400.075601,343.36137L400.075601,343.36137L400.075601,343.36137ZM397.590376,346.358704L397.590376,346.358704L397.590376,346.358704ZM393.729537,350.53858L393.729537,350.53858L393.729537,350.53858ZM389.00989,349.274079L389.00989,349.274079L389.00989,349.274079ZM433.059931,11.808653L433.059931,11.808653L433.059931,11.808653ZM384.487845,354.410136L384.487845,354.410136L384.487845,354.410136ZM384.085041,354.203288L384.085041,354.203288L384.085041,354.203288ZM383.157832,357.42308L383.157832,357.42308L383.157832,357.42308ZM383.233832,356.482511L383.727837,355.354608L385.03505,356.505927ZM380.95381,355.292163L380.95381,355.292163L380.95381,355.292163ZM380.817008,355.729275L380.817008,355.729275L380.817008,355.729275ZM380.452205,354.702844L380.452205,354.702844L380.452205,354.702844ZM379.585796,355.584872L379.585796,355.584872L379.585796,355.584872ZM375.04855,372.971749L375.04855,372.971749L375.04855,372.971749ZM374.387344,376.624749L374.387344,376.624749L374.387344,376.624749ZM377.092971,356.365427L377.092971,356.365427L377.092971,356.365427ZM377.168972,355.463886L377.168972,355.463886L377.168972,355.463886ZM376.401364,357.981178L376.401364,357.981178L376.401364,357.981178ZM373.832538,372.600985L373.832538,372.600985L373.832538,372.600985ZM372.96613,373.643027L372.96613,373.643027L372.96613,373.643027ZM372.95853,372.269249L372.95853,372.269249L372.95853,372.269249ZM375.519755,354.839441L375.519755,354.839441L375.519755,354.839441ZM370.617706,378.04536L370.617706,378.04536L370.617706,378.04536ZM370.99771,370.95011L373.186532,370.969624L371.879319,372.893693ZM371.058511,369.560721L371.058511,369.560721L371.058511,369.560721ZM372.662127,357.056219L372.662127,357.056219L372.662127,357.056219ZM369.599296,371.418443L369.599296,371.418443L369.599296,371.418443ZM367.744877,377.557513L367.744877,377.557513L367.744877,377.557513ZM368.573286,371.742374L368.573286,371.742374L368.573286,371.742374ZM368.079281,372.343401L368.079281,372.343401L368.079281,372.343401ZM379.129791,291.091462L379.129791,291.091462L379.129791,291.091462ZM365.115251,374.021596L365.115251,374.021596L365.115251,374.021596ZM367.00007,361.579539L367.00007,361.579539L367.00007,361.579539ZM365.768858,365.267665L365.768858,365.267665L365.768858,365.267665ZM363.283633,373.112249L363.283633,373.112249L363.283633,373.112249ZM377.153772,285.272419L377.153772,285.272419L377.153772,285.272419ZM362.303223,374.677263L365.03165,372.109235L363.922039,370.325665L366.179262,370.66911L366.414864,368.370373L367.357274,369.310943L368.520085,366.754623L368.04888,371.149151L364.583246,373.104443L362.599626,375.652957ZM375.595756,288.640517L375.595756,288.640517L375.595756,288.640517ZM363.139231,364.202206L363.139231,364.202206L363.139231,364.202206ZM363.063231,362.687928L365.890459,362.637192L365.388854,364.186595ZM362.744027,359.799872L362.744027,359.799872L362.744027,359.799872ZM374.113741,288.519531L374.113741,288.519531L374.113741,288.519531ZM360.220802,365.552567L360.220802,365.552567L360.220802,365.552567ZM360.312003,364.674442L362.99483,364.213914L362.493225,366.840484ZM359.141591,363.971942L359.141591,363.971942L359.141591,363.971942ZM358.807188,348.091538L358.807188,348.091538L358.807188,348.091538ZM355.896359,363.905595L356.97557,362.707442L358.837588,362.644998L358.419584,364.78372L360.076401,363.004053L359.574796,364.892998L360.304403,368.007415L358.533585,368.385984L356.831168,367.004401L356.093961,368.311832ZM357.249172,350.745427L358.97439,349.734607L358.99719,350.928857ZM356.549965,348.068121L356.549965,348.068121L356.549965,348.068121ZM396.944369,115.923067L396.944369,115.923067L396.944369,115.923067ZM396.746767,115.852817L396.746767,115.852817L396.746767,115.852817ZM366.110861,289.432781L366.825268,287.00135L371.734917,285.120211L368.436484,290.107962L366.02726,290.463115ZM350.95631,362.332775L350.95631,362.332775L350.95631,362.332775ZM385.99266,163.095947L385.99266,163.095947L385.99266,163.095947ZM347.870679,365.271567L349.466695,365.166192L348.99549,366.46972ZM381.501015,177.594768L381.501015,177.594768L381.501015,177.594768ZM345.149851,367.777151L345.149851,367.777151L345.149851,367.777151ZM346.289863,357.735303L346.289863,357.735303L346.289863,357.735303ZM359.01999,288.859073L359.01999,288.859073L359.01999,288.859073ZM394.367944,98.024926L394.367944,98.024926L394.367944,98.024926ZM344.617846,364.479303L346.913069,363.745581L346.335463,364.904706ZM394.398344,97.080454L394.398344,97.080454L394.398344,97.080454ZM379.570596,174.07056L379.570596,174.07056L379.570596,174.07056ZM341.638616,365.462803L342.793828,364.787623L344.98265,366.977081L343.401834,367.894234ZM340.96221,368.202554L340.96221,368.202554L340.96221,368.202554ZM341.197812,366.137984L341.197812,366.137984L341.197812,366.137984ZM340.513805,366.762429L340.513805,366.762429L340.513805,366.762429ZM376.401364,176.170254L376.401364,176.170254L376.401364,176.170254ZM353.943139,285.451947L353.943139,285.451947L353.943139,285.451947ZM336.706167,371.531624L336.706167,371.531624L336.706167,371.531624ZM333.126531,375.699791L333.126531,375.699791L333.126531,375.699791ZM333.825738,368.354762L333.825738,368.354762L333.825738,368.354762ZM333.719337,368.912859L336.204562,368.292318L336.136161,370.50129L334.844148,371.488693ZM330.633706,381.8935L330.633706,381.8935L330.633706,381.8935ZM330.800908,380.359708L330.800908,380.359708L330.800908,380.359708ZM330.344903,381.663236L330.344903,381.663236L330.344903,381.663236ZM330.162502,381.167583L330.162502,381.167583L330.162502,381.167583ZM369.698097,172.763129L371.529715,171.908421L373.384134,172.482129L373.178932,174.414004L370.480905,173.891032ZM329.311293,370.973526L329.311293,370.973526L329.311293,370.973526ZM330.854109,359.101275L330.854109,359.101275L330.854109,359.101275ZM329.9801,359.678886L329.9801,359.678886L329.9801,359.678886ZM325.876059,379.091305L326.940069,377.752652L329.189692,379.060083L329.812898,380.964639ZM329.911699,358.340233L329.911699,358.340233L329.911699,358.340233ZM372.160522,152.656016L372.160522,152.656016L372.160522,152.656016ZM327.563276,368.304026L327.563276,368.304026L327.563276,368.304026ZM328.718487,360.75215L328.718487,360.75215L328.718487,360.75215ZM328.688087,360.490664L328.688087,360.490664L328.688087,360.490664ZM328.087681,360.092581L328.087681,360.092581L328.087681,360.092581ZM326.339663,356.014177L326.339663,356.014177L326.339663,356.014177ZM372.213722,108.91758L372.213722,108.91758L372.213722,108.91758ZM336.97217,257.297305L336.97217,257.297305L336.97217,257.297305ZM348.288683,180.389158L348.288683,180.389158L348.288683,180.389158ZM347.893479,180.697477L347.893479,180.697477L347.893479,180.697477ZM347.870679,179.784227L347.870679,179.784227L347.870679,179.784227ZM298.188982,378.595652L298.188982,378.595652L298.188982,378.595652ZM343.903439,185.544728L343.903439,185.544728L343.903439,185.544728ZM297.854579,378.158541L297.854579,378.158541L297.854579,378.158541ZM343.02183,188.284478L343.02183,188.284478L343.02183,188.284478ZM343.143431,187.636617L343.143431,187.636617L343.143431,187.636617ZM297.132571,379.145944L297.132571,379.145944L297.132571,379.145944ZM342.482225,188.635728L342.482225,188.635728L342.482225,188.635728ZM299.055391,369.556818L302.513425,368.499165L305.576256,364.686151L307.628276,363.257734L308.661887,364.334901L315.137151,362.512303L319.833998,363.199192L320.837208,365.735998L320.632006,368.218165L321.293213,370.532512L323.451635,370.587151L323.740437,372.296568L319.750398,370.911082L319.476795,372.347304L317.097971,372.854665L314.255543,371.672124L310.394704,371.199887L307.073471,372.21461L304.755448,374.571888L301.97382,374.661652L299.549395,373.369832ZM331.728117,229.392441L331.728117,229.392441L331.728117,229.392441ZM341.342213,189.435798L341.342213,189.435798L341.342213,189.435798ZM340.703807,190.0017L340.703807,190.0017L340.703807,190.0017ZM292.861329,379.263027L293.932939,378.903972L296.927369,379.981138L295.072951,380.629ZM289.236092,378.997638L289.236092,378.997638L289.236092,378.997638ZM289.494495,377.374083L289.494495,377.374083L289.494495,377.374083ZM289.236092,377.662888L289.236092,377.662888L289.236092,377.662888ZM287.807278,379.40743L287.807278,379.40743L287.807278,379.40743ZM287.472875,374.528957L288.802888,373.697666L290.543305,374.162096L289.205692,375.617832L291.204512,376.589624L287.784478,377.690208ZM316.97637,248.765832L316.97637,248.765832L316.97637,248.765832ZM280.351604,381.741291L280.351604,381.741291L280.351604,381.741291ZM280.769608,378.599555L280.769608,378.599555L280.769608,378.599555ZM281.157212,375.79736L283.406834,374.076235L284.858449,374.607013L286.849668,377.237485L285.344853,378.21318L281.544815,377.740944ZM324.888049,205.698674L324.888049,205.698674L324.888049,205.698674ZM279.219192,378.505888L279.219192,378.505888L279.219192,378.505888ZM340.0426,144.229918L340.0426,144.229918L340.0426,144.229918ZM276.581966,382.494528L279.568796,381.733486L279.089991,383.462417L276.97717,384.317125ZM703.090631,305.512227L703.090631,305.512227L703.090631,305.512227ZM707.787478,323.558674L707.787478,323.558674L707.787478,323.558674ZM717.059571,358.632942L717.059571,358.632942L717.059571,358.632942ZM702.915829,306.261561L702.915829,306.261561L702.915829,306.261561ZM701.061411,299.927352L701.061411,299.927352L701.061411,299.927352ZM712.666727,345.503996L713.403934,343.447232L714.878349,345.269829ZM709.847098,335.188953L709.847098,335.188953L709.847098,335.188953ZM698.750988,294.159045L698.750988,294.159045L698.750988,294.159045ZM711.207512,341.737815L711.306313,339.903509L712.393124,340.41087ZM709.512695,335.864133L709.512695,335.864133L709.512695,335.864133ZM712.248722,346.319676L712.248722,346.319676L712.248722,346.319676ZM708.03828,331.149577L708.03828,331.149577L708.03828,331.149577ZM712.621126,348.907218L713.593936,346.132343L715.638356,346.237718L713.98154,347.689551L714.01194,350.238066ZM709.02629,336.191967L709.02629,336.191967L709.02629,336.191967ZM710.242302,341.058731L710.242302,341.058731L710.242302,341.058731ZM705.948259,324.858299L705.948259,324.858299L705.948259,324.858299ZM710.432304,342.561301L710.432304,342.561301L710.432304,342.561301ZM704.367444,322.122451L704.367444,322.122451L704.367444,322.122451ZM707.263073,334.986008L709.611496,329.580661L708.03068,328.511299L707.308673,325.381271L710.075101,325.373466L712.689527,324.471924L715.699157,327.47316L715.797958,330.525133L719.02799,329.931911L722.607626,331.910619L725.237252,334.146911L726.491265,337.827231L726.95487,336.359786L730.139301,339.87619L726.187262,338.55705L725.548855,340.844078L727.600876,339.856676L729.751698,340.945551L733.240132,344.134121L734.592946,343.95069L735.337753,345.769385L734.387744,350.476135L736.00656,348.782329L738.03578,353.828622L737.944579,356.517636L733.817738,357.056219L733.072931,354.535024L728.421684,352.579733L727.631276,348.150079L725.830058,349.371649L727.091671,351.151316L726.529265,352.704621L724.454445,352.134816L722.812828,348.462302L720.228802,348.107149L722.425224,350.643955L722.03762,351.767955L723.800838,352.806094L724.667247,354.550636L727.631276,356.400552L729.02969,358.164608L727.205672,359.573511L725.898459,357.910928L721.452415,355.026775L719.704397,352.232385L719.073591,348.673052L717.697977,349.988288L716.04876,349.941455L715.448354,347.876885L719.757598,344.871746L717.599176,342.233468L717.872779,341.179717L715.904359,341.437301L709.695097,338.389231L710.903509,336.8008L712.377924,337.538425L714.315943,336.441745L713.510335,334.993814L711.351914,334.244481L710.97191,332.254064L709.702697,335.153828ZM710.128301,346.315774L710.409504,344.122412L712.628726,343.466745L712.149921,345.937204ZM704.337043,324.643646L704.337043,324.643646L704.337043,324.643646ZM703.850639,323.070827L703.850639,323.070827L703.850639,323.070827ZM703.531435,322.102938L703.531435,322.102938L703.531435,322.102938ZM698.910589,305.929825L698.910589,305.929825L698.910589,305.929825ZM705.97106,336.574439L706.913469,335.629967L707.202272,337.616481ZM700.233002,314.679853L700.233002,314.679853L700.233002,314.679853ZM698.310183,309.528186L698.310183,309.528186L698.310183,309.528186ZM697.03337,305.898602L697.03337,305.898602L697.03337,305.898602ZM699.054991,314.024187L699.054991,314.024187L699.054991,314.024187ZM693.871739,295.244018L693.871739,295.244018L693.871739,295.244018ZM692.648126,290.82217L692.648126,290.82217L692.648126,290.82217ZM693.544935,294.600059L693.544935,294.600059L693.544935,294.600059ZM696.645766,306.733797L696.645766,306.733797L696.645766,306.733797ZM693.354934,294.326865L693.354934,294.326865L693.354934,294.326865ZM703.212232,336.090495L703.212232,336.090495L703.212232,336.090495ZM690.862109,288.187795L690.862109,288.187795L690.862109,288.187795ZM691.226912,293.113101L691.226912,293.113101L691.226912,293.113101ZM690.649306,293.249698L690.649306,293.249698L690.649306,293.249698ZM690.102101,291.90324L690.102101,291.90324L690.102101,291.90324ZM700.567406,337.733564L703.645436,336.781286L701.707417,339.42737ZM694.715347,317.275201L695.574156,315.401867L697.876979,316.252673L697.481775,313.7627L698.880189,314.250548L702.02662,318.336757L700.643406,313.22802L698.484985,311.803506L699.845398,309.742839L706.138261,310.261908L708.752688,309.485256L711.587516,310.410214L713.419134,313.134353L714.589546,313.068006L717.842378,315.140381L719.339593,316.736617L716.504765,319.667604L712.97833,319.792493L711.99792,322.013174L708.859089,321.888285L708.304283,323.265965L706.480265,323.757715L704.96025,320.84234L703.402234,321.416049L702.756228,323.359632L704.283843,324.479729L703.425034,325.994007L704.945049,326.848716L704.907049,329.303563L704.063441,329.861661L704.663847,332.410175L703.455435,332.101855L702.057021,327.750258L703.00703,334.962592L701.327413,333.783953L699.01699,327.633174L699.305793,324.66316L700.651007,326.493563L700.529405,324.791952L697.747777,322.684451L697.284173,321.088215L695.589356,319.671507ZM682.882029,284.253794L682.882029,284.253794L682.882029,284.253794ZM683.02643,286.431545L683.02643,286.431545L683.02643,286.431545ZM682.464025,284.667489L682.464025,284.667489L682.464025,284.667489ZM685.823258,305.153172L685.823258,305.153172L685.823258,305.153172ZM685.542055,305.391241L685.542055,305.391241L685.542055,305.391241ZM679.621596,282.118975L679.621596,282.118975L679.621596,282.118975ZM678.96039,279.925613L678.96039,279.925613L678.96039,279.925613ZM679.689997,284.640169L681.909219,285.272419L684.067641,288.554656L685.504055,287.766295L689.9501,287.996559L695.528555,294.061476L697.154972,298.081338L694.874949,296.321185L694.244142,294.771782L692.161722,293.120906L691.568916,291.493448L689.273693,290.295295L690.360504,292.773559L693.590536,296.63731L696.113761,298.377949L698.530585,303.744269L697.474175,305.496616L695.916159,304.509213L696.151762,307.330922L692.769728,312.771395L691.439714,313.454381L689.714497,309.192547L690.96851,306.846977L689.661297,305.200005L691.067311,305.02438L689.228092,303.599866L686.051261,298.456004L685.762458,295.962129L683.117631,290.11967L681.483615,288.398545ZM678.884389,282.653655L678.884389,282.653655L678.884389,282.653655ZM677.926779,281.194016L677.926779,281.194016L677.926779,281.194016ZM678.876789,287.313572L678.876789,287.313572L678.876789,287.313572ZM680.662807,295.716254L680.662807,295.716254L680.662807,295.716254ZM680.480405,295.638198L680.480405,295.638198L680.480405,295.638198ZM686.446464,323.757715L686.446464,323.757715L686.446464,323.757715ZM677.265573,289.787934L677.265573,289.787934L677.265573,289.787934ZM672.515525,270.637001L672.515525,270.637001L672.515525,270.637001ZM672.272323,269.622279L672.272323,269.622279L672.272323,269.622279ZM672.279923,270.117932L672.279923,270.117932L672.279923,270.117932ZM677.265573,291.555892L677.265573,291.555892L677.265573,291.555892ZM676.604366,291.157809L676.604366,291.157809L676.604366,291.157809ZM671.763118,271.265348L671.763118,271.265348L671.763118,271.265348ZM682.061221,315.831173L682.061221,315.831173L682.061221,315.831173ZM678.815988,303.412533L678.815988,303.412533L678.815988,303.412533ZM670.501505,268.361681L670.501505,268.361681L670.501505,268.361681ZM681.080811,314.835964L681.080811,314.835964L681.080811,314.835964ZM680.647606,313.836853L680.647606,313.836853L680.647606,313.836853ZM680.936409,315.074034L680.936409,315.074034L680.936409,315.074034ZM681.567216,318.114298L681.567216,318.114298L681.567216,318.114298ZM681.696417,319.105604L681.696417,319.105604L681.696417,319.105604ZM678.192782,304.126741L678.192782,304.126741L678.192782,304.126741ZM674.050741,286.977934L674.050741,286.977934L674.050741,286.977934ZM680.518405,314.964756L680.518405,314.964756L680.518405,314.964756ZM673.685937,286.704739L673.685937,286.704739L673.685937,286.704739ZM680.123201,314.640826L680.123201,314.640826L680.123201,314.640826ZM674.582746,291.036823L674.582746,291.036823L674.582746,291.036823ZM674.354744,290.213337L674.354744,290.213337L674.354744,290.213337ZM679.743197,313.520728L679.743197,313.520728L679.743197,313.520728ZM679.188392,311.776186L679.188392,311.776186L679.188392,311.776186ZM677.584776,306.714283L677.584776,306.714283L677.584776,306.714283ZM680.366404,320.112521L680.366404,320.112521L680.366404,320.112521ZM676.323163,309.297922L677.797578,306.886005L678.291583,304.204797L683.824438,306.398158L686.583266,305.910311L687.183672,308.349547L686.051261,307.463616L688.278083,311.155645L692.762128,320.428646L695.01175,329.826536L694.593746,331.99648L691.584116,330.24023L688.536485,326.16573L688.855689,323.562577L687.107671,324.850493L686.720067,322.832757L684.713647,323.035701L683.97644,321.154562L681.666017,321.607285L682.623626,320.436451L682.02322,315.202826L680.609606,312.84945L681.187212,310.870742L678.542385,311.58495ZM677.96478,317.739631L677.96478,317.739631L677.96478,317.739631ZM670.668707,286.845239L670.668707,286.845239L670.668707,286.845239ZM674.787948,312.84945L675.509955,309.738936L677.645576,310.62877L677.341573,311.659103L678.97559,312.771395L678.831188,317.013715L676.657567,317.989409L675.867159,315.796048L676.535965,313.786117ZM673.473135,308.907644L673.473135,308.907644L673.473135,308.907644ZM666.04786,280.936433L666.04786,280.936433L666.04786,280.936433ZM666.473465,284.370878L666.473465,284.370878L666.473465,284.370878ZM665.546255,281.408669L665.546255,281.408669L665.546255,281.408669ZM665.03705,279.664127L665.03705,279.664127L665.03705,279.664127ZM665.196652,280.842766L665.196652,280.842766L665.196652,280.842766ZM664.482245,278.181071L664.482245,278.181071L664.482245,278.181071ZM664.573446,282.805864L664.573446,282.805864L664.573446,282.805864ZM666.085861,289.916726L666.085861,289.916726L666.085861,289.916726ZM663.99584,282.095558L663.99584,282.095558L663.99584,282.095558ZM668.312683,302.518796L668.312683,302.518796L668.312683,302.518796ZM667.887079,302.514894L667.887079,302.514894L667.887079,302.514894ZM665.432254,291.942267L665.432254,291.942267L665.432254,291.942267ZM663.129431,281.529655L663.129431,281.529655L663.129431,281.529655ZM667.294273,302.963713L667.294273,302.963713L667.294273,302.963713ZM661.662617,282.333627L661.662617,282.333627L661.662617,282.333627ZM665.584256,301.285518L665.584256,301.285518L665.584256,301.285518ZM663.205432,290.794851L663.205432,290.794851L663.205432,290.794851ZM663.532235,292.461337L663.532235,292.461337L663.532235,292.461337ZM663.570236,292.92967L663.570236,292.92967L663.570236,292.92967ZM662.323823,296.60999L662.468225,295.037171L664.246642,293.417518L664.740647,291.571504L665.797058,292.894545L666.541865,291.142198L668.289883,291.602726L670.0227,289.003475L674.514345,290.595809L673.609936,293.694615L674.286343,294.935698L675.563156,291.013406L677.326373,291.856406L679.446794,291.329531L681.704017,292.01642L682.661627,294.518101L681.939619,295.552337L679.317593,294.830323L682.859229,297.051004L681.103611,298.346726L683.474835,298.260865L686.188062,304.173574L683.938439,305.297575L676.277563,302.019241L675.403554,303.143241L677.341573,303.572547L676.262363,304.579463L677.561976,306.866491L676.02676,309.227672L674.255943,308.977894L670.455905,305.918116L668.677487,305.605894L667.507075,302.546116L662.817828,298.842379ZM658.143781,277.271724L658.143781,277.271724L658.143781,277.271724ZM658.645386,291.684684L658.645386,291.684684L658.645386,291.684684ZM654.571746,276.912669L654.571746,276.912669L654.571746,276.912669ZM620.645006,265.368251L620.645006,265.368251L620.645006,265.368251ZM619.231392,259.315042L619.231392,259.315042L619.231392,259.315042ZM619.588596,265.188723L619.588596,265.188723L619.588596,265.188723ZM619.132591,266.503959L619.132591,266.503959L619.132591,266.503959ZM619.337793,268.150931L619.337793,268.150931L619.337793,268.150931ZM619.094591,266.96839L619.094591,266.96839L619.094591,266.96839ZM619.04899,267.440626L619.04899,267.440626L619.04899,267.440626ZM617.703777,268.564626L617.703777,268.564626L617.703777,268.564626ZM598.521185,262.929014L598.521185,262.929014L598.521185,262.929014ZM563.522835,264.55257L563.522835,264.55257L563.522835,264.55257ZM562.869229,262.187486L562.869229,262.187486L562.869229,262.187486ZM561.600016,270.71896L561.95722,269.294445L564.237242,266.094167L565.95486,265.497042ZM538.96699,35.822447L538.96699,35.822447L538.96699,35.822447ZM555.03355,258.959889L555.03355,258.959889L555.03355,258.959889ZM536.367764,34.905294L536.367764,34.905294L536.367764,34.905294ZM548.520285,257.78125L548.520285,257.78125L548.520285,257.78125ZM548.368284,258.503264L548.368284,258.503264L548.368284,258.503264ZM547.281473,252.629582L547.281473,252.629582L547.281473,252.629582ZM547.137071,253.222805L547.137071,253.222805L547.137071,253.222805ZM546.437864,252.852041L546.437864,252.852041L546.437864,252.852041ZM531.123711,32.813405L531.123711,32.813405L531.123711,32.813405ZM530.850109,32.606558L530.850109,32.606558L530.850109,32.606558ZM544.477045,251.454846L544.477045,251.454846L544.477045,251.454846ZM544.066641,251.626568L544.066641,251.626568L544.066641,251.626568ZM544.446644,258.007611L547.448674,257.988097L546.567066,258.932569ZM544.226242,256.48943L544.226242,256.48943L544.226242,256.48943ZM544.112241,257.488541L544.112241,257.488541L544.112241,257.488541ZM540.654207,256.668958L541.117811,255.423972L546.589866,253.226708L546.323863,254.292166L542.067821,256.852389ZM535.858559,247.68086L535.858559,247.68086L535.858559,247.68086ZM536.268963,258.815486L537.484975,256.407472L540.502205,256.579194L540.433804,257.984194L543.101431,257.269986L543.694237,258.795972L540.791008,259.588236L537.834578,262.105528L536.740167,261.172764ZM535.607756,247.341318L535.607756,247.341318L535.607756,247.341318ZM534.771748,247.712082L534.771748,247.712082L534.771748,247.712082ZM534.703347,247.017387L534.703347,247.017387L534.703347,247.017387ZM534.786948,248.797054L534.786948,248.797054L534.786948,248.797054ZM534.444944,248.168707L534.444944,248.168707L534.444944,248.168707ZM532.696927,245.046484L532.696927,245.046484L532.696927,245.046484ZM532.712127,245.370415L532.712127,245.370415L532.712127,245.370415ZM530.690507,246.826151L530.690507,246.826151L530.690507,246.826151ZM520.392404,31.802585L520.392404,31.802585L520.392404,31.802585ZM529.611296,245.639707L529.611296,245.639707L529.611296,245.639707ZM529.01089,247.712082L531.769718,247.056415L531.169312,248.153096ZM528.456085,255.985972L528.456085,255.985972L528.456085,255.985972ZM528.04568,247.47011L528.04568,247.47011L528.04568,247.47011ZM528.934889,270.99996L528.934889,270.99996L528.934889,270.99996ZM527.97728,247.446693L527.97728,247.446693L527.97728,247.446693ZM528.144481,251.802193L528.144481,251.802193L528.144481,251.802193ZM528.152082,255.958652L528.152082,255.958652L528.152082,255.958652ZM527.490875,247.704276L527.490875,247.704276L527.490875,247.704276ZM527.437674,246.517832L527.437674,246.517832L527.437674,246.517832ZM528.448484,271.577571L528.448484,271.577571L528.448484,271.577571ZM527.369274,246.720776L527.369274,246.720776L527.369274,246.720776ZM527.407274,248.160901L527.407274,248.160901L527.407274,248.160901ZM527.392074,251.177749L527.392074,251.177749L527.392074,251.177749ZM527.240072,252.910583L527.870879,251.876346L529.04129,253.449166ZM527.597276,262.074306L527.597276,262.074306L527.597276,262.074306ZM526.206462,248.008693L526.206462,248.008693L526.206462,248.008693ZM526.160862,248.176513L526.160862,248.176513L526.160862,248.176513ZM525.522455,248.703388L525.522455,248.703388L525.522455,248.703388ZM525.150052,249.448818L525.150052,249.448818L525.150052,249.448818ZM524.534445,240.285095L524.534445,240.285095L524.534445,240.285095ZM524.853649,249.538582L524.853649,249.538582L524.853649,249.538582ZM524.618046,249.230263L524.618046,249.230263L524.618046,249.230263ZM524.450845,249.870318L524.450845,249.870318L524.450845,249.870318ZM524.162042,252.824721L524.162042,252.824721L524.162042,252.824721ZM523.630036,250.650874L523.630036,250.650874L523.630036,250.650874ZM515.99196,31.361571L515.99196,31.361571L515.99196,31.361571ZM523.310833,249.280999L523.310833,249.280999L523.310833,249.280999ZM523.174032,249.893735L523.174032,249.893735L523.174032,249.893735ZM522.885229,249.230263L522.885229,249.230263L522.885229,249.230263ZM523.075231,273.123071L525.492055,268.498279L528.524485,265.801459L531.169312,261.613778L530.850109,259.849722L533.228932,259.826306L532.03572,261.758181L533.836938,260.59125L533.753338,262.015764L531.176912,264.380848L529.466895,266.913751L529.383294,269.040765L527.96208,269.423237L528.737287,270.953126L526.654867,271.511223L525.864459,272.713279ZM522.292423,256.813361L522.292423,256.813361L522.292423,256.813361ZM522.269623,262.429459L523.728837,258.015416L524.830848,257.863208L526.578866,254.63561L526.191262,259.619458L524.739647,264.540862ZM514.540345,29.624835L514.540345,29.624835L514.540345,29.624835ZM521.327213,251.513388L523.341233,252.192471L522.353224,253.066694ZM521.456415,264.517445L521.456415,264.517445L521.456415,264.517445ZM521.471615,269.403723L523.751638,266.340042L523.272833,268.748057ZM521.129611,269.946209L521.129611,269.946209L521.129611,269.946209ZM520.096001,261.055681L521.97322,259.658486L521.600816,261.851847ZM520.331603,268.322654L522.307623,264.540862L523.288033,265.789751ZM519.677997,262.074306L519.677997,262.074306L519.677997,262.074306ZM519.252393,269.723751L519.252393,269.723751L519.252393,269.723751ZM509.106291,27.099738L509.106291,27.099738L509.106291,27.099738ZM508.536285,26.853863L508.536285,26.853863L508.536285,26.853863ZM508.179082,26.26064L508.179082,26.26064L508.179082,26.26064ZM507.852279,26.073307L507.852279,26.073307L507.852279,26.073307ZM504.637446,24.863446L504.637446,24.863446L504.637446,24.863446ZM507.320273,271.737585L507.320273,271.737585L507.320273,271.737585ZM504.310643,24.758071L504.310643,24.758071L504.310643,24.758071ZM506.947869,269.536418L506.947869,269.536418L506.947869,269.536418ZM506.377864,270.757987L506.377864,270.757987L506.377864,270.757987ZM506.172662,271.222418L506.172662,271.222418L506.172662,271.222418ZM505.845858,271.987362L505.845858,271.987362L505.845858,271.987362ZM504.546245,273.552376L504.546245,273.552376L504.546245,273.552376ZM504.01424,277.782988L504.01424,277.782988L504.01424,277.782988ZM503.99144,275.433516L503.99144,275.433516L503.99144,275.433516ZM503.793838,277.837627L503.793838,277.837627L503.793838,277.837627ZM502.137021,24.145335L502.137021,24.145335L502.137021,24.145335ZM503.117431,277.46296L503.117431,277.46296L503.117431,277.46296ZM502.897029,276.272613L502.897029,276.272613L502.897029,276.272613ZM75.225552,348.454496L77.96158,348.848677L78.827988,350.636149L77.672777,351.650871L75.749957,351.572816L74.822748,350.448816ZM60.565006,349.566788L63.901439,351.931871L65.96866,358.203636L68.590686,360.533595L65.786258,359.538386L64.213042,356.209316L63.734237,353.719344L61.910219,351.974802ZM61.97862,341.523162L63.437834,343.162329L61.826618,343.474551ZM57.676977,343.060857L57.676977,343.060857L57.676977,343.060857ZM58.110181,337.987245L58.110181,337.987245L58.110181,337.987245ZM55.457755,340.524051L55.457755,340.524051L55.457755,340.524051ZM49.833698,331.016883L49.833698,331.016883L49.833698,331.016883ZM45.357254,334.416203L50.145301,334.591828L52.402524,332.507744L53.489335,333.89323L50.494905,335.169439L50.084501,336.566634L48.336483,335.208467L46.421264,336.3793ZM34.268743,315.47602L34.268743,315.47602L34.268743,315.47602ZM16.735367,294.951309L16.735367,294.951309L16.735367,294.951309ZM15.564956,293.760962L15.564956,293.760962L15.564956,293.760962ZM14.820148,292.644768L14.820148,292.644768L14.820148,292.644768ZM4.149641,295.76699L8.610886,295.911393L10.419704,296.933921L8.671687,297.601296L7.98008,299.572199L6.878069,297.66374ZM0.114001,278.860155L3.01723,278.766488L8.519685,282.638044L9.910499,285.354378L10.389304,287.879475L8.246082,286.189572L6.748867,286.868656L3.222432,285.459753L2.348423,283.184433L2.188822,280.292474ZM746.692267,337.772592L746.692267,337.772592L746.692267,337.772592ZM746.365464,339.489814L746.365464,339.489814L746.365464,339.489814ZM747.467475,343.997523L747.467475,343.997523L747.467475,343.997523ZM747.171072,349.508246L747.171072,349.508246L747.171072,349.508246ZM745.324253,345.17226L745.324253,345.17226L745.324253,345.17226ZM743.097431,338.998064L743.097431,338.998064L743.097431,338.998064ZM745.187452,346.694343L745.187452,346.694343L745.187452,346.694343ZM744.95945,347.002663L744.95945,347.002663L744.95945,347.002663ZM743.416634,343.033537L743.416634,343.033537L743.416634,343.033537ZM742.352624,341.854898L742.352624,341.854898L742.352624,341.854898ZM741.334213,341.800259L741.334213,341.800259L741.334213,341.800259ZM743.01383,349.215538L745.810658,346.729468L747.072271,348.466204L745.514255,350.347343ZM740.665407,342.022718L740.665407,342.022718L740.665407,342.022718ZM742.04102,347.888593L742.04102,347.888593L742.04102,347.888593ZM741.395014,349.379454L741.395014,349.379454L741.395014,349.379454ZM740.361404,347.338301L741.129011,344.657093L739.593796,342.974995L739.760998,341.792454L743.652237,343.400398L744.131041,346.343093L741.220212,348.337413ZM738.354984,341.11337L738.354984,341.11337L738.354984,341.11337ZM739.076991,346.019162L739.076991,346.019162L739.076991,346.019162ZM734.205342,329.795313L734.813348,328.277133L735.831758,329.412841ZM736.052161,336.605661L736.052161,336.605661L736.052161,336.605661ZM738.658987,345.948912L738.658987,345.948912L738.658987,345.948912ZM738.712187,346.261135L738.712187,346.261135L738.712187,346.261135ZM735.512555,338.315078L735.512555,338.315078L735.512555,338.315078ZM732.677727,330.353411L732.677727,330.353411L732.677727,330.353411ZM734.676547,337.581356L734.676547,337.581356L734.676547,337.581356ZM735.512555,346.401635L735.512555,346.401635L735.512555,346.401635ZM735.740557,348.462302L735.740557,348.462302L735.740557,348.462302ZM735.520155,348.298385L735.520155,348.298385L735.520155,348.298385ZM735.330153,348.903316L735.330153,348.903316L735.330153,348.903316ZM728.657287,327.129716L728.657287,327.129716L728.657287,327.129716ZM728.079681,325.666174L728.079681,325.666174L728.079681,325.666174ZM733.202132,343.52919L733.202132,343.52919L733.202132,343.52919ZM734.729747,348.836968L734.729747,348.836968L734.729747,348.836968ZM729.272893,330.322188L729.272893,330.322188L729.272893,330.322188ZM728.01888,326.337452L728.01888,326.337452L728.01888,326.337452ZM728.072081,327.379494L728.072081,327.379494L728.072081,327.379494ZM733.148931,345.156648L733.148931,345.156648L733.148931,345.156648ZM728.573686,329.635299L728.573686,329.635299L728.573686,329.635299ZM726.95487,324.889521L726.95487,324.889521L726.95487,324.889521ZM731.431314,340.434287L731.431314,340.434287L731.431314,340.434287ZM727.486875,326.809688L727.486875,326.809688L727.486875,326.809688ZM730.868909,341.597315L730.868909,341.597315L730.868909,341.597315ZM728.094881,340.008884L728.094881,340.008884L728.094881,340.008884ZM727.98088,339.727884L727.98088,339.727884L727.98088,339.727884ZM727.920079,339.969856L727.920079,339.969856L727.920079,339.969856ZM725.070051,330.950536L725.070051,330.950536L725.070051,330.950536ZM720.532805,317.930868L720.532805,317.930868L720.532805,317.930868ZM720.152802,316.834187L720.152802,316.834187L720.152802,316.834187ZM720.494805,318.387493L720.494805,318.387493L720.494805,318.387493ZM723.124431,328.27323L723.124431,328.27323L723.124431,328.27323ZM720.282003,321.01016L720.707607,319.835423L722.296023,320.705743ZM719.369994,318.00502L719.369994,318.00502L719.369994,318.00502ZM718.906389,318.711423L718.906389,318.711423L718.906389,318.711423ZM717.340773,314.695464L717.340773,314.695464L717.340773,314.695464ZM718.602386,319.390507L718.602386,319.390507L718.602386,319.390507ZM726.628066,350.199038L726.628066,350.199038L726.628066,350.199038ZM720.304803,328.148341L720.304803,328.148341L720.304803,328.148341ZM720.0236,327.648785L720.0236,327.648785L720.0236,327.648785ZM726.749667,352.767066L726.749667,352.767066L726.749667,352.767066ZM726.787668,353.53201L726.787668,353.53201L726.787668,353.53201ZM717.051971,319.503687L717.051971,319.503687L717.051971,319.503687ZM726.240462,355.296066L726.240462,355.296066L726.240462,355.296066ZM725.98966,354.453066L727.122071,353.676413L728.908089,354.636497L728.231682,355.52633L729.554096,357.536261ZM717.561176,327.00873L717.561176,327.00873L717.561176,327.00873ZM724.887649,353.485177L724.887649,353.485177L724.887649,353.485177ZM712.849128,311.237603L712.849128,311.237603L712.849128,311.237603ZM717.01397,326.70041L717.01397,326.70041L717.01397,326.70041ZM723.694437,351.576719L723.694437,351.576719L723.694437,351.576719ZM717.203972,328.163952L717.203972,328.163952L717.203972,328.163952ZM712.476725,311.194672L712.476725,311.194672L712.476725,311.194672ZM716.95317,327.703424L716.95317,327.703424L716.95317,327.703424ZM717.00637,327.906369L717.00637,327.906369L717.00637,327.906369ZM716.459165,327.285827L716.459165,327.285827L716.459165,327.285827ZM715.99556,326.860424L715.99556,326.860424L715.99556,326.860424ZM715.615556,325.537382L715.615556,325.537382L715.615556,325.537382ZM715.782758,326.282813L715.782758,326.282813L715.782758,326.282813ZM715.851159,326.676994L715.851159,326.676994L715.851159,326.676994ZM715.95756,327.14923L715.95756,327.14923L715.95756,327.14923ZM722.136421,349.777538L722.136421,349.777538L722.136421,349.777538ZM715.478755,326.122799L715.478755,326.122799L715.478755,326.122799ZM715.326753,326.474049L715.326753,326.474049L715.326753,326.474049ZM715.091151,326.228174L715.091151,326.228174L715.091151,326.228174ZM714.217142,323.605507L714.878349,321.19359L717.97918,320.151548L719.293993,320.70184L719.818398,323.898215L717.424374,325.654466ZM715.881559,330.275355L715.881559,330.275355L715.881559,330.275355ZM715.645956,329.451869L715.645956,329.451869L715.645956,329.451869ZM712.871929,321.427757L712.871929,321.427757L712.871929,321.427757ZM717.880379,343.59944L717.880379,343.59944L717.880379,343.59944ZM718.815188,350.366857L718.815188,350.366857L718.815188,350.366857ZM705.796258,303.166658L705.796258,303.166658L705.796258,303.166658ZM710.599506,322.102938L710.599506,322.102938L710.599506,322.102938ZM716.641566,345.207385L716.641566,345.207385L716.641566,345.207385ZM716.132361,346.854357L716.132361,346.854357L716.132361,346.854357ZM714.293143,343.029634L715.136751,341.901731L716.573166,342.690093L715.99556,344.65319ZM711.95232,335.173342L711.95232,335.173342L711.95232,335.173342ZM701.175412,294.877157L701.175412,294.877157L701.175412,294.877157ZM711.534315,334.8338L711.534315,334.8338L711.534315,334.8338ZM711.351914,335.49337L711.351914,335.49337L711.351914,335.49337Z";

  var species = {
    B: "Halibut",
    C: "Sablefish",
    D: "Dungeness crab",
    E: "Hair Crab",
    F: "Freshwater fish",
    G: "Herring roe",
    H: "Herring (food/bait)",
    I: "Ling cod",
    J: "Geoduck clams",
    K: "King crab",
    L: "Herring spawn on kelp",
    M: "Misc. saltwater finfish",
    N: "Snails",
    O: "Octopus/squid",
    P: "Shrimp",
    Q: "Sea cucumber",
    R: "Clams",
    S: "Salmon",
    T: "Tanner crab",
    TB: "Tanner Bairdi crab",
    U: "Sea urchin",
    W: "Scallops",
    Y: "Rockfish"
  };

  var scaleFactor = 100 / 760;

  var gear = { "1": "PURSE SEINE", "2": "Beach seine", "3": "Drift gillnet", "4": "SET GILLNET", "5": "HAND TROLL", "6": "LONGLINE VESSEL UNDER 60'", "7": "OTTER TRAWL", "8": "FISH WHEEL", "9": "POT GEAR VESSEL UNDER 60'", "10": "RING NET", "11": "DIVING GEAR", "12": "DIVE/HAND PICK", "17": "BEAM TRAWL", "18": "SHOVEL", "21": "POUND", "23": "MECHANICAL DIGGER", "25": "DINGLEBAR TROLL", "26": "MECHANICAL JIG", "34": "GILLNET", "37": "PAIR TRAWL", "19": "Pot gear", "29": "Pot gear", "39": "Pot gear", "49": "Pot gear", "59": "Pot gear", "69": "Pot gear", "61": "LONGLINE VESSEL 60' OR OVER", "77": "GILLNET", "91": "POT GEAR VESSEL 60' OR OVER" };

  var regions = { "A": "SOUTHEAST", "B": "STATEWIDE", "C": "Southern southeast", "D": "YAKUTAT", "E": "PRINCE WILLIAM SOUND", "J": "WESTWARD", "L": "CHIGNIK", "M": "ALASKA PENINSULA", "P": "Upper Yukon", "Q": "BERING SEA", "T": "BRISTOL BAY", "U": "Nunivak Island", "W": "Goodnews Bay", "X": "KOTZEBUE", "Y": "Cape Romanzof", "H": "COOK INLET", "S": "SECURITY COVE", "V": "CAPE AVINOF", "Z": "NORTON SOUND", "K": "KODIAK", "O": "DUTCH HARBOR", "OA": "ALEUTIAN CDQAPICDA", "OB": "ALEUTIAN CDQBBEDC", "OC": "ALEUTIAN CDQCBSFA", "OD": "ALEUTIAN CDQCVRF", "OE": "ALEUTIAN CDQNSEDC", "OF": "ALEUTIAN CDQYDFDA", "OG": "ALEUTIAN ISLANDS ACAACDC", "QA": "BERING SEA CDQAPICDA", "QB": "BERING SEA CDQBBEDC", "QC": "BERING SEA CDQCBSFA", "QD": "BERING SEA CDQCVRF", "QE": "BERING SEA CDQNSEDC", "QF": "BERING SEA CDQYDFDA", "TA": "BRISTOL BAY CDQAPICDA", "TB": "BRISTOL BAY CDQBBEDC", "TC": "BRISTOL BAY CDQCBSFA", "TD": "BRISTOL BAY CDQCVRF", "TE": "BRISTOL BAY CDQNSEDC", "TF": "BRISTOL BAY CDQYDFDA", "ZE": "NORTON SOUND CDQNSEDC", "ZF": "NORTON SOUND CDQYDFDA", "G": "GOA", "AB": "STATEWIDE", "AG": "GOA", "BB": "STATEWIDE", "BG": "GOA", "FB": "STATEWIDE", "FG": "GOA", "GB": "STATEWIDE", "GG": "GOA", "HB": "STATEWIDE", "HG": "GOA", "IB": "STATEWIDE", "IG": "GOA", "F": "ATKA/AMLIA ISLANDS", "R": "ADAK", "AFW": "FEDERAL WATERS", "ASW": "STATE WATERS", "BFW": "FEDERAL WATERS", "BSW": "STATE WATERS" };

  var fishNodes = null,
      fishLinks = null,
      margin = { // expressed as percentages
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  },

  //  width = 100 - margin.right - margin.left,
  //  height = 52 - margin.top - margin.bottom,
  threshold = 10;

  var colors = ['#30653a', '#7d4f00', '#4e597d', '#2a616e', '#a3301e', '#81447f', '#005fa9'];

  var rScale = d3.scaleSqrt().range([5, 10]); // percentages
  //var strengthScale = d3.scaleLinear().range([1,10]);
  var simulation = d3.forceSimulation().force("link", d3.forceLink().strength(0));
  /*.force("charge", d3.forceManyBody().strength(1.5))
  .force("center", d3.forceCenter(width / 2, height / 2))
  .force("collide", d3.forceCollide().radius(2).iterations(2));//.radius(function(d) { return rScale(d.count); }).iterations(2));*/

  window.simulation = simulation;

  d3.csv('adjacency-cx.csv', function (data) {
    console.log(data);
    fishLinks = data;
    goGate();
  });
  d3.csv('fisheries-nodes-with-coords-04-19.csv', function (data) {
    console.log(data);
    data.forEach(function (each) {
      for (var key in each) {
        if (each.hasOwnProperty(key)) {
          if (!isNaN(+each[key])) {
            each[key] = +each[key];
          }
        }
      }
    });
    fishNodes = data;
    goGate();
  });

  function goGate() {
    if (fishNodes !== null && fishLinks !== null) {
      go();
    } else {
      return;
    }
  }

  var newLinks = [],
      network = {};

  function go() {
    function isMatch(key) {
      return fishNodes.find(function (obj) {
        return obj.id === key;
      });
    }
    fishLinks.forEach(function (each, i) {
      for (var key in each) {
        if (each.hasOwnProperty(key)) {
          var match = isMatch(key);
          var index = fishNodes.indexOf(match);
          //if (index !== i && each[key] !== "0" ){ // if source and target are not the same and no
          newLinks.push({
            source: i,
            target: index,
            value: +each[key]
          });
          // }
        }
      }
    }); // end forEach
    network.nodes = fishNodes;
    network.links = newLinks;
    console.log(network);
    render(network); // TO DO : for the force directed graph, filter
  } // end go()

  function render(network) {
    /* if (true){
       return;
     }*/
    network.links.forEach(function (link) {
      if (link.target === link.source) {
        network.nodes[link.target].count = link.value;
      }
    });
    simulation.nodes(network.nodes).on("tick", ticked);

    var linkForce = simulation.force("link").links(network.links.filter(function (d) {
      return d.value !== 0;
    }));

    rScale.domain(d3.extent(network.nodes, function (d) {
      return d.count;
    }));
    //options 1–3
    //strengthScale.domain([0, d3.mean(network.links, d => d.value) + d3.deviation(network.links, d => d.value) ]);
    //option 4
    //strengthScale.domain([0,1]);


    /* function count(node){
       var i = 0;
       network.links.forEach(link => {
         if ( link.source === node || link.target === node ){
           i++;
         }
       });
       return i;
     }*/

    linkForce.strength(0); /*d => {
                           /* d3's default link strength is:
                           function strength(link) {
                           return 1 / Math.min(count(link.source), count(link.target));
                           }
                           "This default was chosen because it automatically reduces the
                           strength of links connected to heavily-connected nodes, improving stability."
                           https://github.com/d3/d3-force
                           The return values below reproduce that default but with a factor based on the value (d.value)
                           of the link, here representing the number of permits shared between fisheries.
                           For options 1–3: the domain of the scale function is between 0 and 1 stdev above the mean value, with
                           the range being 1–10.
                           For option 4 the domain in 0 to 1 and the range is 0 to 10.
                           Option 1: Based on absolute value of shared permits; treats all nodes the same, whether they belong to
                           the same cluster or not.
                           Option 2: same as option one but applies the value only to nodes of the same cluster. Nodes of different
                           clusters get the default strength, uninformed by d.value.
                           Option 3: same as option two but weakens the force between nodes of different cluster by a factor of 1/10th.
                           That separates out the clusters more.
                           Option 4: Scales by the relative value, number of shared permits divided by the number of permits in the smaller
                           of the two nodes. Still divided by count of links. Treats nodes the same regardless of cluster.
                           */
    // 1
    //return strengthScale(d.value) / Math.min(count(d.source), count(d.target)); 
    // 2
    //return d.target.cluster === d.source.cluster ?  strengthScale(d.value) / Math.min(count(d.source), count(d.target)) : ( 1 / Math.min(count(d.source), count(d.target)) ); 
    // 3
    // return d.target.cluster === d.source.cluster ?  strengthScale(d.value) / Math.min(count(d.source), count(d.target)) : ( 1 / Math.min(count(d.source), count(d.target)) ) / 10; 
    //4
    /* return d.target.cluster === d.source.cluster ? strengthScale(d.value / Math.min(d.source.count, d.target.count)) / Math.min(count(d.source), count(d.target)) : ( strengthScale(d.value / Math.min(d.source.count, d.target.count)) / Math.min(count(d.source), count(d.target)) ) / 20; 
     
    });*/
    var svg = d3.select('body').append('svg').attr('width', '100%').attr('xmlns', 'http://www.w3.org/2000/svg').attr('version', '1.1').attr('viewBox', '0 0 100 53');

    svg.append('g').attr('transform', 'scale(' + scaleFactor + ')').append('path').attr('d', alaskaPath).attr('class', 'alaska');
    svg.append('g').attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');

    var link = svg.append("g").attr("class", "links").selectAll("line").data(network.links.filter(function (d) {

      return d.value !== 0 && d.source.area !== 'B' && d.target.area !== 'B';
    })).enter().append("line").attr('stroke', function (d) {

      return d.source.cluster === d.target.cluster ? colors[d.target.cluster - 1] : '#5a5a5a';
    }).attr("stroke-width", function (d) {
      return rScale(d.value) * scaleFactor / 2;
    }).attr("class", function (d) {
      return d.source.id + ' ' + d.target.id;
    }).classed('below-threshold', function (d) {
      return d.value < threshold && d.source.cluster !== d.target.cluster;
    }).style("display", function (d) {
      if (d.value < threshold && d.source.cluster !== d.target.cluster) {
        return 'none';
      } else {
        return null;
      }
    });

    var nodeTooltip = d3.tip().attr("class", "d3-tip label-tip").direction('n').offset([4, 0]).html(function (d) {
      return '\n          ' + d.id + '<br />\n          <br />\n          Species: ' + species[d.species] + '<br />\n          Gear: ' + gear[d.gear.toString()] + '<br />\n          Area: ' + regions[d.area] + '<br />\n          <br />\n          Cluster: ' + d.cluster + '\n\n          ';
    });

    var nodeGroup = svg.append("g").attr("class", "nodes").call(nodeTooltip);

    var node = nodeGroup.selectAll("circle").data(network.nodes.filter(function (d) {
      return d.area !== 'B' && d.cluster !== 6 && d.cluster !== 7;
    })).enter().append("circle").attr("cx", function (d) {
      return d.x;
    }).attr("cy", function (d) {
      return d.y;
    }).attr("r", function (d) {
      return scaleFactor * rScale(d.count);
    }).attr("data-area", function (d) {
      return regions[d.area];
    }).attr("data-cluster", function (d) {
      return d.cluster;
    }).attr("data-species", function (d) {
      return species[d.species];
    }).attr("data-gear", function (d) {
      return gear[d.gear];
    }).attr("data-name", function (d) {
      return d.id;
    }).attr("fill", function (d) {
      return colors[d.cluster - 1];
    });

    node.append('text').text(function (d) {
      return d.id;
    }).attr('transform', function (d) {
      return 'translate(0,' + (-0.1 - rScale(d.count) * scaleFactor) + ')';
    });

    node.on('mouseenter', nodeTooltip.show).on('mouseleave', nodeTooltip.hide).call(d3.drag().on("start", dragstarted).on("drag", dragged).on("end", dragended));

    node.append("title").text(function (d) {
      return d.id;
    });

    function ticked() {
      link.attr("x1", function (d) {
        return d.source.x;
      }).attr("y1", function (d) {
        return d.source.y;
      }).attr("x2", function (d) {
        return d.target.x;
      }).attr("y2", function (d) {
        return d.target.y;
      });

      /* node
           .attr("transform", function(d) {
             //d.x = Math.max(rScale(d.count), Math.min(width - rScale(d.count), d.x));
            // return 'translate(' + d.x + ',' + d.y + ')';
           });*/
    }
  } // end render()
  function dragstarted(d) {
    if (!d3.event.active) {
      simulation.alphaTarget(0.3).restart();
    }
    d.fx = d.x;
    d.fy = d.y;
  }

  function dragged(d) {
    d.fx = d3.event.x;
    d.fy = d3.event.y;
  }

  function dragended(d) {
    if (!d3.event.active) {
      simulation.alphaTarget(0);
    }
    d.fx = null;
    d.fy = null;
  }
})();

},{"../js-exports/polyfills":2,"../js-vendor/d3-tip":3}],2:[function(require,module,exports){
(function (global){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/**
 * SVG focus 
 * Copyright(c) 2017, John Osterman
 *
 * MIT License
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and 
 * associated documentation files (the "Software"), to deal in the Software without restriction, including 
 * without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell 
 * copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the 
 * following conditions:

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT 
 * LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO 
 * EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER 
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE 
 * USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

// IE/Edge (perhaps others) does not allow programmatic focusing of SVG Elements (via `focus()`). Same for `blur()`.

var SVGFocus = exports.SVGFocus = function () {
  if ('focus' in SVGElement.prototype === false) {
    SVGElement.prototype.focus = HTMLElement.prototype.focus;
  }
  if ('blur' in SVGElement.prototype === false) {
    SVGElement.prototype.blur = HTMLElement.prototype.blur;
  }
}();

/**
 * innerHTML property for SVGElement
 * Copyright(c) 2010, Jeff Schiller
 *
 * Licensed under the Apache License, Version 2
 *
 * Works in a SVG document in Chrome 6+, Safari 5+, Firefox 4+ and IE9+.
 * Works in a HTML5 document in Chrome 7+, Firefox 4+ and IE9+.
 * Does not work in Opera since it doesn't support the SVGElement interface yet.
 *
 * I haven't decided on the best name for this property - thus the duplication.
 */
// edited by John Osterman to declare the variable `sXML`, which was referenced without being declared
// which failed silently in implicit strict mode of an export

// most browsers allow setting innerHTML of svg elements but IE does not (not an HTML element)
// this polyfill provides that. necessary for d3 method `.html()` on svg elements

var SVGInnerHTML = exports.SVGInnerHTML = function () {
  var serializeXML = function serializeXML(node, output) {
    var nodeType = node.nodeType;
    if (nodeType == 3) {
      // TEXT nodes.
      // Replace special XML characters with their entities.
      output.push(node.textContent.replace(/&/, '&amp;').replace(/</, '&lt;').replace('>', '&gt;'));
    } else if (nodeType == 1) {
      // ELEMENT nodes.
      // Serialize Element nodes.
      output.push('<', node.tagName);
      if (node.hasAttributes()) {
        var attrMap = node.attributes;
        for (var i = 0, len = attrMap.length; i < len; ++i) {
          var attrNode = attrMap.item(i);
          output.push(' ', attrNode.name, '=\'', attrNode.value, '\'');
        }
      }
      if (node.hasChildNodes()) {
        output.push('>');
        var childNodes = node.childNodes;
        for (var i = 0, len = childNodes.length; i < len; ++i) {
          serializeXML(childNodes.item(i), output);
        }
        output.push('</', node.tagName, '>');
      } else {
        output.push('/>');
      }
    } else if (nodeType == 8) {
      // TODO(codedread): Replace special characters with XML entities?
      output.push('<!--', node.nodeValue, '-->');
    } else {
      // TODO: Handle CDATA nodes.
      // TODO: Handle ENTITY nodes.
      // TODO: Handle DOCUMENT nodes.
      throw 'Error serializing XML. Unhandled node of type: ' + nodeType;
    }
  };
  // The innerHTML DOM property for SVGElement.
  if ('innerHTML' in SVGElement.prototype === false) {
    Object.defineProperty(SVGElement.prototype, 'innerHTML', {
      get: function get() {
        var output = [];
        var childNode = this.firstChild;
        while (childNode) {
          serializeXML(childNode, output);
          childNode = childNode.nextSibling;
        }
        return output.join('');
      },
      set: function set(markupText) {
        console.log(this);
        // Wipe out the current contents of the element.
        while (this.firstChild) {
          this.removeChild(this.firstChild);
        }

        try {
          // Parse the markup into valid nodes.
          var dXML = new DOMParser();
          dXML.async = false;
          // Wrap the markup into a SVG node to ensure parsing works.
          console.log(markupText);
          var sXML = '<svg xmlns="http://www.w3.org/2000/svg">' + markupText + '</svg>';
          console.log(sXML);
          var svgDocElement = dXML.parseFromString(sXML, 'text/xml').documentElement;

          // Now take each node, import it and append to this element.
          var childNode = svgDocElement.firstChild;
          while (childNode) {
            this.appendChild(this.ownerDocument.importNode(childNode, true));
            childNode = childNode.nextSibling;
          }
        } catch (e) {
          throw new Error('Error parsing XML string');
        };
      }
    });

    // The innerSVG DOM property for SVGElement.
    Object.defineProperty(SVGElement.prototype, 'innerSVG', {
      get: function get() {
        return this.innerHTML;
      },
      set: function set(markupText) {
        this.innerHTML = markupText;
      }
    });
  }
}();

// https://tc39.github.io/ecma262/#sec-array.prototype.find
var arrayFind = exports.arrayFind = function () {
  if (!Array.prototype.find) {
    Object.defineProperty(Array.prototype, 'find', {
      value: function value(predicate) {
        // 1. Let O be ? ToObject(this value).
        if (this == null) {
          throw new TypeError('"this" is null or not defined');
        }

        var o = Object(this);

        // 2. Let len be ? ToLength(? Get(O, "length")).
        var len = o.length >>> 0;

        // 3. If IsCallable(predicate) is false, throw a TypeError exception.
        if (typeof predicate !== 'function') {
          throw new TypeError('predicate must be a function');
        }

        // 4. If thisArg was supplied, let T be thisArg; else let T be undefined.
        var thisArg = arguments[1];

        // 5. Let k be 0.
        var k = 0;

        // 6. Repeat, while k < len
        while (k < len) {
          // a. Let Pk be ! ToString(k).
          // b. Let kValue be ? Get(O, Pk).
          // c. Let testResult be ToBoolean(? Call(predicate, T, « kValue, k, O »)).
          // d. If testResult is true, return kValue.
          var kValue = o[k];
          if (predicate.call(thisArg, kValue, k, o)) {
            return kValue;
          }
          // e. Increase k by 1.
          k++;
        }

        // 7. Return undefined.
        return undefined;
      }
    });
  }
}();

// Copyright (C) 2011-2012 Software Languages Lab, Vrije Universiteit Brussel
// This code is dual-licensed under both the Apache License and the MPL

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/* Version: MPL 1.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is a shim for the ES-Harmony reflection module
 *
 * The Initial Developer of the Original Code is
 * Tom Van Cutsem, Vrije Universiteit Brussel.
 * Portions created by the Initial Developer are Copyright (C) 2011-2012
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 */

// ----------------------------------------------------------------------------

// This file is a polyfill for the upcoming ECMAScript Reflect API,
// including support for Proxies. See the draft specification at:
// http://wiki.ecmascript.org/doku.php?id=harmony:reflect_api
// http://wiki.ecmascript.org/doku.php?id=harmony:direct_proxies

// For an implementation of the Handler API, see handlers.js, which implements:
// http://wiki.ecmascript.org/doku.php?id=harmony:virtual_object_api

// This implementation supersedes the earlier polyfill at:
// code.google.com/p/es-lab/source/browse/trunk/src/proxies/DirectProxies.js

// This code was tested on tracemonkey / Firefox 12
//  (and should run fine on older Firefox versions starting with FF4)
// The code also works correctly on
//   v8 --harmony_proxies --harmony_weakmaps (v3.6.5.1)

// Language Dependencies:
//  - ECMAScript 5/strict
//  - "old" (i.e. non-direct) Harmony Proxies
//  - Harmony WeakMaps
// Patches:
//  - Object.{freeze,seal,preventExtensions}
//  - Object.{isFrozen,isSealed,isExtensible}
//  - Object.getPrototypeOf
//  - Object.keys
//  - Object.prototype.valueOf
//  - Object.prototype.isPrototypeOf
//  - Object.prototype.toString
//  - Object.prototype.hasOwnProperty
//  - Object.getOwnPropertyDescriptor
//  - Object.defineProperty
//  - Object.defineProperties
//  - Object.getOwnPropertyNames
//  - Object.getOwnPropertySymbols
//  - Object.getPrototypeOf
//  - Object.setPrototypeOf
//  - Object.assign
//  - Function.prototype.toString
//  - Date.prototype.toString
//  - Array.isArray
//  - Array.prototype.concat
//  - Proxy
// Adds new globals:
//  - Reflect

// Direct proxies can be created via Proxy(target, handler)

// ----------------------------------------------------------------------------

var reflect = exports.reflect = function (global) {
  // function-as-module pattern
  "use strict";

  // === Direct Proxies: Invariant Enforcement ===

  // Direct proxies build on non-direct proxies by automatically wrapping
  // all user-defined proxy handlers in a Validator handler that checks and
  // enforces ES5 invariants.

  // A direct proxy is a proxy for an existing object called the target object.

  // A Validator handler is a wrapper for a target proxy handler H.
  // The Validator forwards all operations to H, but additionally
  // performs a number of integrity checks on the results of some traps,
  // to make sure H does not violate the ES5 invariants w.r.t. non-configurable
  // properties and non-extensible, sealed or frozen objects.

  // For each property that H exposes as own, non-configurable
  // (e.g. by returning a descriptor from a call to getOwnPropertyDescriptor)
  // the Validator handler defines those properties on the target object.
  // When the proxy becomes non-extensible, also configurable own properties
  // are checked against the target.
  // We will call properties that are defined on the target object
  // "fixed properties".

  // We will name fixed non-configurable properties "sealed properties".
  // We will name fixed non-configurable non-writable properties "frozen
  // properties".

  // The Validator handler upholds the following invariants w.r.t. non-configurability:
  // - getOwnPropertyDescriptor cannot report sealed properties as non-existent
  // - getOwnPropertyDescriptor cannot report incompatible changes to the
  //   attributes of a sealed property (e.g. reporting a non-configurable
  //   property as configurable, or reporting a non-configurable, non-writable
  //   property as writable)
  // - getPropertyDescriptor cannot report sealed properties as non-existent
  // - getPropertyDescriptor cannot report incompatible changes to the
  //   attributes of a sealed property. It _can_ report incompatible changes
  //   to the attributes of non-own, inherited properties.
  // - defineProperty cannot make incompatible changes to the attributes of
  //   sealed properties
  // - deleteProperty cannot report a successful deletion of a sealed property
  // - hasOwn cannot report a sealed property as non-existent
  // - has cannot report a sealed property as non-existent
  // - get cannot report inconsistent values for frozen data
  //   properties, and must report undefined for sealed accessors with an
  //   undefined getter
  // - set cannot report a successful assignment for frozen data
  //   properties or sealed accessors with an undefined setter.
  // - get{Own}PropertyNames lists all sealed properties of the target.
  // - keys lists all enumerable sealed properties of the target.
  // - enumerate lists all enumerable sealed properties of the target.
  // - if a property of a non-extensible proxy is reported as non-existent,
  //   then it must forever be reported as non-existent. This applies to
  //   own and inherited properties and is enforced in the
  //   deleteProperty, get{Own}PropertyDescriptor, has{Own},
  //   get{Own}PropertyNames, keys and enumerate traps

  // Violation of any of these invariants by H will result in TypeError being
  // thrown.

  // Additionally, once Object.preventExtensions, Object.seal or Object.freeze
  // is invoked on the proxy, the set of own property names for the proxy is
  // fixed. Any property name that is not fixed is called a 'new' property.

  // The Validator upholds the following invariants regarding extensibility:
  // - getOwnPropertyDescriptor cannot report new properties as existent
  //   (it must report them as non-existent by returning undefined)
  // - defineProperty cannot successfully add a new property (it must reject)
  // - getOwnPropertyNames cannot list new properties
  // - hasOwn cannot report true for new properties (it must report false)
  // - keys cannot list new properties

  // Invariants currently not enforced:
  // - getOwnPropertyNames lists only own property names
  // - keys lists only enumerable own property names
  // Both traps may list more property names than are actually defined on the
  // target.

  // Invariants with regard to inheritance are currently not enforced.
  // - a non-configurable potentially inherited property on a proxy with
  //   non-mutable ancestry cannot be reported as non-existent
  // (An object with non-mutable ancestry is a non-extensible object whose
  // [[Prototype]] is either null or an object with non-mutable ancestry.)

  // Changes in Handler API compared to previous harmony:proxies, see:
  // http://wiki.ecmascript.org/doku.php?id=strawman:direct_proxies
  // http://wiki.ecmascript.org/doku.php?id=harmony:direct_proxies

  // ----------------------------------------------------------------------------

  // ---- WeakMap polyfill ----

  // TODO: find a proper WeakMap polyfill

  // define an empty WeakMap so that at least the Reflect module code
  // will work in the absence of WeakMaps. Proxy emulation depends on
  // actual WeakMaps, so will not work with this little shim.

  if (typeof WeakMap === "undefined") {
    global.WeakMap = function () {};
    global.WeakMap.prototype = {
      get: function get(k) {
        return undefined;
      },
      set: function set(k, v) {
        throw new Error("WeakMap not supported");
      }
    };
  }

  // ---- Normalization functions for property descriptors ----

  function isStandardAttribute(name) {
    return (/^(get|set|value|writable|enumerable|configurable)$/.test(name)
    );
  }

  // Adapted from ES5 section 8.10.5
  function toPropertyDescriptor(obj) {
    if (Object(obj) !== obj) {
      throw new TypeError("property descriptor should be an Object, given: " + obj);
    }
    var desc = {};
    if ('enumerable' in obj) {
      desc.enumerable = !!obj.enumerable;
    }
    if ('configurable' in obj) {
      desc.configurable = !!obj.configurable;
    }
    if ('value' in obj) {
      desc.value = obj.value;
    }
    if ('writable' in obj) {
      desc.writable = !!obj.writable;
    }
    if ('get' in obj) {
      var getter = obj.get;
      if (getter !== undefined && typeof getter !== "function") {
        throw new TypeError("property descriptor 'get' attribute must be " + "callable or undefined, given: " + getter);
      }
      desc.get = getter;
    }
    if ('set' in obj) {
      var setter = obj.set;
      if (setter !== undefined && typeof setter !== "function") {
        throw new TypeError("property descriptor 'set' attribute must be " + "callable or undefined, given: " + setter);
      }
      desc.set = setter;
    }
    if ('get' in desc || 'set' in desc) {
      if ('value' in desc || 'writable' in desc) {
        throw new TypeError("property descriptor cannot be both a data and an " + "accessor descriptor: " + obj);
      }
    }
    return desc;
  }

  function isAccessorDescriptor(desc) {
    if (desc === undefined) return false;
    return 'get' in desc || 'set' in desc;
  }
  function isDataDescriptor(desc) {
    if (desc === undefined) return false;
    return 'value' in desc || 'writable' in desc;
  }
  function isGenericDescriptor(desc) {
    if (desc === undefined) return false;
    return !isAccessorDescriptor(desc) && !isDataDescriptor(desc);
  }

  function toCompletePropertyDescriptor(desc) {
    var internalDesc = toPropertyDescriptor(desc);
    if (isGenericDescriptor(internalDesc) || isDataDescriptor(internalDesc)) {
      if (!('value' in internalDesc)) {
        internalDesc.value = undefined;
      }
      if (!('writable' in internalDesc)) {
        internalDesc.writable = false;
      }
    } else {
      if (!('get' in internalDesc)) {
        internalDesc.get = undefined;
      }
      if (!('set' in internalDesc)) {
        internalDesc.set = undefined;
      }
    }
    if (!('enumerable' in internalDesc)) {
      internalDesc.enumerable = false;
    }
    if (!('configurable' in internalDesc)) {
      internalDesc.configurable = false;
    }
    return internalDesc;
  }

  function isEmptyDescriptor(desc) {
    return !('get' in desc) && !('set' in desc) && !('value' in desc) && !('writable' in desc) && !('enumerable' in desc) && !('configurable' in desc);
  }

  function isEquivalentDescriptor(desc1, desc2) {
    return sameValue(desc1.get, desc2.get) && sameValue(desc1.set, desc2.set) && sameValue(desc1.value, desc2.value) && sameValue(desc1.writable, desc2.writable) && sameValue(desc1.enumerable, desc2.enumerable) && sameValue(desc1.configurable, desc2.configurable);
  }

  // copied from http://wiki.ecmascript.org/doku.php?id=harmony:egal
  function sameValue(x, y) {
    if (x === y) {
      // 0 === -0, but they are not identical
      return x !== 0 || 1 / x === 1 / y;
    }

    // NaN !== NaN, but they are identical.
    // NaNs are the only non-reflexive value, i.e., if x !== x,
    // then x is a NaN.
    // isNaN is broken: it converts its argument to number, so
    // isNaN("foo") => true
    return x !== x && y !== y;
  }

  /**
   * Returns a fresh property descriptor that is guaranteed
   * to be complete (i.e. contain all the standard attributes).
   * Additionally, any non-standard enumerable properties of
   * attributes are copied over to the fresh descriptor.
   *
   * If attributes is undefined, returns undefined.
   *
   * See also: http://wiki.ecmascript.org/doku.php?id=harmony:proxies_semantics
   */
  function normalizeAndCompletePropertyDescriptor(attributes) {
    if (attributes === undefined) {
      return undefined;
    }
    var desc = toCompletePropertyDescriptor(attributes);
    // Note: no need to call FromPropertyDescriptor(desc), as we represent
    // "internal" property descriptors as proper Objects from the start
    for (var name in attributes) {
      if (!isStandardAttribute(name)) {
        Object.defineProperty(desc, name, { value: attributes[name],
          writable: true,
          enumerable: true,
          configurable: true });
      }
    }
    return desc;
  }

  /**
   * Returns a fresh property descriptor whose standard
   * attributes are guaranteed to be data properties of the right type.
   * Additionally, any non-standard enumerable properties of
   * attributes are copied over to the fresh descriptor.
   *
   * If attributes is undefined, will throw a TypeError.
   *
   * See also: http://wiki.ecmascript.org/doku.php?id=harmony:proxies_semantics
   */
  function normalizePropertyDescriptor(attributes) {
    var desc = toPropertyDescriptor(attributes);
    // Note: no need to call FromGenericPropertyDescriptor(desc), as we represent
    // "internal" property descriptors as proper Objects from the start
    for (var name in attributes) {
      if (!isStandardAttribute(name)) {
        Object.defineProperty(desc, name, { value: attributes[name],
          writable: true,
          enumerable: true,
          configurable: true });
      }
    }
    return desc;
  }

  // store a reference to the real ES5 primitives before patching them later
  var prim_preventExtensions = Object.preventExtensions,
      prim_seal = Object.seal,
      prim_freeze = Object.freeze,
      prim_isExtensible = Object.isExtensible,
      prim_isSealed = Object.isSealed,
      prim_isFrozen = Object.isFrozen,
      prim_getPrototypeOf = Object.getPrototypeOf,
      prim_getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor,
      prim_defineProperty = Object.defineProperty,
      prim_defineProperties = Object.defineProperties,
      prim_keys = Object.keys,
      prim_getOwnPropertyNames = Object.getOwnPropertyNames,
      prim_getOwnPropertySymbols = Object.getOwnPropertySymbols,
      prim_assign = Object.assign,
      prim_isArray = Array.isArray,
      prim_concat = Array.prototype.concat,
      prim_isPrototypeOf = Object.prototype.isPrototypeOf,
      prim_hasOwnProperty = Object.prototype.hasOwnProperty;

  // these will point to the patched versions of the respective methods on
  // Object. They are used within this module as the "intrinsic" bindings
  // of these methods (i.e. the "original" bindings as defined in the spec)
  var Object_isFrozen, Object_isSealed, Object_isExtensible, Object_getPrototypeOf, Object_getOwnPropertyNames;

  /**
   * A property 'name' is fixed if it is an own property of the target.
   */
  function isFixed(name, target) {
    return {}.hasOwnProperty.call(target, name);
  }
  function isSealed(name, target) {
    var desc = Object.getOwnPropertyDescriptor(target, name);
    if (desc === undefined) {
      return false;
    }
    return desc.configurable === false;
  }
  function isSealedDesc(desc) {
    return desc !== undefined && desc.configurable === false;
  }

  /**
   * Performs all validation that Object.defineProperty performs,
   * without actually defining the property. Returns a boolean
   * indicating whether validation succeeded.
   *
   * Implementation transliterated from ES5.1 section 8.12.9
   */
  function isCompatibleDescriptor(extensible, current, desc) {
    if (current === undefined && extensible === false) {
      return false;
    }
    if (current === undefined && extensible === true) {
      return true;
    }
    if (isEmptyDescriptor(desc)) {
      return true;
    }
    if (isEquivalentDescriptor(current, desc)) {
      return true;
    }
    if (current.configurable === false) {
      if (desc.configurable === true) {
        return false;
      }
      if ('enumerable' in desc && desc.enumerable !== current.enumerable) {
        return false;
      }
    }
    if (isGenericDescriptor(desc)) {
      return true;
    }
    if (isDataDescriptor(current) !== isDataDescriptor(desc)) {
      if (current.configurable === false) {
        return false;
      }
      return true;
    }
    if (isDataDescriptor(current) && isDataDescriptor(desc)) {
      if (current.configurable === false) {
        if (current.writable === false && desc.writable === true) {
          return false;
        }
        if (current.writable === false) {
          if ('value' in desc && !sameValue(desc.value, current.value)) {
            return false;
          }
        }
      }
      return true;
    }
    if (isAccessorDescriptor(current) && isAccessorDescriptor(desc)) {
      if (current.configurable === false) {
        if ('set' in desc && !sameValue(desc.set, current.set)) {
          return false;
        }
        if ('get' in desc && !sameValue(desc.get, current.get)) {
          return false;
        }
      }
    }
    return true;
  }

  // ES6 7.3.11 SetIntegrityLevel
  // level is one of "sealed" or "frozen"
  function setIntegrityLevel(target, level) {
    var ownProps = Object_getOwnPropertyNames(target);
    var pendingException = undefined;
    if (level === "sealed") {
      var l = +ownProps.length;
      var k;
      for (var i = 0; i < l; i++) {
        k = String(ownProps[i]);
        try {
          Object.defineProperty(target, k, { configurable: false });
        } catch (e) {
          if (pendingException === undefined) {
            pendingException = e;
          }
        }
      }
    } else {
      // level === "frozen"
      var l = +ownProps.length;
      var k;
      for (var i = 0; i < l; i++) {
        k = String(ownProps[i]);
        try {
          var currentDesc = Object.getOwnPropertyDescriptor(target, k);
          if (currentDesc !== undefined) {
            var desc;
            if (isAccessorDescriptor(currentDesc)) {
              desc = { configurable: false };
            } else {
              desc = { configurable: false, writable: false };
            }
            Object.defineProperty(target, k, desc);
          }
        } catch (e) {
          if (pendingException === undefined) {
            pendingException = e;
          }
        }
      }
    }
    if (pendingException !== undefined) {
      throw pendingException;
    }
    return Reflect.preventExtensions(target);
  }

  // ES6 7.3.12 TestIntegrityLevel
  // level is one of "sealed" or "frozen"
  function testIntegrityLevel(target, level) {
    var isExtensible = Object_isExtensible(target);
    if (isExtensible) return false;

    var ownProps = Object_getOwnPropertyNames(target);
    var pendingException = undefined;
    var configurable = false;
    var writable = false;

    var l = +ownProps.length;
    var k;
    var currentDesc;
    for (var i = 0; i < l; i++) {
      k = String(ownProps[i]);
      try {
        currentDesc = Object.getOwnPropertyDescriptor(target, k);
        configurable = configurable || currentDesc.configurable;
        if (isDataDescriptor(currentDesc)) {
          writable = writable || currentDesc.writable;
        }
      } catch (e) {
        if (pendingException === undefined) {
          pendingException = e;
          configurable = true;
        }
      }
    }
    if (pendingException !== undefined) {
      throw pendingException;
    }
    if (level === "frozen" && writable === true) {
      return false;
    }
    if (configurable === true) {
      return false;
    }
    return true;
  }

  // ---- The Validator handler wrapper around user handlers ----

  /**
   * @param target the object wrapped by this proxy.
   * As long as the proxy is extensible, only non-configurable properties
   * are checked against the target. Once the proxy becomes non-extensible,
   * invariants w.r.t. non-extensibility are also enforced.
   *
   * @param handler the handler of the direct proxy. The object emulated by
   * this handler is validated against the target object of the direct proxy.
   * Any violations that the handler makes against the invariants
   * of the target will cause a TypeError to be thrown.
   *
   * Both target and handler must be proper Objects at initialization time.
   */
  function Validator(target, handler) {
    // for non-revokable proxies, these are const references
    // for revokable proxies, on revocation:
    // - this.target is set to null
    // - this.handler is set to a handler that throws on all traps
    this.target = target;
    this.handler = handler;
  }

  Validator.prototype = {

    /**
     * If getTrap returns undefined, the caller should perform the
     * default forwarding behavior.
     * If getTrap returns normally otherwise, the return value
     * will be a callable trap function. When calling the trap function,
     * the caller is responsible for binding its |this| to |this.handler|.
     */
    getTrap: function getTrap(trapName) {
      var trap = this.handler[trapName];
      if (trap === undefined) {
        // the trap was not defined,
        // perform the default forwarding behavior
        return undefined;
      }

      if (typeof trap !== "function") {
        throw new TypeError(trapName + " trap is not callable: " + trap);
      }

      return trap;
    },

    // === fundamental traps ===

    /**
     * If name denotes a fixed property, check:
     *   - whether targetHandler reports it as existent
     *   - whether the returned descriptor is compatible with the fixed property
     * If the proxy is non-extensible, check:
     *   - whether name is not a new property
     * Additionally, the returned descriptor is normalized and completed.
     */
    getOwnPropertyDescriptor: function getOwnPropertyDescriptor(name) {
      "use strict";

      var trap = this.getTrap("getOwnPropertyDescriptor");
      if (trap === undefined) {
        return Reflect.getOwnPropertyDescriptor(this.target, name);
      }

      name = String(name);
      var desc = trap.call(this.handler, this.target, name);
      desc = normalizeAndCompletePropertyDescriptor(desc);

      var targetDesc = Object.getOwnPropertyDescriptor(this.target, name);
      var extensible = Object.isExtensible(this.target);

      if (desc === undefined) {
        if (isSealedDesc(targetDesc)) {
          throw new TypeError("cannot report non-configurable property '" + name + "' as non-existent");
        }
        if (!extensible && targetDesc !== undefined) {
          // if handler is allowed to return undefined, we cannot guarantee
          // that it will not return a descriptor for this property later.
          // Once a property has been reported as non-existent on a non-extensible
          // object, it should forever be reported as non-existent
          throw new TypeError("cannot report existing own property '" + name + "' as non-existent on a non-extensible object");
        }
        return undefined;
      }

      // at this point, we know (desc !== undefined), i.e.
      // targetHandler reports 'name' as an existing property

      // Note: we could collapse the following two if-tests into a single
      // test. Separating out the cases to improve error reporting.

      if (!extensible) {
        if (targetDesc === undefined) {
          throw new TypeError("cannot report a new own property '" + name + "' on a non-extensible object");
        }
      }

      if (name !== undefined) {
        if (!isCompatibleDescriptor(extensible, targetDesc, desc)) {
          throw new TypeError("cannot report incompatible property descriptor " + "for property '" + name + "'");
        }
      }

      if (desc.configurable === false) {
        if (targetDesc === undefined || targetDesc.configurable === true) {
          // if the property is configurable or non-existent on the target,
          // but is reported as a non-configurable property, it may later be
          // reported as configurable or non-existent, which violates the
          // invariant that if the property might change or disappear, the
          // configurable attribute must be true.
          throw new TypeError("cannot report a non-configurable descriptor " + "for configurable or non-existent property '" + name + "'");
        }
        if ('writable' in desc && desc.writable === false) {
          if (targetDesc.writable === true) {
            // if the property is non-configurable, writable on the target,
            // but is reported as non-configurable, non-writable, it may later
            // be reported as non-configurable, writable again, which violates
            // the invariant that a non-configurable, non-writable property
            // may not change state.
            throw new TypeError("cannot report non-configurable, writable property '" + name + "' as non-configurable, non-writable");
          }
        }
      }

      return desc;
    },

    /**
     * In the direct proxies design with refactored prototype climbing,
     * this trap is deprecated. For proxies-as-prototypes, instead
     * of calling this trap, the get, set, has or enumerate traps are
     * called instead.
     *
     * In this implementation, we "abuse" getPropertyDescriptor to
     * support trapping the get or set traps for proxies-as-prototypes.
     * We do this by returning a getter/setter pair that invokes
     * the corresponding traps.
     *
     * While this hack works for inherited property access, it has some
     * quirks:
     *
     * In Firefox, this trap is only called after a prior invocation
     * of the 'has' trap has returned true. Hence, expect the following
     * behavior:
     * <code>
     * var child = Object.create(Proxy(target, handler));
     * child[name] // triggers handler.has(target, name)
     * // if that returns true, triggers handler.get(target, name, child)
     * </code>
     *
     * On v8, the 'in' operator, when applied to an object that inherits
     * from a proxy, will call getPropertyDescriptor and walk the proto-chain.
     * That calls the below getPropertyDescriptor trap on the proxy. The
     * result of the 'in'-operator is then determined by whether this trap
     * returns undefined or a property descriptor object. That is why
     * we first explicitly trigger the 'has' trap to determine whether
     * the property exists.
     *
     * This has the side-effect that when enumerating properties on
     * an object that inherits from a proxy in v8, only properties
     * for which 'has' returns true are returned:
     *
     * <code>
     * var child = Object.create(Proxy(target, handler));
     * for (var prop in child) {
     *   // only enumerates prop if (prop in child) returns true
     * }
     * </code>
     */
    getPropertyDescriptor: function getPropertyDescriptor(name) {
      var handler = this;

      if (!handler.has(name)) return undefined;

      return {
        get: function get() {
          return handler.get(this, name);
        },
        set: function set(val) {
          if (handler.set(this, name, val)) {
            return val;
          } else {
            throw new TypeError("failed assignment to " + name);
          }
        },
        enumerable: true,
        configurable: true
      };
    },

    /**
     * If name denotes a fixed property, check for incompatible changes.
     * If the proxy is non-extensible, check that new properties are rejected.
     */
    defineProperty: function defineProperty(name, desc) {
      // TODO(tvcutsem): the current tracemonkey implementation of proxies
      // auto-completes 'desc', which is not correct. 'desc' should be
      // normalized, but not completed. Consider:
      // Object.defineProperty(proxy, 'foo', {enumerable:false})
      // This trap will receive desc =
      //  {value:undefined,writable:false,enumerable:false,configurable:false}
      // This will also set all other attributes to their default value,
      // which is unexpected and different from [[DefineOwnProperty]].
      // Bug filed: https://bugzilla.mozilla.org/show_bug.cgi?id=601329

      var trap = this.getTrap("defineProperty");
      if (trap === undefined) {
        // default forwarding behavior
        return Reflect.defineProperty(this.target, name, desc);
      }

      name = String(name);
      var descObj = normalizePropertyDescriptor(desc);
      var success = trap.call(this.handler, this.target, name, descObj);
      success = !!success; // coerce to Boolean

      if (success === true) {

        var targetDesc = Object.getOwnPropertyDescriptor(this.target, name);
        var extensible = Object.isExtensible(this.target);

        // Note: we could collapse the following two if-tests into a single
        // test. Separating out the cases to improve error reporting.

        if (!extensible) {
          if (targetDesc === undefined) {
            throw new TypeError("cannot successfully add a new property '" + name + "' to a non-extensible object");
          }
        }

        if (targetDesc !== undefined) {
          if (!isCompatibleDescriptor(extensible, targetDesc, desc)) {
            throw new TypeError("cannot define incompatible property " + "descriptor for property '" + name + "'");
          }
          if (isDataDescriptor(targetDesc) && targetDesc.configurable === false && targetDesc.writable === true) {
            if (desc.configurable === false && desc.writable === false) {
              // if the property is non-configurable, writable on the target
              // but was successfully reported to be updated to
              // non-configurable, non-writable, it can later be reported
              // again as non-configurable, writable, which violates
              // the invariant that non-configurable, non-writable properties
              // cannot change state
              throw new TypeError("cannot successfully define non-configurable, writable " + " property '" + name + "' as non-configurable, non-writable");
            }
          }
        }

        if (desc.configurable === false && !isSealedDesc(targetDesc)) {
          // if the property is configurable or non-existent on the target,
          // but is successfully being redefined as a non-configurable property,
          // it may later be reported as configurable or non-existent, which violates
          // the invariant that if the property might change or disappear, the
          // configurable attribute must be true.
          throw new TypeError("cannot successfully define a non-configurable " + "descriptor for configurable or non-existent property '" + name + "'");
        }
      }

      return success;
    },

    /**
     * On success, check whether the target object is indeed non-extensible.
     */
    preventExtensions: function preventExtensions() {
      var trap = this.getTrap("preventExtensions");
      if (trap === undefined) {
        // default forwarding behavior
        return Reflect.preventExtensions(this.target);
      }

      var success = trap.call(this.handler, this.target);
      success = !!success; // coerce to Boolean
      if (success) {
        if (Object_isExtensible(this.target)) {
          throw new TypeError("can't report extensible object as non-extensible: " + this.target);
        }
      }
      return success;
    },

    /**
     * If name denotes a sealed property, check whether handler rejects.
     */
    delete: function _delete(name) {
      "use strict";

      var trap = this.getTrap("deleteProperty");
      if (trap === undefined) {
        // default forwarding behavior
        return Reflect.deleteProperty(this.target, name);
      }

      name = String(name);
      var res = trap.call(this.handler, this.target, name);
      res = !!res; // coerce to Boolean

      var targetDesc;
      if (res === true) {
        targetDesc = Object.getOwnPropertyDescriptor(this.target, name);
        if (targetDesc !== undefined && targetDesc.configurable === false) {
          throw new TypeError("property '" + name + "' is non-configurable " + "and can't be deleted");
        }
        if (targetDesc !== undefined && !Object_isExtensible(this.target)) {
          // if the property still exists on a non-extensible target but
          // is reported as successfully deleted, it may later be reported
          // as present, which violates the invariant that an own property,
          // deleted from a non-extensible object cannot reappear.
          throw new TypeError("cannot successfully delete existing property '" + name + "' on a non-extensible object");
        }
      }

      return res;
    },

    /**
     * The getOwnPropertyNames trap was replaced by the ownKeys trap,
     * which now also returns an array (of strings or symbols) and
     * which performs the same rigorous invariant checks as getOwnPropertyNames
     *
     * See issue #48 on how this trap can still get invoked by external libs
     * that don't use the patched Object.getOwnPropertyNames function.
     */
    getOwnPropertyNames: function getOwnPropertyNames() {
      // Note: removed deprecation warning to avoid dependency on 'console'
      // (and on node, should anyway use util.deprecate). Deprecation warnings
      // can also be annoying when they are outside of the user's control, e.g.
      // when an external library calls unpatched Object.getOwnPropertyNames.
      // Since there is a clean fallback to `ownKeys`, the fact that the
      // deprecated method is still called is mostly harmless anyway.
      // See also issues #65 and #66.
      // console.warn("getOwnPropertyNames trap is deprecated. Use ownKeys instead");
      return this.ownKeys();
    },

    /**
     * Checks whether the trap result does not contain any new properties
     * if the proxy is non-extensible.
     *
     * Any own non-configurable properties of the target that are not included
     * in the trap result give rise to a TypeError. As such, we check whether the
     * returned result contains at least all sealed properties of the target
     * object.
     *
     * Additionally, the trap result is normalized.
     * Instead of returning the trap result directly:
     *  - create and return a fresh Array,
     *  - of which each element is coerced to a String
     *
     * This trap is called a.o. by Reflect.ownKeys, Object.getOwnPropertyNames
     * and Object.keys (the latter filters out only the enumerable own properties).
     */
    ownKeys: function ownKeys() {
      var trap = this.getTrap("ownKeys");
      if (trap === undefined) {
        // default forwarding behavior
        return Reflect.ownKeys(this.target);
      }

      var trapResult = trap.call(this.handler, this.target);

      // propNames is used as a set of strings
      var propNames = Object.create(null);
      var numProps = +trapResult.length;
      var result = new Array(numProps);

      for (var i = 0; i < numProps; i++) {
        var s = String(trapResult[i]);
        if (!Object.isExtensible(this.target) && !isFixed(s, this.target)) {
          // non-extensible proxies don't tolerate new own property names
          throw new TypeError("ownKeys trap cannot list a new " + "property '" + s + "' on a non-extensible object");
        }

        propNames[s] = true;
        result[i] = s;
      }

      var ownProps = Object_getOwnPropertyNames(this.target);
      var target = this.target;
      ownProps.forEach(function (ownProp) {
        if (!propNames[ownProp]) {
          if (isSealed(ownProp, target)) {
            throw new TypeError("ownKeys trap failed to include " + "non-configurable property '" + ownProp + "'");
          }
          if (!Object.isExtensible(target) && isFixed(ownProp, target)) {
            // if handler is allowed to report ownProp as non-existent,
            // we cannot guarantee that it will never later report it as
            // existent. Once a property has been reported as non-existent
            // on a non-extensible object, it should forever be reported as
            // non-existent
            throw new TypeError("ownKeys trap cannot report existing own property '" + ownProp + "' as non-existent on a non-extensible object");
          }
        }
      });

      return result;
    },

    /**
     * Checks whether the trap result is consistent with the state of the
     * wrapped target.
     */
    isExtensible: function isExtensible() {
      var trap = this.getTrap("isExtensible");
      if (trap === undefined) {
        // default forwarding behavior
        return Reflect.isExtensible(this.target);
      }

      var result = trap.call(this.handler, this.target);
      result = !!result; // coerce to Boolean
      var state = Object_isExtensible(this.target);
      if (result !== state) {
        if (result) {
          throw new TypeError("cannot report non-extensible object as extensible: " + this.target);
        } else {
          throw new TypeError("cannot report extensible object as non-extensible: " + this.target);
        }
      }
      return state;
    },

    /**
     * Check whether the trap result corresponds to the target's [[Prototype]]
     */
    getPrototypeOf: function getPrototypeOf() {
      var trap = this.getTrap("getPrototypeOf");
      if (trap === undefined) {
        // default forwarding behavior
        return Reflect.getPrototypeOf(this.target);
      }

      var allegedProto = trap.call(this.handler, this.target);

      if (!Object_isExtensible(this.target)) {
        var actualProto = Object_getPrototypeOf(this.target);
        if (!sameValue(allegedProto, actualProto)) {
          throw new TypeError("prototype value does not match: " + this.target);
        }
      }

      return allegedProto;
    },

    /**
     * If target is non-extensible and setPrototypeOf trap returns true,
     * check whether the trap result corresponds to the target's [[Prototype]]
     */
    setPrototypeOf: function setPrototypeOf(newProto) {
      var trap = this.getTrap("setPrototypeOf");
      if (trap === undefined) {
        // default forwarding behavior
        return Reflect.setPrototypeOf(this.target, newProto);
      }

      var success = trap.call(this.handler, this.target, newProto);

      success = !!success;
      if (success && !Object_isExtensible(this.target)) {
        var actualProto = Object_getPrototypeOf(this.target);
        if (!sameValue(newProto, actualProto)) {
          throw new TypeError("prototype value does not match: " + this.target);
        }
      }

      return success;
    },

    /**
     * In the direct proxies design with refactored prototype climbing,
     * this trap is deprecated. For proxies-as-prototypes, for-in will
     * call the enumerate() trap. If that trap is not defined, the
     * operation is forwarded to the target, no more fallback on this
     * fundamental trap.
     */
    getPropertyNames: function getPropertyNames() {
      throw new TypeError("getPropertyNames trap is deprecated");
    },

    // === derived traps ===

    /**
     * If name denotes a fixed property, check whether the trap returns true.
     */
    has: function has(name) {
      var trap = this.getTrap("has");
      if (trap === undefined) {
        // default forwarding behavior
        return Reflect.has(this.target, name);
      }

      name = String(name);
      var res = trap.call(this.handler, this.target, name);
      res = !!res; // coerce to Boolean

      if (res === false) {
        if (isSealed(name, this.target)) {
          throw new TypeError("cannot report existing non-configurable own " + "property '" + name + "' as a non-existent " + "property");
        }
        if (!Object.isExtensible(this.target) && isFixed(name, this.target)) {
          // if handler is allowed to return false, we cannot guarantee
          // that it will not return true for this property later.
          // Once a property has been reported as non-existent on a non-extensible
          // object, it should forever be reported as non-existent
          throw new TypeError("cannot report existing own property '" + name + "' as non-existent on a non-extensible object");
        }
      }

      // if res === true, we don't need to check for extensibility
      // even for a non-extensible proxy that has no own name property,
      // the property may have been inherited

      return res;
    },

    /**
     * If name denotes a fixed non-configurable, non-writable data property,
     * check its return value against the previously asserted value of the
     * fixed property.
     */
    get: function get(receiver, name) {

      // experimental support for invoke() trap on platforms that
      // support __noSuchMethod__
      /*
      if (name === '__noSuchMethod__') {
        var handler = this;
        return function(name, args) {
          return handler.invoke(receiver, name, args);
        }
      }
      */

      var trap = this.getTrap("get");
      if (trap === undefined) {
        // default forwarding behavior
        return Reflect.get(this.target, name, receiver);
      }

      name = String(name);
      var res = trap.call(this.handler, this.target, name, receiver);

      var fixedDesc = Object.getOwnPropertyDescriptor(this.target, name);
      // check consistency of the returned value
      if (fixedDesc !== undefined) {
        // getting an existing property
        if (isDataDescriptor(fixedDesc) && fixedDesc.configurable === false && fixedDesc.writable === false) {
          // own frozen data property
          if (!sameValue(res, fixedDesc.value)) {
            throw new TypeError("cannot report inconsistent value for " + "non-writable, non-configurable property '" + name + "'");
          }
        } else {
          // it's an accessor property
          if (isAccessorDescriptor(fixedDesc) && fixedDesc.configurable === false && fixedDesc.get === undefined) {
            if (res !== undefined) {
              throw new TypeError("must report undefined for non-configurable " + "accessor property '" + name + "' without getter");
            }
          }
        }
      }

      return res;
    },

    /**
     * If name denotes a fixed non-configurable, non-writable data property,
     * check that the trap rejects the assignment.
     */
    set: function set(receiver, name, val) {
      var trap = this.getTrap("set");
      if (trap === undefined) {
        // default forwarding behavior
        return Reflect.set(this.target, name, val, receiver);
      }

      name = String(name);
      var res = trap.call(this.handler, this.target, name, val, receiver);
      res = !!res; // coerce to Boolean

      // if success is reported, check whether property is truly assignable
      if (res === true) {
        var fixedDesc = Object.getOwnPropertyDescriptor(this.target, name);
        if (fixedDesc !== undefined) {
          // setting an existing property
          if (isDataDescriptor(fixedDesc) && fixedDesc.configurable === false && fixedDesc.writable === false) {
            if (!sameValue(val, fixedDesc.value)) {
              throw new TypeError("cannot successfully assign to a " + "non-writable, non-configurable property '" + name + "'");
            }
          } else {
            if (isAccessorDescriptor(fixedDesc) && fixedDesc.configurable === false && // non-configurable
            fixedDesc.set === undefined) {
              // accessor with undefined setter
              throw new TypeError("setting a property '" + name + "' that has " + " only a getter");
            }
          }
        }
      }

      return res;
    },

    /**
     * Any own enumerable non-configurable properties of the target that are not
     * included in the trap result give rise to a TypeError. As such, we check
     * whether the returned result contains at least all sealed enumerable properties
     * of the target object.
     *
     * The trap should return an iterator.
     *
     * However, as implementations of pre-direct proxies still expect enumerate
     * to return an array of strings, we convert the iterator into an array.
     */
    enumerate: function enumerate() {
      var trap = this.getTrap("enumerate");
      if (trap === undefined) {
        // default forwarding behavior
        var trapResult = Reflect.enumerate(this.target);
        var result = [];
        var nxt = trapResult.next();
        while (!nxt.done) {
          result.push(String(nxt.value));
          nxt = trapResult.next();
        }
        return result;
      }

      var trapResult = trap.call(this.handler, this.target);

      if (trapResult === null || trapResult === undefined || trapResult.next === undefined) {
        throw new TypeError("enumerate trap should return an iterator, got: " + trapResult);
      }

      // propNames is used as a set of strings
      var propNames = Object.create(null);

      // var numProps = +trapResult.length;
      var result = []; // new Array(numProps);

      // trapResult is supposed to be an iterator
      // drain iterator to array as current implementations still expect
      // enumerate to return an array of strings
      var nxt = trapResult.next();

      while (!nxt.done) {
        var s = String(nxt.value);
        if (propNames[s]) {
          throw new TypeError("enumerate trap cannot list a " + "duplicate property '" + s + "'");
        }
        propNames[s] = true;
        result.push(s);
        nxt = trapResult.next();
      }

      /*for (var i = 0; i < numProps; i++) {
        var s = String(trapResult[i]);
        if (propNames[s]) {
          throw new TypeError("enumerate trap cannot list a "+
                              "duplicate property '"+s+"'");
        }
         propNames[s] = true;
        result[i] = s;
      } */

      var ownEnumerableProps = Object.keys(this.target);
      var target = this.target;
      ownEnumerableProps.forEach(function (ownEnumerableProp) {
        if (!propNames[ownEnumerableProp]) {
          if (isSealed(ownEnumerableProp, target)) {
            throw new TypeError("enumerate trap failed to include " + "non-configurable enumerable property '" + ownEnumerableProp + "'");
          }
          if (!Object.isExtensible(target) && isFixed(ownEnumerableProp, target)) {
            // if handler is allowed not to report ownEnumerableProp as an own
            // property, we cannot guarantee that it will never report it as
            // an own property later. Once a property has been reported as
            // non-existent on a non-extensible object, it should forever be
            // reported as non-existent
            throw new TypeError("cannot report existing own property '" + ownEnumerableProp + "' as non-existent on a " + "non-extensible object");
          }
        }
      });

      return result;
    },

    /**
     * The iterate trap is deprecated by the enumerate trap.
     */
    iterate: Validator.prototype.enumerate,

    /**
     * Any own non-configurable properties of the target that are not included
     * in the trap result give rise to a TypeError. As such, we check whether the
     * returned result contains at least all sealed properties of the target
     * object.
     *
     * The trap result is normalized.
     * The trap result is not returned directly. Instead:
     *  - create and return a fresh Array,
     *  - of which each element is coerced to String,
     *  - which does not contain duplicates
     *
     * FIXME: keys trap is deprecated
     */
    /*
    keys: function() {
      var trap = this.getTrap("keys");
      if (trap === undefined) {
        // default forwarding behavior
        return Reflect.keys(this.target);
      }
       var trapResult = trap.call(this.handler, this.target);
       // propNames is used as a set of strings
      var propNames = Object.create(null);
      var numProps = +trapResult.length;
      var result = new Array(numProps);
       for (var i = 0; i < numProps; i++) {
       var s = String(trapResult[i]);
       if (propNames[s]) {
         throw new TypeError("keys trap cannot list a "+
                             "duplicate property '"+s+"'");
       }
       if (!Object.isExtensible(this.target) && !isFixed(s, this.target)) {
         // non-extensible proxies don't tolerate new own property names
         throw new TypeError("keys trap cannot list a new "+
                             "property '"+s+"' on a non-extensible object");
       }
        propNames[s] = true;
       result[i] = s;
      }
       var ownEnumerableProps = Object.keys(this.target);
      var target = this.target;
      ownEnumerableProps.forEach(function (ownEnumerableProp) {
        if (!propNames[ownEnumerableProp]) {
          if (isSealed(ownEnumerableProp, target)) {
            throw new TypeError("keys trap failed to include "+
                                "non-configurable enumerable property '"+
                                ownEnumerableProp+"'");
          }
          if (!Object.isExtensible(target) &&
              isFixed(ownEnumerableProp, target)) {
              // if handler is allowed not to report ownEnumerableProp as an own
              // property, we cannot guarantee that it will never report it as
              // an own property later. Once a property has been reported as
              // non-existent on a non-extensible object, it should forever be
              // reported as non-existent
              throw new TypeError("cannot report existing own property '"+
                                  ownEnumerableProp+"' as non-existent on a "+
                                  "non-extensible object");
          }
        }
      });
       return result;
    },
    */

    /**
     * New trap that reifies [[Call]].
     * If the target is a function, then a call to
     *   proxy(...args)
     * Triggers this trap
     */
    apply: function apply(target, thisBinding, args) {
      var trap = this.getTrap("apply");
      if (trap === undefined) {
        return Reflect.apply(target, thisBinding, args);
      }

      if (typeof this.target === "function") {
        return trap.call(this.handler, target, thisBinding, args);
      } else {
        throw new TypeError("apply: " + target + " is not a function");
      }
    },

    /**
     * New trap that reifies [[Construct]].
     * If the target is a function, then a call to
     *   new proxy(...args)
     * Triggers this trap
     */
    construct: function construct(target, args, newTarget) {
      var trap = this.getTrap("construct");
      if (trap === undefined) {
        return Reflect.construct(target, args, newTarget);
      }

      if (typeof target !== "function") {
        throw new TypeError("new: " + target + " is not a function");
      }

      if (newTarget === undefined) {
        newTarget = target;
      } else {
        if (typeof newTarget !== "function") {
          throw new TypeError("new: " + newTarget + " is not a function");
        }
      }
      return trap.call(this.handler, target, args, newTarget);
    }
  };

  // ---- end of the Validator handler wrapper handler ----

  // In what follows, a 'direct proxy' is a proxy
  // whose handler is a Validator. Such proxies can be made non-extensible,
  // sealed or frozen without losing the ability to trap.

  // maps direct proxies to their Validator handlers
  var directProxies = new WeakMap();

  // patch Object.{preventExtensions,seal,freeze} so that
  // they recognize fixable proxies and act accordingly
  Object.preventExtensions = function (subject) {
    var vhandler = directProxies.get(subject);
    if (vhandler !== undefined) {
      if (vhandler.preventExtensions()) {
        return subject;
      } else {
        throw new TypeError("preventExtensions on " + subject + " rejected");
      }
    } else {
      return prim_preventExtensions(subject);
    }
  };
  Object.seal = function (subject) {
    setIntegrityLevel(subject, "sealed");
    return subject;
  };
  Object.freeze = function (subject) {
    setIntegrityLevel(subject, "frozen");
    return subject;
  };
  Object.isExtensible = Object_isExtensible = function Object_isExtensible(subject) {
    var vHandler = directProxies.get(subject);
    if (vHandler !== undefined) {
      return vHandler.isExtensible();
    } else {
      return prim_isExtensible(subject);
    }
  };
  Object.isSealed = Object_isSealed = function Object_isSealed(subject) {
    return testIntegrityLevel(subject, "sealed");
  };
  Object.isFrozen = Object_isFrozen = function Object_isFrozen(subject) {
    return testIntegrityLevel(subject, "frozen");
  };
  Object.getPrototypeOf = Object_getPrototypeOf = function Object_getPrototypeOf(subject) {
    var vHandler = directProxies.get(subject);
    if (vHandler !== undefined) {
      return vHandler.getPrototypeOf();
    } else {
      return prim_getPrototypeOf(subject);
    }
  };

  // patch Object.getOwnPropertyDescriptor to directly call
  // the Validator.prototype.getOwnPropertyDescriptor trap
  // This is to circumvent an assertion in the built-in Proxy
  // trapping mechanism of v8, which disallows that trap to
  // return non-configurable property descriptors (as per the
  // old Proxy design)
  Object.getOwnPropertyDescriptor = function (subject, name) {
    var vhandler = directProxies.get(subject);
    if (vhandler !== undefined) {
      return vhandler.getOwnPropertyDescriptor(name);
    } else {
      return prim_getOwnPropertyDescriptor(subject, name);
    }
  };

  // patch Object.defineProperty to directly call
  // the Validator.prototype.defineProperty trap
  // This is to circumvent two issues with the built-in
  // trap mechanism:
  // 1) the current tracemonkey implementation of proxies
  // auto-completes 'desc', which is not correct. 'desc' should be
  // normalized, but not completed. Consider:
  // Object.defineProperty(proxy, 'foo', {enumerable:false})
  // This trap will receive desc =
  //  {value:undefined,writable:false,enumerable:false,configurable:false}
  // This will also set all other attributes to their default value,
  // which is unexpected and different from [[DefineOwnProperty]].
  // Bug filed: https://bugzilla.mozilla.org/show_bug.cgi?id=601329
  // 2) the current spidermonkey implementation does not
  // throw an exception when this trap returns 'false', but instead silently
  // ignores the operation (this is regardless of strict-mode)
  // 2a) v8 does throw an exception for this case, but includes the rather
  //     unhelpful error message:
  // 'Proxy handler #<Object> returned false from 'defineProperty' trap'
  Object.defineProperty = function (subject, name, desc) {
    var vhandler = directProxies.get(subject);
    if (vhandler !== undefined) {
      var normalizedDesc = normalizePropertyDescriptor(desc);
      var success = vhandler.defineProperty(name, normalizedDesc);
      if (success === false) {
        throw new TypeError("can't redefine property '" + name + "'");
      }
      return subject;
    } else {
      return prim_defineProperty(subject, name, desc);
    }
  };

  Object.defineProperties = function (subject, descs) {
    var vhandler = directProxies.get(subject);
    if (vhandler !== undefined) {
      var names = Object.keys(descs);
      for (var i = 0; i < names.length; i++) {
        var name = names[i];
        var normalizedDesc = normalizePropertyDescriptor(descs[name]);
        var success = vhandler.defineProperty(name, normalizedDesc);
        if (success === false) {
          throw new TypeError("can't redefine property '" + name + "'");
        }
      }
      return subject;
    } else {
      return prim_defineProperties(subject, descs);
    }
  };

  Object.keys = function (subject) {
    var vHandler = directProxies.get(subject);
    if (vHandler !== undefined) {
      var ownKeys = vHandler.ownKeys();
      var result = [];
      for (var i = 0; i < ownKeys.length; i++) {
        var k = String(ownKeys[i]);
        var desc = Object.getOwnPropertyDescriptor(subject, k);
        if (desc !== undefined && desc.enumerable === true) {
          result.push(k);
        }
      }
      return result;
    } else {
      return prim_keys(subject);
    }
  };

  Object.getOwnPropertyNames = Object_getOwnPropertyNames = function Object_getOwnPropertyNames(subject) {
    var vHandler = directProxies.get(subject);
    if (vHandler !== undefined) {
      return vHandler.ownKeys();
    } else {
      return prim_getOwnPropertyNames(subject);
    }
  };

  // fixes issue #71 (Calling Object.getOwnPropertySymbols() on a Proxy
  // throws an error)
  if (prim_getOwnPropertySymbols !== undefined) {
    Object.getOwnPropertySymbols = function (subject) {
      var vHandler = directProxies.get(subject);
      if (vHandler !== undefined) {
        // as this shim does not support symbols, a Proxy never advertises
        // any symbol-valued own properties
        return [];
      } else {
        return prim_getOwnPropertySymbols(subject);
      }
    };
  }

  // fixes issue #72 ('Illegal access' error when using Object.assign)
  // Object.assign polyfill based on a polyfill posted on MDN: 
  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/\
  //  Global_Objects/Object/assign
  // Note that this polyfill does not support Symbols, but this Proxy Shim
  // does not support Symbols anyway.
  if (prim_assign !== undefined) {
    Object.assign = function (target) {

      // check if any argument is a proxy object
      var noProxies = true;
      for (var i = 0; i < arguments.length; i++) {
        var vHandler = directProxies.get(arguments[i]);
        if (vHandler !== undefined) {
          noProxies = false;
          break;
        }
      }
      if (noProxies) {
        // not a single argument is a proxy, perform built-in algorithm
        return prim_assign.apply(Object, arguments);
      }

      // there is at least one proxy argument, use the polyfill

      if (target === undefined || target === null) {
        throw new TypeError('Cannot convert undefined or null to object');
      }

      var output = Object(target);
      for (var index = 1; index < arguments.length; index++) {
        var source = arguments[index];
        if (source !== undefined && source !== null) {
          for (var nextKey in source) {
            if (source.hasOwnProperty(nextKey)) {
              output[nextKey] = source[nextKey];
            }
          }
        }
      }
      return output;
    };
  }

  // returns whether an argument is a reference to an object,
  // which is legal as a WeakMap key.
  function isObject(arg) {
    var type = typeof arg === 'undefined' ? 'undefined' : _typeof(arg);
    return type === 'object' && arg !== null || type === 'function';
  };

  // a wrapper for WeakMap.get which returns the undefined value
  // for keys that are not objects (in which case the underlying
  // WeakMap would have thrown a TypeError).
  function safeWeakMapGet(map, key) {
    return isObject(key) ? map.get(key) : undefined;
  };

  // returns a new function of zero arguments that recursively
  // unwraps any proxies specified as the |this|-value.
  // The primitive is assumed to be a zero-argument method
  // that uses its |this|-binding.
  function makeUnwrapping0ArgMethod(primitive) {
    return function builtin() {
      var vHandler = safeWeakMapGet(directProxies, this);
      if (vHandler !== undefined) {
        return builtin.call(vHandler.target);
      } else {
        return primitive.call(this);
      }
    };
  };

  // returns a new function of 1 arguments that recursively
  // unwraps any proxies specified as the |this|-value.
  // The primitive is assumed to be a 1-argument method
  // that uses its |this|-binding.
  function makeUnwrapping1ArgMethod(primitive) {
    return function builtin(arg) {
      var vHandler = safeWeakMapGet(directProxies, this);
      if (vHandler !== undefined) {
        return builtin.call(vHandler.target, arg);
      } else {
        return primitive.call(this, arg);
      }
    };
  };

  Object.prototype.valueOf = makeUnwrapping0ArgMethod(Object.prototype.valueOf);
  Object.prototype.toString = makeUnwrapping0ArgMethod(Object.prototype.toString);
  Function.prototype.toString = makeUnwrapping0ArgMethod(Function.prototype.toString);
  Date.prototype.toString = makeUnwrapping0ArgMethod(Date.prototype.toString);

  Object.prototype.isPrototypeOf = function builtin(arg) {
    // bugfix thanks to Bill Mark:
    // built-in isPrototypeOf does not unwrap proxies used
    // as arguments. So, we implement the builtin ourselves,
    // based on the ECMAScript 6 spec. Our encoding will
    // make sure that if a proxy is used as an argument,
    // its getPrototypeOf trap will be called.
    while (true) {
      var vHandler2 = safeWeakMapGet(directProxies, arg);
      if (vHandler2 !== undefined) {
        arg = vHandler2.getPrototypeOf();
        if (arg === null) {
          return false;
        } else if (sameValue(arg, this)) {
          return true;
        }
      } else {
        return prim_isPrototypeOf.call(this, arg);
      }
    }
  };

  Array.isArray = function (subject) {
    var vHandler = safeWeakMapGet(directProxies, subject);
    if (vHandler !== undefined) {
      return Array.isArray(vHandler.target);
    } else {
      return prim_isArray(subject);
    }
  };

  function isProxyArray(arg) {
    var vHandler = safeWeakMapGet(directProxies, arg);
    if (vHandler !== undefined) {
      return Array.isArray(vHandler.target);
    }
    return false;
  }

  // Array.prototype.concat internally tests whether one of its
  // arguments is an Array, by checking whether [[Class]] == "Array"
  // As such, it will fail to recognize proxies-for-arrays as arrays.
  // We patch Array.prototype.concat so that it "unwraps" proxies-for-arrays
  // by making a copy. This will trigger the exact same sequence of
  // traps on the proxy-for-array as if we would not have unwrapped it.
  // See <https://github.com/tvcutsem/harmony-reflect/issues/19> for more.
  Array.prototype.concat = function () /*...args*/{
    var length;
    for (var i = 0; i < arguments.length; i++) {
      if (isProxyArray(arguments[i])) {
        length = arguments[i].length;
        arguments[i] = Array.prototype.slice.call(arguments[i], 0, length);
      }
    }
    return prim_concat.apply(this, arguments);
  };

  // setPrototypeOf support on platforms that support __proto__

  var prim_setPrototypeOf = Object.setPrototypeOf;

  // patch and extract original __proto__ setter
  var __proto__setter = function () {
    var protoDesc = prim_getOwnPropertyDescriptor(Object.prototype, '__proto__');
    if (protoDesc === undefined || typeof protoDesc.set !== "function") {
      return function () {
        throw new TypeError("setPrototypeOf not supported on this platform");
      };
    }

    // see if we can actually mutate a prototype with the generic setter
    // (e.g. Chrome v28 doesn't allow setting __proto__ via the generic setter)
    try {
      protoDesc.set.call({}, {});
    } catch (e) {
      return function () {
        throw new TypeError("setPrototypeOf not supported on this platform");
      };
    }

    prim_defineProperty(Object.prototype, '__proto__', {
      set: function set(newProto) {
        return Object.setPrototypeOf(this, Object(newProto));
      }
    });

    return protoDesc.set;
  }();

  Object.setPrototypeOf = function (target, newProto) {
    var handler = directProxies.get(target);
    if (handler !== undefined) {
      if (handler.setPrototypeOf(newProto)) {
        return target;
      } else {
        throw new TypeError("proxy rejected prototype mutation");
      }
    } else {
      if (!Object_isExtensible(target)) {
        throw new TypeError("can't set prototype on non-extensible object: " + target);
      }
      if (prim_setPrototypeOf) return prim_setPrototypeOf(target, newProto);

      if (Object(newProto) !== newProto || newProto === null) {
        throw new TypeError("Object prototype may only be an Object or null: " + newProto);
        // throw new TypeError("prototype must be an object or null")
      }
      __proto__setter.call(target, newProto);
      return target;
    }
  };

  Object.prototype.hasOwnProperty = function (name) {
    var handler = safeWeakMapGet(directProxies, this);
    if (handler !== undefined) {
      var desc = handler.getOwnPropertyDescriptor(name);
      return desc !== undefined;
    } else {
      return prim_hasOwnProperty.call(this, name);
    }
  };

  // ============= Reflection module =============
  // see http://wiki.ecmascript.org/doku.php?id=harmony:reflect_api

  var Reflect = global.Reflect = {
    getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, name) {
      return Object.getOwnPropertyDescriptor(target, name);
    },
    defineProperty: function defineProperty(target, name, desc) {

      // if target is a proxy, invoke its "defineProperty" trap
      var handler = directProxies.get(target);
      if (handler !== undefined) {
        return handler.defineProperty(target, name, desc);
      }

      // Implementation transliterated from [[DefineOwnProperty]]
      // see ES5.1 section 8.12.9
      // this is the _exact same algorithm_ as the isCompatibleDescriptor
      // algorithm defined above, except that at every place it
      // returns true, this algorithm actually does define the property.
      var current = Object.getOwnPropertyDescriptor(target, name);
      var extensible = Object.isExtensible(target);
      if (current === undefined && extensible === false) {
        return false;
      }
      if (current === undefined && extensible === true) {
        Object.defineProperty(target, name, desc); // should never fail
        return true;
      }
      if (isEmptyDescriptor(desc)) {
        return true;
      }
      if (isEquivalentDescriptor(current, desc)) {
        return true;
      }
      if (current.configurable === false) {
        if (desc.configurable === true) {
          return false;
        }
        if ('enumerable' in desc && desc.enumerable !== current.enumerable) {
          return false;
        }
      }
      if (isGenericDescriptor(desc)) {
        // no further validation necessary
      } else if (isDataDescriptor(current) !== isDataDescriptor(desc)) {
        if (current.configurable === false) {
          return false;
        }
      } else if (isDataDescriptor(current) && isDataDescriptor(desc)) {
        if (current.configurable === false) {
          if (current.writable === false && desc.writable === true) {
            return false;
          }
          if (current.writable === false) {
            if ('value' in desc && !sameValue(desc.value, current.value)) {
              return false;
            }
          }
        }
      } else if (isAccessorDescriptor(current) && isAccessorDescriptor(desc)) {
        if (current.configurable === false) {
          if ('set' in desc && !sameValue(desc.set, current.set)) {
            return false;
          }
          if ('get' in desc && !sameValue(desc.get, current.get)) {
            return false;
          }
        }
      }
      Object.defineProperty(target, name, desc); // should never fail
      return true;
    },
    deleteProperty: function deleteProperty(target, name) {
      var handler = directProxies.get(target);
      if (handler !== undefined) {
        return handler.delete(name);
      }

      var desc = Object.getOwnPropertyDescriptor(target, name);
      if (desc === undefined) {
        return true;
      }
      if (desc.configurable === true) {
        delete target[name];
        return true;
      }
      return false;
    },
    getPrototypeOf: function getPrototypeOf(target) {
      return Object.getPrototypeOf(target);
    },
    setPrototypeOf: function setPrototypeOf(target, newProto) {

      var handler = directProxies.get(target);
      if (handler !== undefined) {
        return handler.setPrototypeOf(newProto);
      }

      if (Object(newProto) !== newProto || newProto === null) {
        throw new TypeError("Object prototype may only be an Object or null: " + newProto);
      }

      if (!Object_isExtensible(target)) {
        return false;
      }

      var current = Object.getPrototypeOf(target);
      if (sameValue(current, newProto)) {
        return true;
      }

      if (prim_setPrototypeOf) {
        try {
          prim_setPrototypeOf(target, newProto);
          return true;
        } catch (e) {
          return false;
        }
      }

      __proto__setter.call(target, newProto);
      return true;
    },
    preventExtensions: function preventExtensions(target) {
      var handler = directProxies.get(target);
      if (handler !== undefined) {
        return handler.preventExtensions();
      }
      prim_preventExtensions(target);
      return true;
    },
    isExtensible: function isExtensible(target) {
      return Object.isExtensible(target);
    },
    has: function has(target, name) {
      return name in target;
    },
    get: function get(target, name, receiver) {
      receiver = receiver || target;

      // if target is a proxy, invoke its "get" trap
      var handler = directProxies.get(target);
      if (handler !== undefined) {
        return handler.get(receiver, name);
      }

      var desc = Object.getOwnPropertyDescriptor(target, name);
      if (desc === undefined) {
        var proto = Object.getPrototypeOf(target);
        if (proto === null) {
          return undefined;
        }
        return Reflect.get(proto, name, receiver);
      }
      if (isDataDescriptor(desc)) {
        return desc.value;
      }
      var getter = desc.get;
      if (getter === undefined) {
        return undefined;
      }
      return desc.get.call(receiver);
    },
    // Reflect.set implementation based on latest version of [[SetP]] at
    // http://wiki.ecmascript.org/doku.php?id=harmony:proto_climbing_refactoring
    set: function set(target, name, value, receiver) {
      receiver = receiver || target;

      // if target is a proxy, invoke its "set" trap
      var handler = directProxies.get(target);
      if (handler !== undefined) {
        return handler.set(receiver, name, value);
      }

      // first, check whether target has a non-writable property
      // shadowing name on receiver
      var ownDesc = Object.getOwnPropertyDescriptor(target, name);

      if (ownDesc === undefined) {
        // name is not defined in target, search target's prototype
        var proto = Object.getPrototypeOf(target);

        if (proto !== null) {
          // continue the search in target's prototype
          return Reflect.set(proto, name, value, receiver);
        }

        // Rev16 change. Cf. https://bugs.ecmascript.org/show_bug.cgi?id=1549
        // target was the last prototype, now we know that 'name' is not shadowed
        // by an existing (accessor or data) property, so we can add the property
        // to the initial receiver object
        // (this branch will intentionally fall through to the code below)
        ownDesc = { value: undefined,
          writable: true,
          enumerable: true,
          configurable: true };
      }

      // we now know that ownDesc !== undefined
      if (isAccessorDescriptor(ownDesc)) {
        var setter = ownDesc.set;
        if (setter === undefined) return false;
        setter.call(receiver, value); // assumes Function.prototype.call
        return true;
      }
      // otherwise, isDataDescriptor(ownDesc) must be true
      if (ownDesc.writable === false) return false;
      // we found an existing writable data property on the prototype chain.
      // Now update or add the data property on the receiver, depending on
      // whether the receiver already defines the property or not.
      var existingDesc = Object.getOwnPropertyDescriptor(receiver, name);
      if (existingDesc !== undefined) {
        var updateDesc = { value: value,
          // FIXME: it should not be necessary to describe the following
          // attributes. Added to circumvent a bug in tracemonkey:
          // https://bugzilla.mozilla.org/show_bug.cgi?id=601329
          writable: existingDesc.writable,
          enumerable: existingDesc.enumerable,
          configurable: existingDesc.configurable };
        Object.defineProperty(receiver, name, updateDesc);
        return true;
      } else {
        if (!Object.isExtensible(receiver)) return false;
        var newDesc = { value: value,
          writable: true,
          enumerable: true,
          configurable: true };
        Object.defineProperty(receiver, name, newDesc);
        return true;
      }
    },
    /*invoke: function(target, name, args, receiver) {
      receiver = receiver || target;
       var handler = directProxies.get(target);
      if (handler !== undefined) {
        return handler.invoke(receiver, name, args);
      }
       var fun = Reflect.get(target, name, receiver);
      return Function.prototype.apply.call(fun, receiver, args);
    },*/
    enumerate: function enumerate(target) {
      var handler = directProxies.get(target);
      var result;
      if (handler !== undefined) {
        // handler.enumerate should return an iterator directly, but the
        // iterator gets converted to an array for backward-compat reasons,
        // so we must re-iterate over the array
        result = handler.enumerate(handler.target);
      } else {
        result = [];
        for (var name in target) {
          result.push(name);
        };
      }
      var l = +result.length;
      var idx = 0;
      return {
        next: function next() {
          if (idx === l) return { done: true };
          return { done: false, value: result[idx++] };
        }
      };
    },
    // imperfect ownKeys implementation: in ES6, should also include
    // symbol-keyed properties.
    ownKeys: function ownKeys(target) {
      return Object_getOwnPropertyNames(target);
    },
    apply: function apply(target, receiver, args) {
      // target.apply(receiver, args)
      return Function.prototype.apply.call(target, receiver, args);
    },
    construct: function construct(target, args, newTarget) {
      // return new target(...args);

      // if target is a proxy, invoke its "construct" trap
      var handler = directProxies.get(target);
      if (handler !== undefined) {
        return handler.construct(handler.target, args, newTarget);
      }

      if (typeof target !== "function") {
        throw new TypeError("target is not a function: " + target);
      }
      if (newTarget === undefined) {
        newTarget = target;
      } else {
        if (typeof newTarget !== "function") {
          throw new TypeError("newTarget is not a function: " + target);
        }
      }

      return new (Function.prototype.bind.apply(newTarget, [null].concat(args)))();
    }
  };

  // feature-test whether the Proxy global exists, with
  // the harmony-era Proxy.create API
  if (typeof Proxy !== "undefined" && typeof Proxy.create !== "undefined") {

    var primCreate = Proxy.create,
        primCreateFunction = Proxy.createFunction;

    var revokedHandler = primCreate({
      get: function get() {
        throw new TypeError("proxy is revoked");
      }
    });

    global.Proxy = function (target, handler) {
      // check that target is an Object
      if (Object(target) !== target) {
        throw new TypeError("Proxy target must be an Object, given " + target);
      }
      // check that handler is an Object
      if (Object(handler) !== handler) {
        throw new TypeError("Proxy handler must be an Object, given " + handler);
      }

      var vHandler = new Validator(target, handler);
      var proxy;
      if (typeof target === "function") {
        proxy = primCreateFunction(vHandler,
        // call trap
        function () {
          var args = Array.prototype.slice.call(arguments);
          return vHandler.apply(target, this, args);
        },
        // construct trap
        function () {
          var args = Array.prototype.slice.call(arguments);
          return vHandler.construct(target, args);
        });
      } else {
        proxy = primCreate(vHandler, Object.getPrototypeOf(target));
      }
      directProxies.set(proxy, vHandler);
      return proxy;
    };

    global.Proxy.revocable = function (target, handler) {
      var proxy = new Proxy(target, handler);
      var revoke = function revoke() {
        var vHandler = directProxies.get(proxy);
        if (vHandler !== null) {
          vHandler.target = null;
          vHandler.handler = revokedHandler;
        }
        return undefined;
      };
      return { proxy: proxy, revoke: revoke };
    };

    // add the old Proxy.create and Proxy.createFunction methods
    // so old code that still depends on the harmony-era Proxy object
    // is not broken. Also ensures that multiple versions of this
    // library should load fine
    global.Proxy.create = primCreate;
    global.Proxy.createFunction = primCreateFunction;
  } else {
    // Proxy global not defined, or old API not available
    if (typeof Proxy === "undefined") {
      // Proxy global not defined, add a Proxy function stub
      global.Proxy = function (_target, _handler) {
        throw new Error("proxies not supported on this platform. On v8/node/iojs, make sure to pass the --harmony_proxies flag");
      };
    }
    // Proxy global defined but old API not available
    // presumably Proxy global already supports new API, leave untouched
  }

  // for node.js modules, export every property in the Reflect object
  // as part of the module interface
  if (typeof exports !== 'undefined') {
    Object.keys(Reflect).forEach(function (key) {
      exports[key] = Reflect[key];
    });
  }

  // function-as-module pattern
}(typeof exports !== 'undefined' ? global : undefined);

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],3:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
// d3.tip
// Copyright (c) 2013 Justin Palmer
// ES6 / D3 v4 Adaption Copyright (c) 2016 Constantin Gavrilete
// Removal of ES6 for D3 v4 Adaption Copyright (c) 2016 David Gotz
//
// Tooltips for d3.js SVG visualizations

var d3Tip = exports.d3Tip = function () {
  d3.functor = function functor(v) {
    return typeof v === "function" ? v : function () {
      return v;
    };
  };

  d3.tip = function () {

    var direction = d3_tip_direction,
        offset = d3_tip_offset,
        html = d3_tip_html,
        node = initNode(),
        svg = null,
        point = null,
        target = null;

    function tip(vis) {
      svg = getSVGNode(vis);
      point = svg.createSVGPoint();
      document.body.appendChild(node);
    }

    // Public - show the tooltip on the screen
    //
    // Returns a tip
    tip.show = function () {
      var args = Array.prototype.slice.call(arguments);
      if (args[args.length - 1] instanceof SVGElement) target = args.pop();
      var content = html.apply(this, args),
          poffset = offset.apply(this, args),
          dir = direction.apply(this, args),
          nodel = getNodeEl(),
          i = directions.length,
          coords,
          scrollTop = document.documentElement.scrollTop || document.body.scrollTop,
          scrollLeft = document.documentElement.scrollLeft || document.body.scrollLeft;

      nodel.html(content).style('position', 'absolute').style('opacity', 1).style('pointer-events', 'all');

      while (i--) {
        nodel.classed(directions[i], false);
      }coords = direction_callbacks[dir].apply(this);
      nodel.classed(dir, true).style('top', coords.top + poffset[0] + scrollTop + 'px').style('left', coords.left + poffset[1] + scrollLeft + 'px');

      return tip;
    };

    // Public - hide the tooltip
    //
    // Returns a tip
    tip.hide = function () {
      var nodel = getNodeEl();
      nodel.style('opacity', 0).style('pointer-events', 'none');
      return tip;
    };

    // Public: Proxy attr calls to the d3 tip container.  Sets or gets attribute value.
    //
    // n - name of the attribute
    // v - value of the attribute
    //
    // Returns tip or attribute value
    tip.attr = function (n, v) {
      if (arguments.length < 2 && typeof n === 'string') {
        return getNodeEl().attr(n);
      } else {
        var args = Array.prototype.slice.call(arguments);
        d3.selection.prototype.attr.apply(getNodeEl(), args);
      }

      return tip;
    };

    // Public: Proxy style calls to the d3 tip container.  Sets or gets a style value.
    //
    // n - name of the property
    // v - value of the property
    //
    // Returns tip or style property value
    tip.style = function (n, v) {
      // debugger;
      if (arguments.length < 2 && typeof n === 'string') {
        return getNodeEl().style(n);
      } else {
        var args = Array.prototype.slice.call(arguments);
        if (args.length === 1) {
          var styles = args[0];
          Object.keys(styles).forEach(function (key) {
            return d3.selection.prototype.style.apply(getNodeEl(), [key, styles[key]]);
          });
        }
      }

      return tip;
    };

    // Public: Set or get the direction of the tooltip
    //
    // v - One of n(north), s(south), e(east), or w(west), nw(northwest),
    //     sw(southwest), ne(northeast) or se(southeast)
    //
    // Returns tip or direction
    tip.direction = function (v) {
      if (!arguments.length) return direction;
      direction = v == null ? v : d3.functor(v);

      return tip;
    };

    // Public: Sets or gets the offset of the tip
    //
    // v - Array of [x, y] offset
    //
    // Returns offset or
    tip.offset = function (v) {
      if (!arguments.length) return offset;
      offset = v == null ? v : d3.functor(v);

      return tip;
    };

    // Public: sets or gets the html value of the tooltip
    //
    // v - String value of the tip
    //
    // Returns html value or tip
    tip.html = function (v) {
      if (!arguments.length) return html;
      html = v == null ? v : d3.functor(v);

      return tip;
    };

    // Public: destroys the tooltip and removes it from the DOM
    //
    // Returns a tip
    tip.destroy = function () {
      if (node) {
        getNodeEl().remove();
        node = null;
      }
      return tip;
    };

    function d3_tip_direction() {
      return 'n';
    }
    function d3_tip_offset() {
      return [0, 0];
    }
    function d3_tip_html() {
      return ' ';
    }

    var direction_callbacks = {
      n: direction_n,
      s: direction_s,
      e: direction_e,
      w: direction_w,
      nw: direction_nw,
      ne: direction_ne,
      sw: direction_sw,
      se: direction_se
    };

    var directions = Object.keys(direction_callbacks);

    function direction_n() {
      var bbox = getScreenBBox();
      return {
        top: bbox.n.y - node.offsetHeight,
        left: bbox.n.x - node.offsetWidth / 2
      };
    }

    function direction_s() {
      var bbox = getScreenBBox();
      return {
        top: bbox.s.y,
        left: bbox.s.x - node.offsetWidth / 2
      };
    }

    function direction_e() {
      var bbox = getScreenBBox();
      return {
        top: bbox.e.y - node.offsetHeight / 2,
        left: bbox.e.x
      };
    }

    function direction_w() {
      var bbox = getScreenBBox();
      return {
        top: bbox.w.y - node.offsetHeight / 2,
        left: bbox.w.x - node.offsetWidth
      };
    }

    function direction_nw() {
      var bbox = getScreenBBox();
      return {
        top: bbox.nw.y - node.offsetHeight,
        left: bbox.nw.x - node.offsetWidth
      };
    }

    function direction_ne() {
      var bbox = getScreenBBox();
      return {
        top: bbox.ne.y - node.offsetHeight,
        left: bbox.ne.x
      };
    }

    function direction_sw() {
      var bbox = getScreenBBox();
      return {
        top: bbox.sw.y,
        left: bbox.sw.x - node.offsetWidth
      };
    }

    function direction_se() {
      var bbox = getScreenBBox();
      return {
        top: bbox.se.y,
        left: bbox.e.x
      };
    }

    function initNode() {
      var node = d3.select(document.createElement('div'));
      node.style('position', 'absolute').style('top', 0).style('opacity', 0).style('pointer-events', 'none').style('box-sizing', 'border-box');

      return node.node();
    }

    function getSVGNode(el) {
      el = el.node();
      if (el.tagName.toLowerCase() === 'svg') return el;

      return el.ownerSVGElement;
    }

    function getNodeEl() {
      if (node === null) {
        node = initNode();
        // re-add node to DOM
        document.body.appendChild(node);
      };
      return d3.select(node);
    }

    // Private - gets the screen coordinates of a shape
    //
    // Given a shape on the screen, will return an SVGPoint for the directions
    // n(north), s(south), e(east), w(west), ne(northeast), se(southeast), nw(northwest),
    // sw(southwest).
    //
    //    +-+-+
    //    |   |
    //    +   +
    //    |   |
    //    +-+-+
    //
    // Returns an Object {n, s, e, w, nw, sw, ne, se}
    function getScreenBBox() {
      var targetel = target || d3.event.target;
      console.log(targetel);
      function tryBBox() {
        try {
          targetel.getBBox();
        } catch (err) {
          targetel = targetel.parentNode;
          tryBBox();
        }
      }
      tryBBox();
      while ('undefined' === typeof targetel.getScreenCTM) {
        // && 'undefined' === targetel.parentNode) {
        targetel = targetel.parentNode;
      }
      console.log(targetel);
      var bbox = {},
          matrix = targetel.getScreenCTM(),
          tbbox = targetel.getBBox(),
          width = tbbox.width,
          height = tbbox.height,
          x = tbbox.x,
          y = tbbox.y;

      point.x = x;
      point.y = y;
      bbox.nw = point.matrixTransform(matrix);
      point.x += width;
      bbox.ne = point.matrixTransform(matrix);
      point.y += height;
      bbox.se = point.matrixTransform(matrix);
      point.x -= width;
      bbox.sw = point.matrixTransform(matrix);
      point.y -= height / 2;
      bbox.w = point.matrixTransform(matrix);
      point.x += width;
      bbox.e = point.matrixTransform(matrix);
      point.x -= width / 2;
      point.y -= height / 2;
      bbox.n = point.matrixTransform(matrix);
      point.y += height;
      bbox.s = point.matrixTransform(matrix);

      return bbox;
    }

    return tip;
  };
}();

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
