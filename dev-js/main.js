(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
'use strict';

var _polyfills = require('../js-exports/polyfills');

var _d3Tip = require('../js-vendor/d3-tip');

/* exported arrayFind, d3Tip */
(function () {
  "use strict";

  var alaskaPath = "M273.716737,378.974222L273.716737,378.974222L273.716737,378.974222ZM268.905889,383.068236L268.905889,383.068236L268.905889,383.068236ZM268.860289,382.599903L268.860289,382.599903L268.860289,382.599903ZM301.381014,236.335483L303.303833,236.366706L308.04628,238.384442L308.684687,236.901386L313.092731,235.383206L314.149141,236.436956L317.082771,236.323775L317.325973,237.982456L319.583196,238.083928L321.490815,239.793345L320.297603,242.587734L320.677607,244.176165L320.350804,248.703388L316.178362,248.336526L313.662737,248.980485L312.727927,250.455735L310.622706,247.403762L308.555486,247.009582L305.97906,243.660998L303.911839,242.392595L302.125821,240.171914ZM253.933739,385.511375L253.933739,385.511375L253.933739,385.511375ZM253.067331,387.298848L255.651357,386.241195L259.139791,385.831403L260.644606,387.216889L261.685817,385.768959L264.763848,385.956292L264.216642,383.185319L266.428264,383.212639L265.843058,382.061319L268.358684,381.983264L271.079511,382.752111L267.826678,380.398736L267.089471,380.714861L265.630256,378.572236L267.233872,376.749638L272.128321,375.96518L273.671137,376.574013L272.804728,380.535333L278.094381,378.287333L278.793588,379.657208L273.899139,382.451597L273.96754,383.36875L276.331163,382.888708L276.467965,384.863514L272.386724,385.249889L271.482315,387.228598L270.805908,385.585528L270.068701,387.954514L268.98189,386.007028L268.715887,388.539931L264.665047,387.310556L258.486185,388.617987L257.414574,389.781015L253.667737,388.28625ZM252.801328,387.712542L252.801328,387.712542L252.801328,387.712542ZM254.503745,372.866374L254.503745,372.866374L254.503745,372.866374ZM325.344053,128.700763L325.344053,128.700763L325.344053,128.700763ZM329.539295,113.522859L331.272113,112.188108L337.709377,110.607483L346.251863,106.915455L356.534765,103.453691L361.216412,102.329691L368.512485,101.385218L373.391734,102.21651L375.01055,102.977552L372.578526,106.259788L372.107321,109.40933L370.883709,110.576261L371.590516,113.913136L377.624976,115.731831L380.923409,115.591331L381.865819,117.175859L384.161042,117.854942L386.562666,117.12122L389.336693,120.095137L389.222692,118.514512L392.597126,114.38147L394.641546,115.283011L397.673977,115.501567L396.716367,112.894511L393.357134,110.876775L389.777498,111.313886L390.757908,108.277525L388.721087,102.977552L386.167462,101.51401L385.658257,98.547898L387.467075,96.705787L388.645086,97.084357L389.883899,100.780288L390.719907,101.357899L389.648296,104.335719L390.514705,106.661774L393.212732,109.869858L395.614356,109.393719L394.390744,108.058969L391.601516,103.004871L393.151932,99.355774L396.184362,97.896135L393.205132,95.492023L387.277073,96.05012L385.422654,94.094829L382.922229,93.841148L377.632576,91.120912L377.556576,87.588897L376.842168,80.466327L375.831358,78.089535L373.330933,75.330271L368.193282,66.962714L364.203242,63.914645L362.128421,59.477186L357.902779,56.468144L361.923219,55.765644L363.808038,53.053213L365.852459,45.907226L370.108501,47.671282L373.216932,48.27231L382.283823,48.654782L385.01225,47.749337L388.531085,45.450601L392.110721,41.688323L393.205132,39.592531L394.284343,34.655516L395.97916,31.170335L403.130831,23.353071L407.196872,20.956765L410.373704,22.353959L413.497335,22.139307L417.897779,20.105959L420.869409,17.850153L425.915859,13.268292L429.769098,11.980375L430.0047,13.358056L428.233882,13.393181L429.761498,14.685L431.182712,14.005917L433.272733,14.560111L438.212782,14.15032L440.310403,13.377569L444.353644,10.235833L448.541285,4.799263L450.479305,3.484027L450.600906,4.810971L453.830938,6.446235L454.644146,7.738055L457.471375,8.549833L457.440974,10.899305L455.882959,12.557986L453.709337,12.897528L454.03614,15.781681L456.483365,16.285139L457.448574,13.623444L459.515795,12.116972L461.142211,9.080611L464.577446,12.901431L464.387444,16.975931L466.04426,16.89007L467.199472,18.404348L469.160292,16.031459L472.762728,16.04707L474.434744,15.360181L479.465995,16.452959L482.103221,17.815028L480.074001,20.874806L480.431204,23.719932L483.220432,24.340473L485.766458,24.160946L484.504845,27.021682L486.860869,26.885085L490.128901,28.379849L491.671717,26.514321L495.821358,26.557252L496.224162,27.724182L498.169782,27.267557L500.069801,25.382515L503.170632,25.242015L505.488655,25.878168L507.077071,27.326099L509.949899,27.817849L511.04431,29.796557L513.491535,29.16821L517.147171,32.227988L521.175212,33.152947L526.259663,32.060169L531.404914,33.113919L531.480915,32.368488L534.938949,35.069211L539.202592,36.43128L541.368614,36.158086L542.668227,34.452572L549.515895,31.271808L551.636316,30.838599L557.04757,33.512002L559.03879,35.201905L564.609646,37.668461L567.216472,39.455934L568.120881,40.9546L569.283693,39.615947L570.96331,40.224781L601.523215,254.237527L607.261273,255.408361L607.664077,253.285249L613.508535,255.326402L616.198962,251.306541L623.092231,249.737624L622.735027,255.989875L624.749047,257.831986L629.04309,259.147222L630.540305,262.109431L644.524445,271.780515L647.891279,278.961627L649.601296,276.43653L653.97134,271.858571L656.775768,271.105335L657.497775,268.139223L656.517365,264.064723L658.500985,263.662736L658.774588,261.360097L657.307773,260.739556L661.601816,258.265194L666.207462,254.03068L669.521095,255.669847L672.561126,258.085666L672.469925,261.336681L673.95954,261.937709L674.856349,264.252056L678.02558,264.224737L678.580386,265.434598L681.172012,266.234667L682.859229,268.018237L682.904829,269.423237L685.397654,271.67514L690.900109,273.353335L693.240932,275.605238L698.051781,278.555738L697.314573,279.769502L702.087421,284.152322L704.177442,287.16917L707.589876,289.971364L713.388734,296.449976L716.656767,299.232657L718.97479,301.859227L718.267983,304.922908L722.486025,304.821436L722.630426,308.884228L726.141661,309.496964L726.111261,310.745853L727.920079,313.9032L730.937309,312.66602L732.829728,313.665131L738.385384,315.366742L742.375424,315.070131L745.02025,316.631242L747.102671,316.588312L748.333883,318.648979L750.857109,318.894854L752.422724,317.770854L754.474745,319.866646L755.181552,322.06391L754.353144,325.713007L755.96436,329.666522L760,335.575328L759.04999,337.897481L758.837188,341.171912L757.909979,344.914676L754.892749,350.74933L753.608336,349.012593L752.415124,350.507357L751.130711,349.945357L748.447884,343.962398L746.464265,342.02662L747.862679,338.974648L748.797488,338.849759L747.110271,336.137328L747.163472,334.34205L745.506655,330.02948L739.616596,325.006604L739.228992,325.556896L742.413424,327.945396L744.769448,330.52123L746.669467,337.261328L745.795458,337.24962L746.388264,340.403065L745.309053,342.381773L743.135431,341.753426L743.96384,340.496731L743.796638,338.053592L742.694627,341.554384L739.9966,341.546579L737.708977,340.758217L738.681787,343.59944L738.362584,345.991843L737.04017,344.727343L735.254153,340.83237L736.796968,335.083578L735.573356,334.708911L734.410544,330.232425L736.599366,329.615786L734.919749,327.605855L733.551736,329.483091L731.773318,330.209008L733.772138,330.712466L734.144541,334.314731L733.171732,336.445647L733.369334,338.646814L730.0481,337.440856L728.801688,335.130411L728.672487,332.695078L730.0329,332.144786L729.470495,328.725952L730.435704,328.136633L728.96889,323.781132L731.317313,321.876576L729.105691,322.24734L727.122071,327.059466L728.528085,329.358202L727.395674,329.299661L726.179662,331.325202L724.659647,330.400244L723.610836,328.019549L721.528415,329.264536L719.468795,325.498355L720.753208,324.557785L721.02681,322.110743L722.106021,321.466785L723.284033,323.866993L725.533655,324.31191L723.405634,322.762507L723.056031,320.147646L721.794418,318.430423L724.218842,318.379687L721.938819,317.345451L721.733617,314.77352L719.978,316.096562L718.769588,315.831173L718.480785,313.052395L714.703547,311.850339L711.777518,309.075464L713.677537,308.232464L709.702697,307.518255L706.928669,307.69388L703.531435,306.819658L703.121031,305.059505L706.98947,302.815408L703.554236,302.710033L703.645436,301.515782L701.97342,300.243477L701.889819,297.675449L701.00821,298.452102L699.267793,297.335907L699.100591,295.283046L702.566226,295.76699L705.545455,296.773907L700.271003,293.893657L699.556596,294.088795L698.758588,290.599712L698.773788,293.663393L697.854179,293.733643L694.715347,290.314809L692.252923,288.85517L690.664507,284.078169L691.796918,282.883919L690.444104,281.229141L689.805698,283.691794L690.337703,286.041267L688.270483,286.704739L684.941649,286.696934L683.368434,285.405114L683.421634,283.399086L682.152422,283.520072L681.065611,281.455502L674.917149,274.297807L673.131131,269.493487L670.197502,265.649251L669.384294,261.60207L669.665497,266.722515L668.107481,266.722515L670.97271,269.411529L671.428714,272.346418L676.315563,279.535335L675.563156,279.59778L679.127591,286.384711L679.507595,288.761503L676.277563,288.421961L673.161532,283.566905L673.685937,285.955406L671.732717,285.229489L668.457085,287.079406L668.206282,285.065572L666.785068,282.922947L667.142271,281.517947L664.284643,277.825919L664.945849,276.897057L662.627826,274.208043L663.798238,276.678502L663.798238,279.363613L662.605026,279.531433L659.435794,278.23571L657.908179,275.741835L657.558576,277.431738L651.698917,274.988599L653.97894,277.131224L652.96813,278.060085L656.274163,277.993738L658.668187,278.571349L659.291393,279.988058L662.308623,281.549169L665.629856,284.554308L667.066271,287.567253L663.403034,290.084545L660.165402,290.065031L661.396614,291.797865L660.157802,292.863323L656.904969,290.463115L656.882169,289.471809L653.484935,289.233739L646.477665,286.025656L646.219262,285.108503L642.784028,282.907336L642.206422,280.756905L638.071981,277.857141L633.375134,276.725335L629.696697,274.715404L624.209442,273.095751L617.513775,269.961821L619.383394,268.76757L620.941409,265.18482L618.790588,262.327986L618.570186,261.043972L619.793798,258.671083L619.140191,257.703194L617.460575,260.82932L617.103371,263.057806L611.441314,267.077667L604.646846,266.944973L597.783978,264.564278L599.448394,263.26075L598.239982,259.826306L595.671157,258.393986L598.201982,261.059583L595.853559,263.042195L584.719447,261.60207L580.455805,261.941611L572.407324,263.99057L569.374894,265.520459L565.179652,265.036514L567.588876,264.357431L564.427244,262.30457L565.096051,261.399125L562.352424,262.007959L557.305973,261.133736L559.205992,260.068278L556.492765,259.162833L558.01278,255.502027L555.732757,256.825069L554.699147,259.596042L553.619936,259.564819L549.097891,256.524555L544.887449,256.341125L546.711467,254.932222L548.383484,251.50168L545.95146,252.922291L544.203442,252.945708L544.925449,250.916263L542.554226,252.664707L541.155812,252.336874L543.435834,250.186443L537.142971,251.833416L536.223362,250.678193L540.251403,249.19904L541.99182,247.704276L541.171012,246.986165L539.430594,248.676068L537.614176,248.644846L535.577356,246.646623L537.196172,246.139262L535.706557,245.307971L536.656567,242.564317L540.608606,242.298929L538.890989,241.256887L536.344963,242.010123L533.418934,246.002665L531.473315,241.151512L531.556916,244.332276L530.705707,246.34611L526.852469,247.411568L526.449664,245.651415L527.110871,243.317554L526.343263,241.82279L525.590856,245.811429L525.96326,248.441901L524.382444,247.493526L524.352044,249.386374L519.898399,249.870318L520.270803,247.208624L521.95802,244.753776L521.889619,243.461956L523.865639,240.761234L524.154442,238.708373L520.362004,245.046484L519.297993,242.536998L516.447964,245.647512L519.411994,243.563429L518.051581,249.046832L515.99196,249.737624L513.97794,251.884152L513.901939,253.499902L515.847558,250.635263L517.466375,250.646971L516.767168,254.139958L518.515185,250.826499L520.400004,251.240193L520.605206,252.988638L518.04398,256.20843L516.257963,255.158583L513.628336,257.82418L516.523965,255.794736L518.735587,257.113875L520.734407,254.491208L522.505225,258.101278L518.02878,262.663625L520.217602,262.819736L520.97761,265.945862L519.02439,268.053362L518.697587,264.458903L517.98318,264.52525L517.00277,269.688626L515.839958,267.682598L515.02675,270.235015L513.514335,269.434945L509.129091,269.325668L510.094301,267.464042L508.612286,267.889445L507.107471,271.046793L506.263863,265.742917L505.481055,265.91464L506.058661,268.646584L504.409444,270.348196L503.375834,272.822557L502.99583,270.570654L501.99262,269.875959L501.848218,272.724988L500.503005,271.963946L502.243422,275.546696L499.834198,274.812974L499.796198,276.221877L498.00258,276.64728L496.604166,279.644613L495.874559,279.441669L494.99295,282.033114L494.278543,281.010586L496.421764,274.465627L493.404534,281.057419L491.808518,279.203599L491.907319,281.857489L490.349303,281.822364L487.324473,286.181767L484.337643,286.829628L482.316023,285.502683L480.370404,287.426753L478.584386,287.785809L475.650757,285.432433L476.365164,283.032225L477.824378,283.106378L477.01877,281.556975L479.655997,280.214419L482.240022,280.756905L481.761218,279.847558L485.948859,275.972099L488.251683,273.271376L486.359264,273.400168L481.609216,276.838516L479.861199,276.43653L477.261973,273.513349L479.199992,268.096293L483.04563,262.648014L483.281233,260.048764L484.246442,259.373583L484.687247,255.814249L483.129231,251.767068L487.636076,249.800068L491.428514,246.408554L494.810548,244.570345L496.847368,247.762818L498.770188,248.164804L500.655007,246.236832L502.98823,247.235943L508.331083,248.036013L510.200702,249.288804L508.01188,246.712971L506.157462,247.157887L504.667847,245.854359L501.901419,245.046484L498.291383,241.994512L499.818998,240.706595L502.099021,236.870164L505.389854,234.9539L502.942629,234.216275L500.320603,236.635997L499.180592,239.996289L496.748567,239.485025L493.822538,239.812859L492.910529,238.649831L488.563286,240.573901L486.02486,244.285443L482.399624,245.007457L479.161992,248.055526L479.655997,251.915374L478.189182,251.29093L475.901559,252.941805L475.240352,254.463888L472.519525,257.164611L473.484735,259.065264L469.737897,262.83925L466.317863,262.79632L469.403494,266.172223L467.685877,269.926696L466.492665,270.687737L463.870639,270.441862L461.499415,271.60489L464.303843,272.139571L463.505835,274.754432L460.0098,276.280418L459.112991,272.697668L458.588586,275.507668L457.098971,277.685419L454.826548,278.231808L455.259753,280.327599L453.177332,280.612502L450.798508,282.158002L449.704097,285.912475L449.780098,289.538156L451.117711,288.402448L455.054551,288.6171L456.088161,290.283587L457.539775,290.521656L459.310593,292.32474L457.820978,297.078324L455.799358,298.865796L452.158922,299.252171L451.528115,301.800685L450.076501,301.828005L449.9549,304.926811L448.351284,304.755088L446.139661,306.42938L448.609686,305.758102L448.267683,308.478339L446.101661,309.254992L446.322063,310.859033L444.536045,308.67738L444.665247,310.581936L443.092031,312.123534L441.237612,311.366395L439.155192,311.7957L436.221562,313.391937L436.487565,315.093548L433.363934,315.85459L433.531135,318.278215L432.353124,318.641173L430.650707,316.568798L429.389094,318.38359L429.784298,319.460757L427.922279,319.921284L427.808278,321.970243L424.03104,321.131146L424.00824,324.144091L422.161422,322.860076L417.152972,326.825299L419.660997,326.247688L418.802188,328.538619L419.790198,329.428452L418.00418,331.664744L415.754558,332.351633L416.286563,333.928355L414.394144,332.308703L412.706927,335.3958L412.098921,333.75273L407.660477,337.901384L405.616056,335.407508L404.430444,335.926578L405.144851,337.413536L403.594436,337.561842L403.602036,340.824565L401.306813,340.684065L400.638006,339.122953L398.335183,339.556162L395.196352,341.718301L399.02679,341.445106L398.152782,343.517482L395.105151,341.987593L395.089951,343.369176L392.612326,342.557398L389.9751,344.72344L393.623136,347.127551L392.065121,348.196913L389.693897,353.524205L388.698287,353.62958L388.03708,350.589316L386.919869,350.491746L387.04147,353.204177L384.503045,352.310441L383.347833,354.136941L377.617376,354.460872L376.636966,356.162483L375.816158,353.688122L374.364544,359.233969L372.206122,358.734414L373.642536,355.030677L371.430914,354.035469L370.678507,355.499011L369.515695,354.577955L367.828478,357.177205L363.625636,358.441705L360.760408,361.165845L360.372804,358.047525L359.088391,361.115109L357.302373,361.005831L355.660757,359.448622L354.649946,360.91997L351.131111,362.25472L349.9987,361.407817L347.741477,361.528803L348.600286,358.664164L350.553506,356.65033L350.340703,355.803427L347.346273,355.713664L345.879459,357.466011L345.522255,360.112095L341.881819,364.069512L340.392204,363.050887L341.04581,365.790637L339.388994,366.696081L338.089381,364.545651L337.473775,366.660956L334.540145,366.696081L333.430534,364.510526L335.00375,364.822748L334.137341,361.497581L332.404524,360.041845L331.279713,361.856636L332.678127,363.753387L332.00172,364.580776L331.895319,367.788859L327.897679,367.632748L326.263663,363.23822L324.698047,363.132845L323.95324,364.60029L325.853259,366.340929L323.03363,368.776262L321.080411,369.072873L322.676427,365.778929L323.254033,362.539623L326.423264,361.532706L329.151692,362.145442L328.96929,360.47115L333.02013,358.523664L334.920149,358.402678L334.03854,356.755705L339.229392,352.345566L346.01626,348.833066L353.243932,348.001774L355.615156,349.379454L358.548785,348.715982L356.314363,350.163913L357.98638,354.269636L360.289203,354.937011L359.04279,353.637385L359.03519,351.315232L362.789628,352.454844L362.820028,354.062788L365.556056,355.151663L366.186862,353.707635L362.03722,349.644843L363.473635,347.935427L366.202062,343.275509L373.946539,338.37362L377.571776,337.2223L384.693047,333.940064L385.98506,332.956564L387.869879,334.896244L389.503895,334.732328L389.329093,331.57498L391.867519,327.582438L395.272353,324.222146L398.243982,323.039604L400.486005,320.619882L403.579236,318.887048L405.061251,320.093007L404.924449,318.020631L403.746437,317.798173L406.459665,306.632325L408.496485,305.562963L407.531275,302.991033L407.865679,300.302018L409.180492,297.76131L410.677707,296.965143L414.508145,293.58924L416.157362,287.481392L414.553746,289.815253L411.521315,290.431892L402.02122,294.096601L400.364404,294.108309L399.110391,292.843809L398.806388,290.724601L396.784768,289.245448L398.350384,284.925072L396.526365,286.654003L394.618746,287.188684L393.721937,290.420184L392.802328,290.463115L393.569936,295.688935L392.703527,297.894004L389.595096,297.082226L387.254273,289.90892L385.726657,287.255031L384.00904,286.57985L384.746247,284.562114L383.233832,284.460642L382.200222,287.102822L380.763808,287.575059L379.9506,285.026544L377.168972,284.382586L377.419774,281.927739L376.568566,279.960738L371.271313,282.977586L370.154102,284.526989L368.634086,283.239072L363.374834,285.865642L363.093631,287.235517L358.822388,288.835656L357.393574,286.946711L354.482745,286.587656L353.418734,285.768072L357.583576,285.498781L359.080791,283.118086L359.369594,279.285558L357.879979,274.871516L357.515175,272.061515L359.179592,269.700334L362.614826,267.546001L361.284813,264.002278L361.414014,262.530931L360.046,258.581319L359.947199,256.415277L357.887579,250.877235L356.276363,251.509485L355.113551,254.737083L353.160332,254.108735L352.461125,254.951736L348.402684,256.204527L344.085841,256.544069L338.195782,255.263958L336.409764,254.03068L335.97656,251.525096L337.268573,251.216777L334.806148,248.129679L334.213342,245.503109L332.830128,243.629776L332.852929,242.201359L330.97571,241.912553L328.361284,237.86147L330.641306,236.893581L329.774898,235.843733L328.03448,236.542331L326.104061,235.734456L327.373274,234.536303L331.781318,232.0034L331.393714,230.465705L333.559736,229.626608L332.852929,228.065496L330.831308,226.949302L331.735717,225.111093L333.620536,225.306232L332.03212,223.678774L330.656507,220.907801L329.372094,222.917732L327.03887,221.715676L327.236472,218.929093L328.064881,217.672398L325.268053,216.048842L325.351654,213.886703L327.517675,212.817342L326.142061,210.912786L323.436434,211.189883L324.02164,208.387689L328.574086,208.450133L326.187662,206.959272L325.762058,204.551258L331.04411,205.000077L330.322103,201.655396L331.150512,199.376174L338.811388,192.152131L341.646216,190.672978L343.903439,190.544187L343.561436,187.464895L345.613456,182.559102L347.414674,180.962866L348.653487,181.212644L348.630686,178.976352L351.906319,176.943005L354.741147,177.126435L357.705177,178.984158L359.156792,181.82538L360.99601,183.858728L364.00564,183.86263L368.573286,180.958963L373.748937,175.842421L373.589336,174.472546L375.884559,175.889254L374.744547,177.337185L379.380594,177.426949L382.124221,178.094324L385.255453,177.590866L385.726657,176.470768L389.602696,172.837282L390.324703,170.636115L389.488695,164.53217L389.9599,161.97585L387.649476,157.183238L385.103451,156.086558L387.178272,153.670738L390.567906,154.982071L393.136731,152.730168L393.623136,150.450946L392.885929,147.875112L390.575506,145.049501L388.234682,148.070251L386.676667,148.382474L385.361854,147.320918L382.671427,148.839099L379.9506,148.89764L379.182992,150.111404L375.785758,151.535918L374.258143,154.677655L372.434124,155.743113L372.745727,152.129141L369.9869,147.644848L368.223682,148.624446L369.728497,150.743654L370.96731,151.106613L369.728497,153.190696L365.738457,148.675182L363.108831,147.863404L357.98638,147.23896L353.175532,148.61664L351.450315,148.468335L345.628656,144.79582L340.688607,142.259015L339.373794,140.526181L339.100191,138.149389L340.529005,135.573555L338.598586,132.037638L337.428174,127.830443L340.551806,129.231541L343.538635,126.359096L342.299823,124.610651L340.681007,124.34136L337.716977,122.167512L334.532545,120.875693L331.332913,116.648984L329.531695,115.236178ZM243.582436,392.001695L243.582436,392.001695L243.582436,392.001695ZM243.339233,390.655237L243.339233,390.655237L243.339233,390.655237ZM242.412024,392.017306L242.412024,392.017306L242.412024,392.017306ZM322.722027,108.808302L322.722027,108.808302L322.722027,108.808302ZM232.866329,392.875918L234.903149,392.313918L235.746757,391.033806L237.274373,391.096251L237.555576,389.722473L239.349193,388.481389L239.455595,386.834417L242.609626,385.113292L246.158862,386.409014L245.406454,384.726917L246.356464,382.685764L249.343293,381.058305L252.618926,381.101236L255.210552,382.927736L253.690537,385.698709L249.366094,387.04907L247.01767,387.177861L242.602026,390.780126L238.459985,391.392862ZM230.525505,393.551098L230.525505,393.551098L230.525505,393.551098ZM225.258653,386.647084L225.258653,386.647084L225.258653,386.647084ZM250.430104,307.463616L254.199742,309.102783L252.413724,310.090186ZM225.296653,384.863514L225.296653,384.863514L225.296653,384.863514ZM220.873409,388.832639L221.367414,388.376014L225.372654,389.031681L224.156642,391.26407L222.902629,389.589778L221.238212,390.011278ZM219.870199,386.873445L219.870199,386.873445L219.870199,386.873445ZM217.787778,390.389848L218.418584,389.125348L219.877799,390.003473ZM246.706067,293.007726L248.537685,292.231073L250.620106,292.750143L248.537685,294.131726ZM207.740477,390.932334L208.591686,389.449278L211.160512,388.746778L212.330923,389.769306L211.190912,391.135279ZM203.241232,389.363417L203.241232,389.363417L203.241232,389.363417ZM200.794008,390.436681L200.794008,390.436681L200.794008,390.436681ZM279.04439,149.709418L281.476415,146.247654L282.388424,143.605473L282.692427,145.966654L284.774848,148.22246L288.833288,151.028557L291.99492,149.799182L295.627756,150.509488L296.96537,153.405349L296.668967,155.860197L300.013,158.221377L301.122611,160.239114L306.883469,162.772017L308.502285,163.989684L307.757478,165.484448L305.667457,166.889448L302.475425,165.195642L300.719807,165.250281L297.877379,167.275823L296.608166,169.086712L295.756958,165.433712L293.537735,162.089031L291.96452,161.491906L292.02532,159.251711L290.497705,156.757836L287.99728,154.611308L285.747657,153.670738L281.613216,155.025002L279.181192,152.753585ZM181.451815,388.571153L182.774228,387.209084L185.419054,387.127125L186.361464,388.973139L182.561426,389.574167ZM175.364154,391.135279L175.364154,391.135279L175.364154,391.135279ZM242.784428,209.898064L245.224052,208.290119L244.730047,210.639592L247.481275,214.61262L249.115291,215.162912L250.285703,217.364079L246.234862,215.779551L243.97004,210.990842ZM243.483635,206.237258L243.483635,206.237258L243.483635,206.237258ZM161.250813,384.21175L163.158432,385.43332L167.133271,386.014834L170.264503,388.707751L171.533715,388.754584L175.744157,390.678654L172.780128,390.432779L168.265683,389.051195L165.696857,387.54082L162.246422,386.498778ZM154.327143,384.309319L154.327143,384.309319L154.327143,384.309319ZM153.559536,380.18018L153.559536,380.18018L153.559536,380.18018ZM147.608676,376.285207L147.608676,376.285207L147.608676,376.285207ZM143.162632,379.426944L149.820298,379.953819L151.264313,381.354916L156.781968,381.491514L159.9816,380.13725L157.458375,378.474666L161.912019,377.475555L163.766438,379.57525L161.919619,382.190111L159.905599,381.635916L160.893609,384.086861L158.742787,384.121986L157.488775,382.923833L153.878739,383.513153L151.097111,383.122875L149.561896,381.620305L144.735847,380.519722ZM140.692607,379.497194L140.692607,379.497194L140.692607,379.497194ZM142.053021,375.126082L142.053021,375.126082L142.053021,375.126082ZM137.173772,378.642486L137.173772,378.642486L137.173772,378.642486ZM135.349753,378.060972L135.349753,378.060972L135.349753,378.060972ZM134.612546,376.730124L134.612546,376.730124L134.612546,376.730124ZM133.624536,376.874527L133.624536,376.874527L133.624536,376.874527ZM132.894929,377.241388L132.894929,377.241388L132.894929,377.241388ZM132.134921,376.858916L132.134921,376.858916L132.134921,376.858916ZM131.671317,377.846319L133.563736,378.076583L133.320533,379.598666ZM132.066521,376.269596L132.066521,376.269596L132.066521,376.269596ZM131.564916,376.250082L131.564916,376.250082L131.564916,376.250082ZM131.97532,373.670346L133.320533,372.870277L134.817748,374.731902L133.616936,376.534985L131.732117,375.102666ZM129.558496,378.384902L131.055711,379.067888L130.0297,380.082611ZM117.664377,378.049263L123.060431,374.177707L123.721637,372.409749L126.807268,373.096638L125.97126,374.860693L124.420844,375.500749L125.819258,376.776958L129.239292,377.456041L127.582476,379.848444L125.614056,378.701027L123.106031,379.309861L121.669617,378.595652L119.913999,379.563541L120.681607,377.143819L117.97598,379.142041ZM113.99354,369.506082L113.99354,369.506082L113.99354,369.506082ZM108.97749,372.105332L111.645116,372.901499L116.569966,372.862471L117.793578,370.567637L119.207192,371.246721L116.334363,375.535874L114.343143,375.30561L113.712337,373.654735ZM103.779038,365.37304L105.496655,365.154484L107.738677,366.317512L108.103481,368.631859L110.740707,370.181262L108.278283,369.720735L105.055851,371.921901L103.657437,369.556818L105.663857,370.274929ZM98.800988,372.983457L98.800988,372.983457L98.800988,372.983457ZM95.054151,368.11279L95.054151,368.11279L95.054151,368.11279ZM92.500525,367.539081L92.500525,367.539081L92.500525,367.539081ZM94.468945,363.206998L95.943359,362.684025L95.715357,364.57297ZM88.746087,370.516901L88.746087,370.516901L88.746087,370.516901ZM88.145681,370.996943L88.145681,370.996943L88.145681,370.996943ZM90.0229,366.052123L90.0229,366.052123L90.0229,366.052123ZM85.668057,371.914096L85.668057,371.914096L85.668057,371.914096ZM502.311823,276.292127L502.311823,276.292127L502.311823,276.292127ZM502.258623,270.664321L502.258623,270.664321L502.258623,270.664321ZM501.126211,24.008737L501.126211,24.008737L501.126211,24.008737ZM502.182622,275.91746L502.182622,275.91746L502.182622,275.91746ZM500.814608,276.054057L500.814608,276.054057L500.814608,276.054057ZM495.836558,242.544804L495.836558,242.544804L495.836558,242.544804ZM493.845338,283.075155L493.845338,283.075155L493.845338,283.075155ZM490.774908,281.888711L490.774908,281.888711L490.774908,281.888711ZM489.885699,284.242086L491.512115,282.216544L490.516505,284.948489ZM488.259283,284.538697L488.259283,284.538697L488.259283,284.538697ZM482.407224,286.0881L482.407224,286.0881L482.407224,286.0881ZM481.723217,278.969433L481.723217,278.969433L481.723217,278.969433ZM481.259613,279.383127L481.259613,279.383127L481.259613,279.383127ZM480.902409,288.027781L480.902409,288.027781L480.902409,288.027781ZM481.077211,279.726572L481.077211,279.726572L481.077211,279.726572ZM485.804458,25.612779L485.804458,25.612779L485.804458,25.612779ZM478.546385,288.695156L478.546385,288.695156L478.546385,288.695156ZM485.606856,25.089807L485.606856,25.089807L485.606856,25.089807ZM476.714767,287.719461L476.714767,287.719461L476.714767,287.719461ZM476.783168,282.743419L476.783168,282.743419L476.783168,282.743419ZM475.901559,309.785769L475.901559,309.785769L475.901559,309.785769ZM484.238842,23.610654L484.238842,23.610654L484.238842,23.610654ZM483.714437,23.485765L483.714437,23.485765L483.714437,23.485765ZM474.867949,293.218476L474.867949,293.218476L474.867949,293.218476ZM474.525945,293.839018L474.525945,293.839018L474.525945,293.839018ZM474.229542,293.015531L474.229542,293.015531L474.229542,293.015531ZM475.209952,260.236097L476.083961,259.642875L477.163172,256.356736L478.173982,257.125583ZM473.256733,291.90324L473.256733,291.90324L473.256733,291.90324ZM472.443524,293.608754L472.443524,293.608754L472.443524,293.608754ZM470.475105,319.800298L470.475105,319.800298L470.475105,319.800298ZM470.0495,328.784494L470.0495,328.784494L470.0495,328.784494ZM480.97841,22.990112L480.97841,22.990112L480.97841,22.990112ZM470.870309,293.07017L470.870309,293.07017L470.870309,293.07017ZM469.897499,319.160243L469.897499,319.160243L469.897499,319.160243ZM470.171102,302.46806L470.171102,302.46806L470.171102,302.46806ZM468.521885,314.539353L468.521885,314.539353L468.521885,314.539353ZM468.233082,299.252171L468.233082,299.252171L468.233082,299.252171ZM468.704287,264.13107L468.704287,264.13107L468.704287,264.13107ZM467.784678,262.72607L467.784678,262.72607L467.784678,262.72607ZM477.436774,16.039264L477.436774,16.039264L477.436774,16.039264ZM463.878239,314.874992L465.618656,314.277867L464.835848,315.749215ZM464.341843,271.35121L464.341843,271.35121L464.341843,271.35121ZM458.634186,290.455309L458.634186,290.455309L458.634186,290.455309ZM457.167372,312.154756L460.321403,308.724214L462.373424,308.716408L461.99342,306.757214L463.536235,307.565089L463.870639,305.93763L465.337453,306.636227L464.03024,304.53263L466.811868,302.944199L466.804268,300.906949L468.03548,299.771241L471.128711,299.685379L469.905099,302.74906L468.331883,304.575561L469.9583,306.281075L471.341513,304.423352L473.705137,307.182616L474.898349,306.171797L475.103551,308.361255L473.575936,310.734145L470.877909,308.626644L471.364314,311.108811L467.587076,311.616172L463.536235,314.582284ZM458.869789,275.882335L458.869789,275.882335L458.869789,275.882335ZM455.259753,315.031103L455.259753,315.031103L455.259753,315.031103ZM455.920959,299.697088L455.920959,299.697088L455.920959,299.697088ZM456.95457,281.806752L458.846988,281.022294L459.698197,282.384364L457.630976,283.118086ZM453.222932,338.666328L453.222932,338.666328L453.222932,338.666328ZM449.9625,342.022718L449.9625,342.022718L449.9625,342.022718ZM449.377294,342.416898L449.377294,342.416898L449.377294,342.416898ZM448.814888,342.401287L448.814888,342.401287L448.814888,342.401287ZM450.96571,304.165769L450.96571,304.165769L450.96571,304.165769ZM450.479305,302.74906L450.479305,302.74906L450.479305,302.74906ZM448.062481,336.297342L448.062481,336.297342L448.062481,336.297342ZM451.170912,281.814558L451.170912,281.814558L451.170912,281.814558ZM446.086461,343.213065L446.086461,343.213065L446.086461,343.213065ZM449.384894,289.026892L449.384894,289.026892L449.384894,289.026892ZM443.228832,346.265037L445.159252,344.676607L446.755268,344.72344L447.598876,346.315774L449.544495,346.214301L448.434884,347.467093L444.862849,347.502218ZM444.733647,310.964408L444.733647,310.964408L444.733647,310.964408ZM444.634846,311.452256L444.634846,311.452256L444.634846,311.452256ZM443.783638,311.2337L443.783638,311.2337L443.783638,311.2337ZM437.528775,348.40376L439.04879,346.331385L441.921619,344.809301L442.879229,345.972329ZM439.101991,327.414619L441.435214,323.886507L446.626066,320.670618L449.711697,321.201396L449.514095,323.613313L450.874509,324.389966L451.786518,322.785924L451.148111,321.271646L453.519335,320.975035L450.532505,320.065687L450.547705,317.587423L451.938519,316.38927L454.499745,316.151201L455.457355,318.492868L456.156562,317.11909L458.345383,318.176743L458.056581,317.068354L455.601756,315.148187L456.354164,314.207617L460.861009,317.403993L458.474585,313.938325L462.99663,315.035006L464.661047,316.13559L463.923839,317.915256L469.137491,314.757909L470.475105,316.104367L468.924689,316.334631L469.205892,318.344562L468.195082,322.220021L469.677097,321.521424L470.315503,322.910813L472.291523,322.785924L470.482705,325.268091L469.836698,327.426327L467.640276,327.082883L464.949849,325.342243L462.692627,325.311021L466.545865,328.187369L465.246252,330.513425L463.802238,330.763202L462.859829,328.936702L460.245402,329.580661L462.175822,330.849063L460.481005,331.848175L458.854589,331.567175L459.264993,333.046328L462.00862,332.484328L462.96623,333.397578L458.656987,334.822092L458.185782,336.551022L456.840568,336.387106L456.688567,332.09405L454.332543,336.414425L448.488085,341.968079L446.299263,341.776842L447.507675,339.485912L450.532505,337.234009L448.883289,337.136439L451.224112,332.593605L444.460045,339.450787L444.292843,337.46037L441.936819,335.832911L442.157222,331.438383L441.511215,329.697744L439.580796,328.722049ZM460.861009,8.85425L460.861009,8.85425L460.861009,8.85425ZM459.500595,8.315666L459.500595,8.315666L459.500595,8.315666ZM458.200982,7.507791L458.200982,7.507791L458.200982,7.507791ZM424.02344,361.294636L426.675867,359.858414L426.067861,362.847942ZM456.194562,6.828708L456.194562,6.828708L456.194562,6.828708ZM426.356664,321.704854L426.356664,321.704854L426.356664,321.704854ZM421.690217,324.546077L421.690217,324.546077L421.690217,324.546077ZM452.96453,3.905527L452.96453,3.905527L452.96453,3.905527ZM421.059411,324.909035L421.059411,324.909035L421.059411,324.909035ZM420.664207,325.100271L420.664207,325.100271L420.664207,325.100271ZM420.322203,325.369563L420.322203,325.369563L420.322203,325.369563ZM419.904199,326.044744L419.904199,326.044744L419.904199,326.044744ZM419.805398,326.189146L419.805398,326.189146L419.805398,326.189146ZM452.113321,3.370846L452.113321,3.370846L452.113321,3.370846ZM417.221372,333.229758L417.221372,333.229758L417.221372,333.229758ZM416.97057,332.745814L416.97057,332.745814L416.97057,332.745814ZM414.135741,333.534175L414.135741,333.534175L414.135741,333.534175ZM411.574516,355.124344L412.782928,353.844233L412.509325,356.162483ZM413.611336,334.759647L413.611336,334.759647L413.611336,334.759647ZM413.482135,334.279606L413.482135,334.279606L413.482135,334.279606ZM413.292133,335.079675L413.292133,335.079675L413.292133,335.079675ZM411.179312,352.072371L411.179312,352.072371L411.179312,352.072371ZM405.433654,342.86962L406.322863,341.991495L409.431294,343.084273ZM405.350054,335.852425L405.350054,335.852425L405.350054,335.852425ZM404.453245,340.274273L404.453245,340.274273L404.453245,340.274273ZM400.075601,343.36137L400.075601,343.36137L400.075601,343.36137ZM397.590376,346.358704L397.590376,346.358704L397.590376,346.358704ZM393.729537,350.53858L393.729537,350.53858L393.729537,350.53858ZM389.00989,349.274079L389.00989,349.274079L389.00989,349.274079ZM433.059931,11.808653L433.059931,11.808653L433.059931,11.808653ZM384.487845,354.410136L384.487845,354.410136L384.487845,354.410136ZM384.085041,354.203288L384.085041,354.203288L384.085041,354.203288ZM383.157832,357.42308L383.157832,357.42308L383.157832,357.42308ZM383.233832,356.482511L383.727837,355.354608L385.03505,356.505927ZM380.95381,355.292163L380.95381,355.292163L380.95381,355.292163ZM380.817008,355.729275L380.817008,355.729275L380.817008,355.729275ZM380.452205,354.702844L380.452205,354.702844L380.452205,354.702844ZM379.585796,355.584872L379.585796,355.584872L379.585796,355.584872ZM375.04855,372.971749L375.04855,372.971749L375.04855,372.971749ZM374.387344,376.624749L374.387344,376.624749L374.387344,376.624749ZM377.092971,356.365427L377.092971,356.365427L377.092971,356.365427ZM377.168972,355.463886L377.168972,355.463886L377.168972,355.463886ZM376.401364,357.981178L376.401364,357.981178L376.401364,357.981178ZM373.832538,372.600985L373.832538,372.600985L373.832538,372.600985ZM372.96613,373.643027L372.96613,373.643027L372.96613,373.643027ZM372.95853,372.269249L372.95853,372.269249L372.95853,372.269249ZM375.519755,354.839441L375.519755,354.839441L375.519755,354.839441ZM370.617706,378.04536L370.617706,378.04536L370.617706,378.04536ZM370.99771,370.95011L373.186532,370.969624L371.879319,372.893693ZM371.058511,369.560721L371.058511,369.560721L371.058511,369.560721ZM372.662127,357.056219L372.662127,357.056219L372.662127,357.056219ZM369.599296,371.418443L369.599296,371.418443L369.599296,371.418443ZM367.744877,377.557513L367.744877,377.557513L367.744877,377.557513ZM368.573286,371.742374L368.573286,371.742374L368.573286,371.742374ZM368.079281,372.343401L368.079281,372.343401L368.079281,372.343401ZM379.129791,291.091462L379.129791,291.091462L379.129791,291.091462ZM365.115251,374.021596L365.115251,374.021596L365.115251,374.021596ZM367.00007,361.579539L367.00007,361.579539L367.00007,361.579539ZM365.768858,365.267665L365.768858,365.267665L365.768858,365.267665ZM363.283633,373.112249L363.283633,373.112249L363.283633,373.112249ZM377.153772,285.272419L377.153772,285.272419L377.153772,285.272419ZM362.303223,374.677263L365.03165,372.109235L363.922039,370.325665L366.179262,370.66911L366.414864,368.370373L367.357274,369.310943L368.520085,366.754623L368.04888,371.149151L364.583246,373.104443L362.599626,375.652957ZM375.595756,288.640517L375.595756,288.640517L375.595756,288.640517ZM363.139231,364.202206L363.139231,364.202206L363.139231,364.202206ZM363.063231,362.687928L365.890459,362.637192L365.388854,364.186595ZM362.744027,359.799872L362.744027,359.799872L362.744027,359.799872ZM374.113741,288.519531L374.113741,288.519531L374.113741,288.519531ZM360.220802,365.552567L360.220802,365.552567L360.220802,365.552567ZM360.312003,364.674442L362.99483,364.213914L362.493225,366.840484ZM359.141591,363.971942L359.141591,363.971942L359.141591,363.971942ZM358.807188,348.091538L358.807188,348.091538L358.807188,348.091538ZM355.896359,363.905595L356.97557,362.707442L358.837588,362.644998L358.419584,364.78372L360.076401,363.004053L359.574796,364.892998L360.304403,368.007415L358.533585,368.385984L356.831168,367.004401L356.093961,368.311832ZM357.249172,350.745427L358.97439,349.734607L358.99719,350.928857ZM356.549965,348.068121L356.549965,348.068121L356.549965,348.068121ZM396.944369,115.923067L396.944369,115.923067L396.944369,115.923067ZM396.746767,115.852817L396.746767,115.852817L396.746767,115.852817ZM366.110861,289.432781L366.825268,287.00135L371.734917,285.120211L368.436484,290.107962L366.02726,290.463115ZM350.95631,362.332775L350.95631,362.332775L350.95631,362.332775ZM385.99266,163.095947L385.99266,163.095947L385.99266,163.095947ZM347.870679,365.271567L349.466695,365.166192L348.99549,366.46972ZM381.501015,177.594768L381.501015,177.594768L381.501015,177.594768ZM345.149851,367.777151L345.149851,367.777151L345.149851,367.777151ZM346.289863,357.735303L346.289863,357.735303L346.289863,357.735303ZM359.01999,288.859073L359.01999,288.859073L359.01999,288.859073ZM394.367944,98.024926L394.367944,98.024926L394.367944,98.024926ZM344.617846,364.479303L346.913069,363.745581L346.335463,364.904706ZM394.398344,97.080454L394.398344,97.080454L394.398344,97.080454ZM379.570596,174.07056L379.570596,174.07056L379.570596,174.07056ZM341.638616,365.462803L342.793828,364.787623L344.98265,366.977081L343.401834,367.894234ZM340.96221,368.202554L340.96221,368.202554L340.96221,368.202554ZM341.197812,366.137984L341.197812,366.137984L341.197812,366.137984ZM340.513805,366.762429L340.513805,366.762429L340.513805,366.762429ZM376.401364,176.170254L376.401364,176.170254L376.401364,176.170254ZM353.943139,285.451947L353.943139,285.451947L353.943139,285.451947ZM336.706167,371.531624L336.706167,371.531624L336.706167,371.531624ZM333.126531,375.699791L333.126531,375.699791L333.126531,375.699791ZM333.825738,368.354762L333.825738,368.354762L333.825738,368.354762ZM333.719337,368.912859L336.204562,368.292318L336.136161,370.50129L334.844148,371.488693ZM330.633706,381.8935L330.633706,381.8935L330.633706,381.8935ZM330.800908,380.359708L330.800908,380.359708L330.800908,380.359708ZM330.344903,381.663236L330.344903,381.663236L330.344903,381.663236ZM330.162502,381.167583L330.162502,381.167583L330.162502,381.167583ZM369.698097,172.763129L371.529715,171.908421L373.384134,172.482129L373.178932,174.414004L370.480905,173.891032ZM329.311293,370.973526L329.311293,370.973526L329.311293,370.973526ZM330.854109,359.101275L330.854109,359.101275L330.854109,359.101275ZM329.9801,359.678886L329.9801,359.678886L329.9801,359.678886ZM325.876059,379.091305L326.940069,377.752652L329.189692,379.060083L329.812898,380.964639ZM329.911699,358.340233L329.911699,358.340233L329.911699,358.340233ZM372.160522,152.656016L372.160522,152.656016L372.160522,152.656016ZM327.563276,368.304026L327.563276,368.304026L327.563276,368.304026ZM328.718487,360.75215L328.718487,360.75215L328.718487,360.75215ZM328.688087,360.490664L328.688087,360.490664L328.688087,360.490664ZM328.087681,360.092581L328.087681,360.092581L328.087681,360.092581ZM326.339663,356.014177L326.339663,356.014177L326.339663,356.014177ZM372.213722,108.91758L372.213722,108.91758L372.213722,108.91758ZM336.97217,257.297305L336.97217,257.297305L336.97217,257.297305ZM348.288683,180.389158L348.288683,180.389158L348.288683,180.389158ZM347.893479,180.697477L347.893479,180.697477L347.893479,180.697477ZM347.870679,179.784227L347.870679,179.784227L347.870679,179.784227ZM298.188982,378.595652L298.188982,378.595652L298.188982,378.595652ZM343.903439,185.544728L343.903439,185.544728L343.903439,185.544728ZM297.854579,378.158541L297.854579,378.158541L297.854579,378.158541ZM343.02183,188.284478L343.02183,188.284478L343.02183,188.284478ZM343.143431,187.636617L343.143431,187.636617L343.143431,187.636617ZM297.132571,379.145944L297.132571,379.145944L297.132571,379.145944ZM342.482225,188.635728L342.482225,188.635728L342.482225,188.635728ZM299.055391,369.556818L302.513425,368.499165L305.576256,364.686151L307.628276,363.257734L308.661887,364.334901L315.137151,362.512303L319.833998,363.199192L320.837208,365.735998L320.632006,368.218165L321.293213,370.532512L323.451635,370.587151L323.740437,372.296568L319.750398,370.911082L319.476795,372.347304L317.097971,372.854665L314.255543,371.672124L310.394704,371.199887L307.073471,372.21461L304.755448,374.571888L301.97382,374.661652L299.549395,373.369832ZM331.728117,229.392441L331.728117,229.392441L331.728117,229.392441ZM341.342213,189.435798L341.342213,189.435798L341.342213,189.435798ZM340.703807,190.0017L340.703807,190.0017L340.703807,190.0017ZM292.861329,379.263027L293.932939,378.903972L296.927369,379.981138L295.072951,380.629ZM289.236092,378.997638L289.236092,378.997638L289.236092,378.997638ZM289.494495,377.374083L289.494495,377.374083L289.494495,377.374083ZM289.236092,377.662888L289.236092,377.662888L289.236092,377.662888ZM287.807278,379.40743L287.807278,379.40743L287.807278,379.40743ZM287.472875,374.528957L288.802888,373.697666L290.543305,374.162096L289.205692,375.617832L291.204512,376.589624L287.784478,377.690208ZM316.97637,248.765832L316.97637,248.765832L316.97637,248.765832ZM280.351604,381.741291L280.351604,381.741291L280.351604,381.741291ZM280.769608,378.599555L280.769608,378.599555L280.769608,378.599555ZM281.157212,375.79736L283.406834,374.076235L284.858449,374.607013L286.849668,377.237485L285.344853,378.21318L281.544815,377.740944ZM324.888049,205.698674L324.888049,205.698674L324.888049,205.698674ZM279.219192,378.505888L279.219192,378.505888L279.219192,378.505888ZM340.0426,144.229918L340.0426,144.229918L340.0426,144.229918ZM276.581966,382.494528L279.568796,381.733486L279.089991,383.462417L276.97717,384.317125ZM703.090631,305.512227L703.090631,305.512227L703.090631,305.512227ZM707.787478,323.558674L707.787478,323.558674L707.787478,323.558674ZM717.059571,358.632942L717.059571,358.632942L717.059571,358.632942ZM702.915829,306.261561L702.915829,306.261561L702.915829,306.261561ZM701.061411,299.927352L701.061411,299.927352L701.061411,299.927352ZM712.666727,345.503996L713.403934,343.447232L714.878349,345.269829ZM709.847098,335.188953L709.847098,335.188953L709.847098,335.188953ZM698.750988,294.159045L698.750988,294.159045L698.750988,294.159045ZM711.207512,341.737815L711.306313,339.903509L712.393124,340.41087ZM709.512695,335.864133L709.512695,335.864133L709.512695,335.864133ZM712.248722,346.319676L712.248722,346.319676L712.248722,346.319676ZM708.03828,331.149577L708.03828,331.149577L708.03828,331.149577ZM712.621126,348.907218L713.593936,346.132343L715.638356,346.237718L713.98154,347.689551L714.01194,350.238066ZM709.02629,336.191967L709.02629,336.191967L709.02629,336.191967ZM710.242302,341.058731L710.242302,341.058731L710.242302,341.058731ZM705.948259,324.858299L705.948259,324.858299L705.948259,324.858299ZM710.432304,342.561301L710.432304,342.561301L710.432304,342.561301ZM704.367444,322.122451L704.367444,322.122451L704.367444,322.122451ZM707.263073,334.986008L709.611496,329.580661L708.03068,328.511299L707.308673,325.381271L710.075101,325.373466L712.689527,324.471924L715.699157,327.47316L715.797958,330.525133L719.02799,329.931911L722.607626,331.910619L725.237252,334.146911L726.491265,337.827231L726.95487,336.359786L730.139301,339.87619L726.187262,338.55705L725.548855,340.844078L727.600876,339.856676L729.751698,340.945551L733.240132,344.134121L734.592946,343.95069L735.337753,345.769385L734.387744,350.476135L736.00656,348.782329L738.03578,353.828622L737.944579,356.517636L733.817738,357.056219L733.072931,354.535024L728.421684,352.579733L727.631276,348.150079L725.830058,349.371649L727.091671,351.151316L726.529265,352.704621L724.454445,352.134816L722.812828,348.462302L720.228802,348.107149L722.425224,350.643955L722.03762,351.767955L723.800838,352.806094L724.667247,354.550636L727.631276,356.400552L729.02969,358.164608L727.205672,359.573511L725.898459,357.910928L721.452415,355.026775L719.704397,352.232385L719.073591,348.673052L717.697977,349.988288L716.04876,349.941455L715.448354,347.876885L719.757598,344.871746L717.599176,342.233468L717.872779,341.179717L715.904359,341.437301L709.695097,338.389231L710.903509,336.8008L712.377924,337.538425L714.315943,336.441745L713.510335,334.993814L711.351914,334.244481L710.97191,332.254064L709.702697,335.153828ZM710.128301,346.315774L710.409504,344.122412L712.628726,343.466745L712.149921,345.937204ZM704.337043,324.643646L704.337043,324.643646L704.337043,324.643646ZM703.850639,323.070827L703.850639,323.070827L703.850639,323.070827ZM703.531435,322.102938L703.531435,322.102938L703.531435,322.102938ZM698.910589,305.929825L698.910589,305.929825L698.910589,305.929825ZM705.97106,336.574439L706.913469,335.629967L707.202272,337.616481ZM700.233002,314.679853L700.233002,314.679853L700.233002,314.679853ZM698.310183,309.528186L698.310183,309.528186L698.310183,309.528186ZM697.03337,305.898602L697.03337,305.898602L697.03337,305.898602ZM699.054991,314.024187L699.054991,314.024187L699.054991,314.024187ZM693.871739,295.244018L693.871739,295.244018L693.871739,295.244018ZM692.648126,290.82217L692.648126,290.82217L692.648126,290.82217ZM693.544935,294.600059L693.544935,294.600059L693.544935,294.600059ZM696.645766,306.733797L696.645766,306.733797L696.645766,306.733797ZM693.354934,294.326865L693.354934,294.326865L693.354934,294.326865ZM703.212232,336.090495L703.212232,336.090495L703.212232,336.090495ZM690.862109,288.187795L690.862109,288.187795L690.862109,288.187795ZM691.226912,293.113101L691.226912,293.113101L691.226912,293.113101ZM690.649306,293.249698L690.649306,293.249698L690.649306,293.249698ZM690.102101,291.90324L690.102101,291.90324L690.102101,291.90324ZM700.567406,337.733564L703.645436,336.781286L701.707417,339.42737ZM694.715347,317.275201L695.574156,315.401867L697.876979,316.252673L697.481775,313.7627L698.880189,314.250548L702.02662,318.336757L700.643406,313.22802L698.484985,311.803506L699.845398,309.742839L706.138261,310.261908L708.752688,309.485256L711.587516,310.410214L713.419134,313.134353L714.589546,313.068006L717.842378,315.140381L719.339593,316.736617L716.504765,319.667604L712.97833,319.792493L711.99792,322.013174L708.859089,321.888285L708.304283,323.265965L706.480265,323.757715L704.96025,320.84234L703.402234,321.416049L702.756228,323.359632L704.283843,324.479729L703.425034,325.994007L704.945049,326.848716L704.907049,329.303563L704.063441,329.861661L704.663847,332.410175L703.455435,332.101855L702.057021,327.750258L703.00703,334.962592L701.327413,333.783953L699.01699,327.633174L699.305793,324.66316L700.651007,326.493563L700.529405,324.791952L697.747777,322.684451L697.284173,321.088215L695.589356,319.671507ZM682.882029,284.253794L682.882029,284.253794L682.882029,284.253794ZM683.02643,286.431545L683.02643,286.431545L683.02643,286.431545ZM682.464025,284.667489L682.464025,284.667489L682.464025,284.667489ZM685.823258,305.153172L685.823258,305.153172L685.823258,305.153172ZM685.542055,305.391241L685.542055,305.391241L685.542055,305.391241ZM679.621596,282.118975L679.621596,282.118975L679.621596,282.118975ZM678.96039,279.925613L678.96039,279.925613L678.96039,279.925613ZM679.689997,284.640169L681.909219,285.272419L684.067641,288.554656L685.504055,287.766295L689.9501,287.996559L695.528555,294.061476L697.154972,298.081338L694.874949,296.321185L694.244142,294.771782L692.161722,293.120906L691.568916,291.493448L689.273693,290.295295L690.360504,292.773559L693.590536,296.63731L696.113761,298.377949L698.530585,303.744269L697.474175,305.496616L695.916159,304.509213L696.151762,307.330922L692.769728,312.771395L691.439714,313.454381L689.714497,309.192547L690.96851,306.846977L689.661297,305.200005L691.067311,305.02438L689.228092,303.599866L686.051261,298.456004L685.762458,295.962129L683.117631,290.11967L681.483615,288.398545ZM678.884389,282.653655L678.884389,282.653655L678.884389,282.653655ZM677.926779,281.194016L677.926779,281.194016L677.926779,281.194016ZM678.876789,287.313572L678.876789,287.313572L678.876789,287.313572ZM680.662807,295.716254L680.662807,295.716254L680.662807,295.716254ZM680.480405,295.638198L680.480405,295.638198L680.480405,295.638198ZM686.446464,323.757715L686.446464,323.757715L686.446464,323.757715ZM677.265573,289.787934L677.265573,289.787934L677.265573,289.787934ZM672.515525,270.637001L672.515525,270.637001L672.515525,270.637001ZM672.272323,269.622279L672.272323,269.622279L672.272323,269.622279ZM672.279923,270.117932L672.279923,270.117932L672.279923,270.117932ZM677.265573,291.555892L677.265573,291.555892L677.265573,291.555892ZM676.604366,291.157809L676.604366,291.157809L676.604366,291.157809ZM671.763118,271.265348L671.763118,271.265348L671.763118,271.265348ZM682.061221,315.831173L682.061221,315.831173L682.061221,315.831173ZM678.815988,303.412533L678.815988,303.412533L678.815988,303.412533ZM670.501505,268.361681L670.501505,268.361681L670.501505,268.361681ZM681.080811,314.835964L681.080811,314.835964L681.080811,314.835964ZM680.647606,313.836853L680.647606,313.836853L680.647606,313.836853ZM680.936409,315.074034L680.936409,315.074034L680.936409,315.074034ZM681.567216,318.114298L681.567216,318.114298L681.567216,318.114298ZM681.696417,319.105604L681.696417,319.105604L681.696417,319.105604ZM678.192782,304.126741L678.192782,304.126741L678.192782,304.126741ZM674.050741,286.977934L674.050741,286.977934L674.050741,286.977934ZM680.518405,314.964756L680.518405,314.964756L680.518405,314.964756ZM673.685937,286.704739L673.685937,286.704739L673.685937,286.704739ZM680.123201,314.640826L680.123201,314.640826L680.123201,314.640826ZM674.582746,291.036823L674.582746,291.036823L674.582746,291.036823ZM674.354744,290.213337L674.354744,290.213337L674.354744,290.213337ZM679.743197,313.520728L679.743197,313.520728L679.743197,313.520728ZM679.188392,311.776186L679.188392,311.776186L679.188392,311.776186ZM677.584776,306.714283L677.584776,306.714283L677.584776,306.714283ZM680.366404,320.112521L680.366404,320.112521L680.366404,320.112521ZM676.323163,309.297922L677.797578,306.886005L678.291583,304.204797L683.824438,306.398158L686.583266,305.910311L687.183672,308.349547L686.051261,307.463616L688.278083,311.155645L692.762128,320.428646L695.01175,329.826536L694.593746,331.99648L691.584116,330.24023L688.536485,326.16573L688.855689,323.562577L687.107671,324.850493L686.720067,322.832757L684.713647,323.035701L683.97644,321.154562L681.666017,321.607285L682.623626,320.436451L682.02322,315.202826L680.609606,312.84945L681.187212,310.870742L678.542385,311.58495ZM677.96478,317.739631L677.96478,317.739631L677.96478,317.739631ZM670.668707,286.845239L670.668707,286.845239L670.668707,286.845239ZM674.787948,312.84945L675.509955,309.738936L677.645576,310.62877L677.341573,311.659103L678.97559,312.771395L678.831188,317.013715L676.657567,317.989409L675.867159,315.796048L676.535965,313.786117ZM673.473135,308.907644L673.473135,308.907644L673.473135,308.907644ZM666.04786,280.936433L666.04786,280.936433L666.04786,280.936433ZM666.473465,284.370878L666.473465,284.370878L666.473465,284.370878ZM665.546255,281.408669L665.546255,281.408669L665.546255,281.408669ZM665.03705,279.664127L665.03705,279.664127L665.03705,279.664127ZM665.196652,280.842766L665.196652,280.842766L665.196652,280.842766ZM664.482245,278.181071L664.482245,278.181071L664.482245,278.181071ZM664.573446,282.805864L664.573446,282.805864L664.573446,282.805864ZM666.085861,289.916726L666.085861,289.916726L666.085861,289.916726ZM663.99584,282.095558L663.99584,282.095558L663.99584,282.095558ZM668.312683,302.518796L668.312683,302.518796L668.312683,302.518796ZM667.887079,302.514894L667.887079,302.514894L667.887079,302.514894ZM665.432254,291.942267L665.432254,291.942267L665.432254,291.942267ZM663.129431,281.529655L663.129431,281.529655L663.129431,281.529655ZM667.294273,302.963713L667.294273,302.963713L667.294273,302.963713ZM661.662617,282.333627L661.662617,282.333627L661.662617,282.333627ZM665.584256,301.285518L665.584256,301.285518L665.584256,301.285518ZM663.205432,290.794851L663.205432,290.794851L663.205432,290.794851ZM663.532235,292.461337L663.532235,292.461337L663.532235,292.461337ZM663.570236,292.92967L663.570236,292.92967L663.570236,292.92967ZM662.323823,296.60999L662.468225,295.037171L664.246642,293.417518L664.740647,291.571504L665.797058,292.894545L666.541865,291.142198L668.289883,291.602726L670.0227,289.003475L674.514345,290.595809L673.609936,293.694615L674.286343,294.935698L675.563156,291.013406L677.326373,291.856406L679.446794,291.329531L681.704017,292.01642L682.661627,294.518101L681.939619,295.552337L679.317593,294.830323L682.859229,297.051004L681.103611,298.346726L683.474835,298.260865L686.188062,304.173574L683.938439,305.297575L676.277563,302.019241L675.403554,303.143241L677.341573,303.572547L676.262363,304.579463L677.561976,306.866491L676.02676,309.227672L674.255943,308.977894L670.455905,305.918116L668.677487,305.605894L667.507075,302.546116L662.817828,298.842379ZM658.143781,277.271724L658.143781,277.271724L658.143781,277.271724ZM658.645386,291.684684L658.645386,291.684684L658.645386,291.684684ZM654.571746,276.912669L654.571746,276.912669L654.571746,276.912669ZM620.645006,265.368251L620.645006,265.368251L620.645006,265.368251ZM619.231392,259.315042L619.231392,259.315042L619.231392,259.315042ZM619.588596,265.188723L619.588596,265.188723L619.588596,265.188723ZM619.132591,266.503959L619.132591,266.503959L619.132591,266.503959ZM619.337793,268.150931L619.337793,268.150931L619.337793,268.150931ZM619.094591,266.96839L619.094591,266.96839L619.094591,266.96839ZM619.04899,267.440626L619.04899,267.440626L619.04899,267.440626ZM617.703777,268.564626L617.703777,268.564626L617.703777,268.564626ZM598.521185,262.929014L598.521185,262.929014L598.521185,262.929014ZM563.522835,264.55257L563.522835,264.55257L563.522835,264.55257ZM562.869229,262.187486L562.869229,262.187486L562.869229,262.187486ZM561.600016,270.71896L561.95722,269.294445L564.237242,266.094167L565.95486,265.497042ZM538.96699,35.822447L538.96699,35.822447L538.96699,35.822447ZM555.03355,258.959889L555.03355,258.959889L555.03355,258.959889ZM536.367764,34.905294L536.367764,34.905294L536.367764,34.905294ZM548.520285,257.78125L548.520285,257.78125L548.520285,257.78125ZM548.368284,258.503264L548.368284,258.503264L548.368284,258.503264ZM547.281473,252.629582L547.281473,252.629582L547.281473,252.629582ZM547.137071,253.222805L547.137071,253.222805L547.137071,253.222805ZM546.437864,252.852041L546.437864,252.852041L546.437864,252.852041ZM531.123711,32.813405L531.123711,32.813405L531.123711,32.813405ZM530.850109,32.606558L530.850109,32.606558L530.850109,32.606558ZM544.477045,251.454846L544.477045,251.454846L544.477045,251.454846ZM544.066641,251.626568L544.066641,251.626568L544.066641,251.626568ZM544.446644,258.007611L547.448674,257.988097L546.567066,258.932569ZM544.226242,256.48943L544.226242,256.48943L544.226242,256.48943ZM544.112241,257.488541L544.112241,257.488541L544.112241,257.488541ZM540.654207,256.668958L541.117811,255.423972L546.589866,253.226708L546.323863,254.292166L542.067821,256.852389ZM535.858559,247.68086L535.858559,247.68086L535.858559,247.68086ZM536.268963,258.815486L537.484975,256.407472L540.502205,256.579194L540.433804,257.984194L543.101431,257.269986L543.694237,258.795972L540.791008,259.588236L537.834578,262.105528L536.740167,261.172764ZM535.607756,247.341318L535.607756,247.341318L535.607756,247.341318ZM534.771748,247.712082L534.771748,247.712082L534.771748,247.712082ZM534.703347,247.017387L534.703347,247.017387L534.703347,247.017387ZM534.786948,248.797054L534.786948,248.797054L534.786948,248.797054ZM534.444944,248.168707L534.444944,248.168707L534.444944,248.168707ZM532.696927,245.046484L532.696927,245.046484L532.696927,245.046484ZM532.712127,245.370415L532.712127,245.370415L532.712127,245.370415ZM530.690507,246.826151L530.690507,246.826151L530.690507,246.826151ZM520.392404,31.802585L520.392404,31.802585L520.392404,31.802585ZM529.611296,245.639707L529.611296,245.639707L529.611296,245.639707ZM529.01089,247.712082L531.769718,247.056415L531.169312,248.153096ZM528.456085,255.985972L528.456085,255.985972L528.456085,255.985972ZM528.04568,247.47011L528.04568,247.47011L528.04568,247.47011ZM528.934889,270.99996L528.934889,270.99996L528.934889,270.99996ZM527.97728,247.446693L527.97728,247.446693L527.97728,247.446693ZM528.144481,251.802193L528.144481,251.802193L528.144481,251.802193ZM528.152082,255.958652L528.152082,255.958652L528.152082,255.958652ZM527.490875,247.704276L527.490875,247.704276L527.490875,247.704276ZM527.437674,246.517832L527.437674,246.517832L527.437674,246.517832ZM528.448484,271.577571L528.448484,271.577571L528.448484,271.577571ZM527.369274,246.720776L527.369274,246.720776L527.369274,246.720776ZM527.407274,248.160901L527.407274,248.160901L527.407274,248.160901ZM527.392074,251.177749L527.392074,251.177749L527.392074,251.177749ZM527.240072,252.910583L527.870879,251.876346L529.04129,253.449166ZM527.597276,262.074306L527.597276,262.074306L527.597276,262.074306ZM526.206462,248.008693L526.206462,248.008693L526.206462,248.008693ZM526.160862,248.176513L526.160862,248.176513L526.160862,248.176513ZM525.522455,248.703388L525.522455,248.703388L525.522455,248.703388ZM525.150052,249.448818L525.150052,249.448818L525.150052,249.448818ZM524.534445,240.285095L524.534445,240.285095L524.534445,240.285095ZM524.853649,249.538582L524.853649,249.538582L524.853649,249.538582ZM524.618046,249.230263L524.618046,249.230263L524.618046,249.230263ZM524.450845,249.870318L524.450845,249.870318L524.450845,249.870318ZM524.162042,252.824721L524.162042,252.824721L524.162042,252.824721ZM523.630036,250.650874L523.630036,250.650874L523.630036,250.650874ZM515.99196,31.361571L515.99196,31.361571L515.99196,31.361571ZM523.310833,249.280999L523.310833,249.280999L523.310833,249.280999ZM523.174032,249.893735L523.174032,249.893735L523.174032,249.893735ZM522.885229,249.230263L522.885229,249.230263L522.885229,249.230263ZM523.075231,273.123071L525.492055,268.498279L528.524485,265.801459L531.169312,261.613778L530.850109,259.849722L533.228932,259.826306L532.03572,261.758181L533.836938,260.59125L533.753338,262.015764L531.176912,264.380848L529.466895,266.913751L529.383294,269.040765L527.96208,269.423237L528.737287,270.953126L526.654867,271.511223L525.864459,272.713279ZM522.292423,256.813361L522.292423,256.813361L522.292423,256.813361ZM522.269623,262.429459L523.728837,258.015416L524.830848,257.863208L526.578866,254.63561L526.191262,259.619458L524.739647,264.540862ZM514.540345,29.624835L514.540345,29.624835L514.540345,29.624835ZM521.327213,251.513388L523.341233,252.192471L522.353224,253.066694ZM521.456415,264.517445L521.456415,264.517445L521.456415,264.517445ZM521.471615,269.403723L523.751638,266.340042L523.272833,268.748057ZM521.129611,269.946209L521.129611,269.946209L521.129611,269.946209ZM520.096001,261.055681L521.97322,259.658486L521.600816,261.851847ZM520.331603,268.322654L522.307623,264.540862L523.288033,265.789751ZM519.677997,262.074306L519.677997,262.074306L519.677997,262.074306ZM519.252393,269.723751L519.252393,269.723751L519.252393,269.723751ZM509.106291,27.099738L509.106291,27.099738L509.106291,27.099738ZM508.536285,26.853863L508.536285,26.853863L508.536285,26.853863ZM508.179082,26.26064L508.179082,26.26064L508.179082,26.26064ZM507.852279,26.073307L507.852279,26.073307L507.852279,26.073307ZM504.637446,24.863446L504.637446,24.863446L504.637446,24.863446ZM507.320273,271.737585L507.320273,271.737585L507.320273,271.737585ZM504.310643,24.758071L504.310643,24.758071L504.310643,24.758071ZM506.947869,269.536418L506.947869,269.536418L506.947869,269.536418ZM506.377864,270.757987L506.377864,270.757987L506.377864,270.757987ZM506.172662,271.222418L506.172662,271.222418L506.172662,271.222418ZM505.845858,271.987362L505.845858,271.987362L505.845858,271.987362ZM504.546245,273.552376L504.546245,273.552376L504.546245,273.552376ZM504.01424,277.782988L504.01424,277.782988L504.01424,277.782988ZM503.99144,275.433516L503.99144,275.433516L503.99144,275.433516ZM503.793838,277.837627L503.793838,277.837627L503.793838,277.837627ZM502.137021,24.145335L502.137021,24.145335L502.137021,24.145335ZM503.117431,277.46296L503.117431,277.46296L503.117431,277.46296ZM502.897029,276.272613L502.897029,276.272613L502.897029,276.272613ZM75.225552,348.454496L77.96158,348.848677L78.827988,350.636149L77.672777,351.650871L75.749957,351.572816L74.822748,350.448816ZM60.565006,349.566788L63.901439,351.931871L65.96866,358.203636L68.590686,360.533595L65.786258,359.538386L64.213042,356.209316L63.734237,353.719344L61.910219,351.974802ZM61.97862,341.523162L63.437834,343.162329L61.826618,343.474551ZM57.676977,343.060857L57.676977,343.060857L57.676977,343.060857ZM58.110181,337.987245L58.110181,337.987245L58.110181,337.987245ZM55.457755,340.524051L55.457755,340.524051L55.457755,340.524051ZM49.833698,331.016883L49.833698,331.016883L49.833698,331.016883ZM45.357254,334.416203L50.145301,334.591828L52.402524,332.507744L53.489335,333.89323L50.494905,335.169439L50.084501,336.566634L48.336483,335.208467L46.421264,336.3793ZM34.268743,315.47602L34.268743,315.47602L34.268743,315.47602ZM16.735367,294.951309L16.735367,294.951309L16.735367,294.951309ZM15.564956,293.760962L15.564956,293.760962L15.564956,293.760962ZM14.820148,292.644768L14.820148,292.644768L14.820148,292.644768ZM4.149641,295.76699L8.610886,295.911393L10.419704,296.933921L8.671687,297.601296L7.98008,299.572199L6.878069,297.66374ZM0.114001,278.860155L3.01723,278.766488L8.519685,282.638044L9.910499,285.354378L10.389304,287.879475L8.246082,286.189572L6.748867,286.868656L3.222432,285.459753L2.348423,283.184433L2.188822,280.292474ZM746.692267,337.772592L746.692267,337.772592L746.692267,337.772592ZM746.365464,339.489814L746.365464,339.489814L746.365464,339.489814ZM747.467475,343.997523L747.467475,343.997523L747.467475,343.997523ZM747.171072,349.508246L747.171072,349.508246L747.171072,349.508246ZM745.324253,345.17226L745.324253,345.17226L745.324253,345.17226ZM743.097431,338.998064L743.097431,338.998064L743.097431,338.998064ZM745.187452,346.694343L745.187452,346.694343L745.187452,346.694343ZM744.95945,347.002663L744.95945,347.002663L744.95945,347.002663ZM743.416634,343.033537L743.416634,343.033537L743.416634,343.033537ZM742.352624,341.854898L742.352624,341.854898L742.352624,341.854898ZM741.334213,341.800259L741.334213,341.800259L741.334213,341.800259ZM743.01383,349.215538L745.810658,346.729468L747.072271,348.466204L745.514255,350.347343ZM740.665407,342.022718L740.665407,342.022718L740.665407,342.022718ZM742.04102,347.888593L742.04102,347.888593L742.04102,347.888593ZM741.395014,349.379454L741.395014,349.379454L741.395014,349.379454ZM740.361404,347.338301L741.129011,344.657093L739.593796,342.974995L739.760998,341.792454L743.652237,343.400398L744.131041,346.343093L741.220212,348.337413ZM738.354984,341.11337L738.354984,341.11337L738.354984,341.11337ZM739.076991,346.019162L739.076991,346.019162L739.076991,346.019162ZM734.205342,329.795313L734.813348,328.277133L735.831758,329.412841ZM736.052161,336.605661L736.052161,336.605661L736.052161,336.605661ZM738.658987,345.948912L738.658987,345.948912L738.658987,345.948912ZM738.712187,346.261135L738.712187,346.261135L738.712187,346.261135ZM735.512555,338.315078L735.512555,338.315078L735.512555,338.315078ZM732.677727,330.353411L732.677727,330.353411L732.677727,330.353411ZM734.676547,337.581356L734.676547,337.581356L734.676547,337.581356ZM735.512555,346.401635L735.512555,346.401635L735.512555,346.401635ZM735.740557,348.462302L735.740557,348.462302L735.740557,348.462302ZM735.520155,348.298385L735.520155,348.298385L735.520155,348.298385ZM735.330153,348.903316L735.330153,348.903316L735.330153,348.903316ZM728.657287,327.129716L728.657287,327.129716L728.657287,327.129716ZM728.079681,325.666174L728.079681,325.666174L728.079681,325.666174ZM733.202132,343.52919L733.202132,343.52919L733.202132,343.52919ZM734.729747,348.836968L734.729747,348.836968L734.729747,348.836968ZM729.272893,330.322188L729.272893,330.322188L729.272893,330.322188ZM728.01888,326.337452L728.01888,326.337452L728.01888,326.337452ZM728.072081,327.379494L728.072081,327.379494L728.072081,327.379494ZM733.148931,345.156648L733.148931,345.156648L733.148931,345.156648ZM728.573686,329.635299L728.573686,329.635299L728.573686,329.635299ZM726.95487,324.889521L726.95487,324.889521L726.95487,324.889521ZM731.431314,340.434287L731.431314,340.434287L731.431314,340.434287ZM727.486875,326.809688L727.486875,326.809688L727.486875,326.809688ZM730.868909,341.597315L730.868909,341.597315L730.868909,341.597315ZM728.094881,340.008884L728.094881,340.008884L728.094881,340.008884ZM727.98088,339.727884L727.98088,339.727884L727.98088,339.727884ZM727.920079,339.969856L727.920079,339.969856L727.920079,339.969856ZM725.070051,330.950536L725.070051,330.950536L725.070051,330.950536ZM720.532805,317.930868L720.532805,317.930868L720.532805,317.930868ZM720.152802,316.834187L720.152802,316.834187L720.152802,316.834187ZM720.494805,318.387493L720.494805,318.387493L720.494805,318.387493ZM723.124431,328.27323L723.124431,328.27323L723.124431,328.27323ZM720.282003,321.01016L720.707607,319.835423L722.296023,320.705743ZM719.369994,318.00502L719.369994,318.00502L719.369994,318.00502ZM718.906389,318.711423L718.906389,318.711423L718.906389,318.711423ZM717.340773,314.695464L717.340773,314.695464L717.340773,314.695464ZM718.602386,319.390507L718.602386,319.390507L718.602386,319.390507ZM726.628066,350.199038L726.628066,350.199038L726.628066,350.199038ZM720.304803,328.148341L720.304803,328.148341L720.304803,328.148341ZM720.0236,327.648785L720.0236,327.648785L720.0236,327.648785ZM726.749667,352.767066L726.749667,352.767066L726.749667,352.767066ZM726.787668,353.53201L726.787668,353.53201L726.787668,353.53201ZM717.051971,319.503687L717.051971,319.503687L717.051971,319.503687ZM726.240462,355.296066L726.240462,355.296066L726.240462,355.296066ZM725.98966,354.453066L727.122071,353.676413L728.908089,354.636497L728.231682,355.52633L729.554096,357.536261ZM717.561176,327.00873L717.561176,327.00873L717.561176,327.00873ZM724.887649,353.485177L724.887649,353.485177L724.887649,353.485177ZM712.849128,311.237603L712.849128,311.237603L712.849128,311.237603ZM717.01397,326.70041L717.01397,326.70041L717.01397,326.70041ZM723.694437,351.576719L723.694437,351.576719L723.694437,351.576719ZM717.203972,328.163952L717.203972,328.163952L717.203972,328.163952ZM712.476725,311.194672L712.476725,311.194672L712.476725,311.194672ZM716.95317,327.703424L716.95317,327.703424L716.95317,327.703424ZM717.00637,327.906369L717.00637,327.906369L717.00637,327.906369ZM716.459165,327.285827L716.459165,327.285827L716.459165,327.285827ZM715.99556,326.860424L715.99556,326.860424L715.99556,326.860424ZM715.615556,325.537382L715.615556,325.537382L715.615556,325.537382ZM715.782758,326.282813L715.782758,326.282813L715.782758,326.282813ZM715.851159,326.676994L715.851159,326.676994L715.851159,326.676994ZM715.95756,327.14923L715.95756,327.14923L715.95756,327.14923ZM722.136421,349.777538L722.136421,349.777538L722.136421,349.777538ZM715.478755,326.122799L715.478755,326.122799L715.478755,326.122799ZM715.326753,326.474049L715.326753,326.474049L715.326753,326.474049ZM715.091151,326.228174L715.091151,326.228174L715.091151,326.228174ZM714.217142,323.605507L714.878349,321.19359L717.97918,320.151548L719.293993,320.70184L719.818398,323.898215L717.424374,325.654466ZM715.881559,330.275355L715.881559,330.275355L715.881559,330.275355ZM715.645956,329.451869L715.645956,329.451869L715.645956,329.451869ZM712.871929,321.427757L712.871929,321.427757L712.871929,321.427757ZM717.880379,343.59944L717.880379,343.59944L717.880379,343.59944ZM718.815188,350.366857L718.815188,350.366857L718.815188,350.366857ZM705.796258,303.166658L705.796258,303.166658L705.796258,303.166658ZM710.599506,322.102938L710.599506,322.102938L710.599506,322.102938ZM716.641566,345.207385L716.641566,345.207385L716.641566,345.207385ZM716.132361,346.854357L716.132361,346.854357L716.132361,346.854357ZM714.293143,343.029634L715.136751,341.901731L716.573166,342.690093L715.99556,344.65319ZM711.95232,335.173342L711.95232,335.173342L711.95232,335.173342ZM701.175412,294.877157L701.175412,294.877157L701.175412,294.877157ZM711.534315,334.8338L711.534315,334.8338L711.534315,334.8338ZM711.351914,335.49337L711.351914,335.49337L711.351914,335.49337Z";

  var species = {
    B: "Halibut",
    C: "Sablefish",
    D: "Dungeness crab",
    E: "Hair Crab",
    F: "Freshwater fish",
    G: "Herring roe",
    H: "Herring (food/bait)",
    I: "Ling cod",
    J: "Geoduck clams",
    K: "King crab",
    L: "Herring spawn on kelp",
    M: "Misc. saltwater finfish",
    N: "Snails",
    O: "Octopus/squid",
    P: "Shrimp",
    Q: "Sea cucumber",
    R: "Clams",
    S: "Salmon",
    T: "Tanner crab",
    TB: "Tanner Bairdi crab",
    U: "Sea urchin",
    W: "Scallops",
    Y: "Rockfish"
  };

  var scaleFactor = 100 / 760;

  var gear = { "1": "PURSE SEINE", "2": "Beach seine", "3": "Drift gillnet", "4": "SET GILLNET", "5": "HAND TROLL", "6": "LONGLINE VESSEL UNDER 60'", "7": "OTTER TRAWL", "8": "FISH WHEEL", "9": "POT GEAR VESSEL UNDER 60'", "10": "RING NET", "11": "DIVING GEAR", "12": "DIVE/HAND PICK", "17": "BEAM TRAWL", "18": "SHOVEL", "21": "POUND", "23": "MECHANICAL DIGGER", "25": "DINGLEBAR TROLL", "26": "MECHANICAL JIG", "34": "GILLNET", "37": "PAIR TRAWL", "19": "Pot gear", "29": "Pot gear", "39": "Pot gear", "49": "Pot gear", "59": "Pot gear", "69": "Pot gear", "61": "LONGLINE VESSEL 60' OR OVER", "77": "GILLNET", "91": "POT GEAR VESSEL 60' OR OVER" };

  var regions = { "A": "SOUTHEAST", "B": "STATEWIDE", "C": "Southern southeast", "D": "YAKUTAT", "E": "PRINCE WILLIAM SOUND", "J": "WESTWARD", "L": "CHIGNIK", "M": "ALASKA PENINSULA", "P": "Upper Yukon", "Q": "BERING SEA", "T": "BRISTOL BAY", "U": "Nunivak Island", "W": "Goodnews Bay", "X": "KOTZEBUE", "Y": "Cape Romanzof", "H": "COOK INLET", "S": "SECURITY COVE", "V": "CAPE AVINOF", "Z": "NORTON SOUND", "K": "KODIAK", "O": "DUTCH HARBOR", "OA": "ALEUTIAN CDQAPICDA", "OB": "ALEUTIAN CDQBBEDC", "OC": "ALEUTIAN CDQCBSFA", "OD": "ALEUTIAN CDQCVRF", "OE": "ALEUTIAN CDQNSEDC", "OF": "ALEUTIAN CDQYDFDA", "OG": "ALEUTIAN ISLANDS ACAACDC", "QA": "BERING SEA CDQAPICDA", "QB": "BERING SEA CDQBBEDC", "QC": "BERING SEA CDQCBSFA", "QD": "BERING SEA CDQCVRF", "QE": "BERING SEA CDQNSEDC", "QF": "BERING SEA CDQYDFDA", "TA": "BRISTOL BAY CDQAPICDA", "TB": "BRISTOL BAY CDQBBEDC", "TC": "BRISTOL BAY CDQCBSFA", "TD": "BRISTOL BAY CDQCVRF", "TE": "BRISTOL BAY CDQNSEDC", "TF": "BRISTOL BAY CDQYDFDA", "ZE": "NORTON SOUND CDQNSEDC", "ZF": "NORTON SOUND CDQYDFDA", "G": "GOA", "AB": "STATEWIDE", "AG": "GOA", "BB": "STATEWIDE", "BG": "GOA", "FB": "STATEWIDE", "FG": "GOA", "GB": "STATEWIDE", "GG": "GOA", "HB": "STATEWIDE", "HG": "GOA", "IB": "STATEWIDE", "IG": "GOA", "F": "ATKA/AMLIA ISLANDS", "R": "ADAK", "AFW": "FEDERAL WATERS", "ASW": "STATE WATERS", "BFW": "FEDERAL WATERS", "BSW": "STATE WATERS" };

  var fishNodes = null,
      fishLinks = null,
      margin = { // expressed as percentages
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  },

  //  width = 100 - margin.right - margin.left,
  //  height = 52 - margin.top - margin.bottom,
  threshold = 10;

  var colors = ['#30653a', '#7d4f00', '#4e597d', '#2a616e', '#a3301e', '#81447f', '#005fa9'];

  var rScale = d3.scaleSqrt().range([5, 10]); // percentages
  //var strengthScale = d3.scaleLinear().range([1,10]);
  var simulation = d3.forceSimulation().force("link", d3.forceLink().strength(0));
  /*.force("charge", d3.forceManyBody().strength(1.5))
  .force("center", d3.forceCenter(width / 2, height / 2))
  .force("collide", d3.forceCollide().radius(2).iterations(2));//.radius(function(d) { return rScale(d.count); }).iterations(2));*/

  window.simulation = simulation;

  d3.csv('adjacency-cx.csv', function (data) {
    console.log(data);
    fishLinks = data;
    goGate();
  });
  d3.csv('fisheries-nodes-with-coords.csv', function (data) {
    console.log(data);
    data.forEach(function (each) {
      for (var key in each) {
        if (each.hasOwnProperty(key)) {
          if (!isNaN(+each[key])) {
            each[key] = +each[key];
          }
        }
      }
    });
    fishNodes = data;
    goGate();
  });

  function goGate() {
    if (fishNodes !== null && fishLinks !== null) {
      go();
    } else {
      return;
    }
  }

  var newLinks = [],
      network = {};

  function go() {
    function isMatch(key) {
      return fishNodes.find(function (obj) {
        return obj.id === key;
      });
    }
    fishLinks.forEach(function (each, i) {
      for (var key in each) {
        if (each.hasOwnProperty(key)) {
          var match = isMatch(key);
          var index = fishNodes.indexOf(match);
          //if (index !== i && each[key] !== "0" ){ // if source and target are not the same and no
          newLinks.push({
            source: i,
            target: index,
            value: +each[key]
          });
          // }
        }
      }
    }); // end forEach
    network.nodes = fishNodes;
    network.links = newLinks;
    console.log(network);
    render(network); // TO DO : for the force directed graph, filter
  } // end go()

  function render(network) {
    /* if (true){
       return;
     }*/
    network.links.forEach(function (link) {
      if (link.target === link.source) {
        network.nodes[link.target].count = link.value;
      }
    });
    simulation.nodes(network.nodes).on("tick", ticked);

    var linkForce = simulation.force("link").links(network.links.filter(function (d) {
      return d.value !== 0;
    }));

    rScale.domain(d3.extent(network.nodes, function (d) {
      return d.count;
    }));
    //options 1–3
    //strengthScale.domain([0, d3.mean(network.links, d => d.value) + d3.deviation(network.links, d => d.value) ]);
    //option 4
    //strengthScale.domain([0,1]);


    /* function count(node){
       var i = 0;
       network.links.forEach(link => {
         if ( link.source === node || link.target === node ){
           i++;
         }
       });
       return i;
     }*/

    linkForce.strength(0); /*d => {
                           /* d3's default link strength is:
                           function strength(link) {
                           return 1 / Math.min(count(link.source), count(link.target));
                           }
                           "This default was chosen because it automatically reduces the
                           strength of links connected to heavily-connected nodes, improving stability."
                           https://github.com/d3/d3-force
                           The return values below reproduce that default but with a factor based on the value (d.value)
                           of the link, here representing the number of permits shared between fisheries.
                           For options 1–3: the domain of the scale function is between 0 and 1 stdev above the mean value, with
                           the range being 1–10.
                           For option 4 the domain in 0 to 1 and the range is 0 to 10.
                           Option 1: Based on absolute value of shared permits; treats all nodes the same, whether they belong to
                           the same cluster or not.
                           Option 2: same as option one but applies the value only to nodes of the same cluster. Nodes of different
                           clusters get the default strength, uninformed by d.value.
                           Option 3: same as option two but weakens the force between nodes of different cluster by a factor of 1/10th.
                           That separates out the clusters more.
                           Option 4: Scales by the relative value, number of shared permits divided by the number of permits in the smaller
                           of the two nodes. Still divided by count of links. Treats nodes the same regardless of cluster.
                           */
    // 1
    //return strengthScale(d.value) / Math.min(count(d.source), count(d.target)); 
    // 2
    //return d.target.cluster === d.source.cluster ?  strengthScale(d.value) / Math.min(count(d.source), count(d.target)) : ( 1 / Math.min(count(d.source), count(d.target)) ); 
    // 3
    // return d.target.cluster === d.source.cluster ?  strengthScale(d.value) / Math.min(count(d.source), count(d.target)) : ( 1 / Math.min(count(d.source), count(d.target)) ) / 10; 
    //4
    /* return d.target.cluster === d.source.cluster ? strengthScale(d.value / Math.min(d.source.count, d.target.count)) / Math.min(count(d.source), count(d.target)) : ( strengthScale(d.value / Math.min(d.source.count, d.target.count)) / Math.min(count(d.source), count(d.target)) ) / 20; 
     
    });*/
    var svg = d3.select('body').append('svg').attr('width', '100%').attr('xmlns', 'http://www.w3.org/2000/svg').attr('version', '1.1').attr('viewBox', '0 0 100 53');

    svg.append('g').attr('transform', 'scale(' + scaleFactor + ')').append('path').attr('d', alaskaPath).attr('class', 'alaska');
    svg.append('g').attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');

    var link = svg.append("g").attr("class", "links").selectAll("line").data(network.links.filter(function (d) {

      return d.value !== 0 && d.source.area !== 'B' && d.target.area !== 'B';
    })).enter().append("line").attr('stroke', function (d) {

      return d.source.cluster === d.target.cluster ? colors[d.target.cluster - 1] : '#5a5a5a';
    }).attr("stroke-width", function (d) {
      if (d.value > threshold || d.source.cluster === d.target.cluster) {
        return rScale(d.value) * scaleFactor / 2;
      } else {
        return 0;
      }
    });

    var nodeTooltip = d3.tip().attr("class", "d3-tip label-tip").direction('n').offset([4, 0]).html(function (d) {
      return '\n          ' + d.id + '<br />\n          <br />\n          Species: ' + species[d.species] + '<br />\n          Gear: ' + gear[d.gear.toString()] + '<br />\n          Area: ' + regions[d.area] + '<br />\n          <br />\n          Cluster: ' + d.cluster + '\n\n          ';
    });

    var node = svg.append("g").attr("class", "nodes").selectAll("circle").data(network.nodes.filter(function (d) {
      return d.area !== 'B' && d.cluster !== 6 && d.cluster !== 7;
    })).enter().append("g").attr("transform", function (d) {
      return 'translate(' + d.x + ',' + d.y + ')';
    });

    node.append('circle').attr("r", function (d) {
      return scaleFactor * rScale(d.count);
    }).attr("fill", function (d) {
      return colors[d.cluster - 1];
    }).call(nodeTooltip);

    node.append('text').text(function (d) {
      return d.id;
    }).attr('transform', function (d) {
      return 'translate(0,' + (-0.1 - rScale(d.count) * scaleFactor) + ')';
    });

    node.on('mouseenter', function (e) {
      nodeTooltip.show(e);
    }).on('mouseleave', nodeTooltip.hide).call(d3.drag().on("start", dragstarted).on("drag", dragged).on("end", dragended));

    node.append("title").text(function (d) {
      return d.id;
    });

    function ticked() {
      link.attr("x1", function (d) {
        return d.source.x;
      }).attr("y1", function (d) {
        return d.source.y;
      }).attr("x2", function (d) {
        return d.target.x;
      }).attr("y2", function (d) {
        return d.target.y;
      });

      node.attr("transform", function (d) {
        //d.x = Math.max(rScale(d.count), Math.min(width - rScale(d.count), d.x));
        return 'translate(' + d.x + ',' + d.y + ')';
      });
    }
  } // end render()
  function dragstarted(d) {
    if (!d3.event.active) {
      simulation.alphaTarget(0.3).restart();
    }
    d.fx = d.x;
    d.fy = d.y;
  }

  function dragged(d) {
    d.fx = d3.event.x;
    d.fy = d3.event.y;
  }

  function dragended(d) {
    if (!d3.event.active) {
      simulation.alphaTarget(0);
    }
    d.fx = null;
    d.fy = null;
  }
})();

},{"../js-exports/polyfills":2,"../js-vendor/d3-tip":3}],2:[function(require,module,exports){
(function (global){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/**
 * SVG focus 
 * Copyright(c) 2017, John Osterman
 *
 * MIT License
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and 
 * associated documentation files (the "Software"), to deal in the Software without restriction, including 
 * without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell 
 * copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the 
 * following conditions:

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT 
 * LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO 
 * EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER 
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE 
 * USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

// IE/Edge (perhaps others) does not allow programmatic focusing of SVG Elements (via `focus()`). Same for `blur()`.

var SVGFocus = exports.SVGFocus = function () {
  if ('focus' in SVGElement.prototype === false) {
    SVGElement.prototype.focus = HTMLElement.prototype.focus;
  }
  if ('blur' in SVGElement.prototype === false) {
    SVGElement.prototype.blur = HTMLElement.prototype.blur;
  }
}();

/**
 * innerHTML property for SVGElement
 * Copyright(c) 2010, Jeff Schiller
 *
 * Licensed under the Apache License, Version 2
 *
 * Works in a SVG document in Chrome 6+, Safari 5+, Firefox 4+ and IE9+.
 * Works in a HTML5 document in Chrome 7+, Firefox 4+ and IE9+.
 * Does not work in Opera since it doesn't support the SVGElement interface yet.
 *
 * I haven't decided on the best name for this property - thus the duplication.
 */
// edited by John Osterman to declare the variable `sXML`, which was referenced without being declared
// which failed silently in implicit strict mode of an export

// most browsers allow setting innerHTML of svg elements but IE does not (not an HTML element)
// this polyfill provides that. necessary for d3 method `.html()` on svg elements

var SVGInnerHTML = exports.SVGInnerHTML = function () {
  var serializeXML = function serializeXML(node, output) {
    var nodeType = node.nodeType;
    if (nodeType == 3) {
      // TEXT nodes.
      // Replace special XML characters with their entities.
      output.push(node.textContent.replace(/&/, '&amp;').replace(/</, '&lt;').replace('>', '&gt;'));
    } else if (nodeType == 1) {
      // ELEMENT nodes.
      // Serialize Element nodes.
      output.push('<', node.tagName);
      if (node.hasAttributes()) {
        var attrMap = node.attributes;
        for (var i = 0, len = attrMap.length; i < len; ++i) {
          var attrNode = attrMap.item(i);
          output.push(' ', attrNode.name, '=\'', attrNode.value, '\'');
        }
      }
      if (node.hasChildNodes()) {
        output.push('>');
        var childNodes = node.childNodes;
        for (var i = 0, len = childNodes.length; i < len; ++i) {
          serializeXML(childNodes.item(i), output);
        }
        output.push('</', node.tagName, '>');
      } else {
        output.push('/>');
      }
    } else if (nodeType == 8) {
      // TODO(codedread): Replace special characters with XML entities?
      output.push('<!--', node.nodeValue, '-->');
    } else {
      // TODO: Handle CDATA nodes.
      // TODO: Handle ENTITY nodes.
      // TODO: Handle DOCUMENT nodes.
      throw 'Error serializing XML. Unhandled node of type: ' + nodeType;
    }
  };
  // The innerHTML DOM property for SVGElement.
  if ('innerHTML' in SVGElement.prototype === false) {
    Object.defineProperty(SVGElement.prototype, 'innerHTML', {
      get: function get() {
        var output = [];
        var childNode = this.firstChild;
        while (childNode) {
          serializeXML(childNode, output);
          childNode = childNode.nextSibling;
        }
        return output.join('');
      },
      set: function set(markupText) {
        console.log(this);
        // Wipe out the current contents of the element.
        while (this.firstChild) {
          this.removeChild(this.firstChild);
        }

        try {
          // Parse the markup into valid nodes.
          var dXML = new DOMParser();
          dXML.async = false;
          // Wrap the markup into a SVG node to ensure parsing works.
          console.log(markupText);
          var sXML = '<svg xmlns="http://www.w3.org/2000/svg">' + markupText + '</svg>';
          console.log(sXML);
          var svgDocElement = dXML.parseFromString(sXML, 'text/xml').documentElement;

          // Now take each node, import it and append to this element.
          var childNode = svgDocElement.firstChild;
          while (childNode) {
            this.appendChild(this.ownerDocument.importNode(childNode, true));
            childNode = childNode.nextSibling;
          }
        } catch (e) {
          throw new Error('Error parsing XML string');
        };
      }
    });

    // The innerSVG DOM property for SVGElement.
    Object.defineProperty(SVGElement.prototype, 'innerSVG', {
      get: function get() {
        return this.innerHTML;
      },
      set: function set(markupText) {
        this.innerHTML = markupText;
      }
    });
  }
}();

// https://tc39.github.io/ecma262/#sec-array.prototype.find
var arrayFind = exports.arrayFind = function () {
  if (!Array.prototype.find) {
    Object.defineProperty(Array.prototype, 'find', {
      value: function value(predicate) {
        // 1. Let O be ? ToObject(this value).
        if (this == null) {
          throw new TypeError('"this" is null or not defined');
        }

        var o = Object(this);

        // 2. Let len be ? ToLength(? Get(O, "length")).
        var len = o.length >>> 0;

        // 3. If IsCallable(predicate) is false, throw a TypeError exception.
        if (typeof predicate !== 'function') {
          throw new TypeError('predicate must be a function');
        }

        // 4. If thisArg was supplied, let T be thisArg; else let T be undefined.
        var thisArg = arguments[1];

        // 5. Let k be 0.
        var k = 0;

        // 6. Repeat, while k < len
        while (k < len) {
          // a. Let Pk be ! ToString(k).
          // b. Let kValue be ? Get(O, Pk).
          // c. Let testResult be ToBoolean(? Call(predicate, T, « kValue, k, O »)).
          // d. If testResult is true, return kValue.
          var kValue = o[k];
          if (predicate.call(thisArg, kValue, k, o)) {
            return kValue;
          }
          // e. Increase k by 1.
          k++;
        }

        // 7. Return undefined.
        return undefined;
      }
    });
  }
}();

// Copyright (C) 2011-2012 Software Languages Lab, Vrije Universiteit Brussel
// This code is dual-licensed under both the Apache License and the MPL

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/* Version: MPL 1.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is a shim for the ES-Harmony reflection module
 *
 * The Initial Developer of the Original Code is
 * Tom Van Cutsem, Vrije Universiteit Brussel.
 * Portions created by the Initial Developer are Copyright (C) 2011-2012
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 */

// ----------------------------------------------------------------------------

// This file is a polyfill for the upcoming ECMAScript Reflect API,
// including support for Proxies. See the draft specification at:
// http://wiki.ecmascript.org/doku.php?id=harmony:reflect_api
// http://wiki.ecmascript.org/doku.php?id=harmony:direct_proxies

// For an implementation of the Handler API, see handlers.js, which implements:
// http://wiki.ecmascript.org/doku.php?id=harmony:virtual_object_api

// This implementation supersedes the earlier polyfill at:
// code.google.com/p/es-lab/source/browse/trunk/src/proxies/DirectProxies.js

// This code was tested on tracemonkey / Firefox 12
//  (and should run fine on older Firefox versions starting with FF4)
// The code also works correctly on
//   v8 --harmony_proxies --harmony_weakmaps (v3.6.5.1)

// Language Dependencies:
//  - ECMAScript 5/strict
//  - "old" (i.e. non-direct) Harmony Proxies
//  - Harmony WeakMaps
// Patches:
//  - Object.{freeze,seal,preventExtensions}
//  - Object.{isFrozen,isSealed,isExtensible}
//  - Object.getPrototypeOf
//  - Object.keys
//  - Object.prototype.valueOf
//  - Object.prototype.isPrototypeOf
//  - Object.prototype.toString
//  - Object.prototype.hasOwnProperty
//  - Object.getOwnPropertyDescriptor
//  - Object.defineProperty
//  - Object.defineProperties
//  - Object.getOwnPropertyNames
//  - Object.getOwnPropertySymbols
//  - Object.getPrototypeOf
//  - Object.setPrototypeOf
//  - Object.assign
//  - Function.prototype.toString
//  - Date.prototype.toString
//  - Array.isArray
//  - Array.prototype.concat
//  - Proxy
// Adds new globals:
//  - Reflect

// Direct proxies can be created via Proxy(target, handler)

// ----------------------------------------------------------------------------

var reflect = exports.reflect = function (global) {
  // function-as-module pattern
  "use strict";

  // === Direct Proxies: Invariant Enforcement ===

  // Direct proxies build on non-direct proxies by automatically wrapping
  // all user-defined proxy handlers in a Validator handler that checks and
  // enforces ES5 invariants.

  // A direct proxy is a proxy for an existing object called the target object.

  // A Validator handler is a wrapper for a target proxy handler H.
  // The Validator forwards all operations to H, but additionally
  // performs a number of integrity checks on the results of some traps,
  // to make sure H does not violate the ES5 invariants w.r.t. non-configurable
  // properties and non-extensible, sealed or frozen objects.

  // For each property that H exposes as own, non-configurable
  // (e.g. by returning a descriptor from a call to getOwnPropertyDescriptor)
  // the Validator handler defines those properties on the target object.
  // When the proxy becomes non-extensible, also configurable own properties
  // are checked against the target.
  // We will call properties that are defined on the target object
  // "fixed properties".

  // We will name fixed non-configurable properties "sealed properties".
  // We will name fixed non-configurable non-writable properties "frozen
  // properties".

  // The Validator handler upholds the following invariants w.r.t. non-configurability:
  // - getOwnPropertyDescriptor cannot report sealed properties as non-existent
  // - getOwnPropertyDescriptor cannot report incompatible changes to the
  //   attributes of a sealed property (e.g. reporting a non-configurable
  //   property as configurable, or reporting a non-configurable, non-writable
  //   property as writable)
  // - getPropertyDescriptor cannot report sealed properties as non-existent
  // - getPropertyDescriptor cannot report incompatible changes to the
  //   attributes of a sealed property. It _can_ report incompatible changes
  //   to the attributes of non-own, inherited properties.
  // - defineProperty cannot make incompatible changes to the attributes of
  //   sealed properties
  // - deleteProperty cannot report a successful deletion of a sealed property
  // - hasOwn cannot report a sealed property as non-existent
  // - has cannot report a sealed property as non-existent
  // - get cannot report inconsistent values for frozen data
  //   properties, and must report undefined for sealed accessors with an
  //   undefined getter
  // - set cannot report a successful assignment for frozen data
  //   properties or sealed accessors with an undefined setter.
  // - get{Own}PropertyNames lists all sealed properties of the target.
  // - keys lists all enumerable sealed properties of the target.
  // - enumerate lists all enumerable sealed properties of the target.
  // - if a property of a non-extensible proxy is reported as non-existent,
  //   then it must forever be reported as non-existent. This applies to
  //   own and inherited properties and is enforced in the
  //   deleteProperty, get{Own}PropertyDescriptor, has{Own},
  //   get{Own}PropertyNames, keys and enumerate traps

  // Violation of any of these invariants by H will result in TypeError being
  // thrown.

  // Additionally, once Object.preventExtensions, Object.seal or Object.freeze
  // is invoked on the proxy, the set of own property names for the proxy is
  // fixed. Any property name that is not fixed is called a 'new' property.

  // The Validator upholds the following invariants regarding extensibility:
  // - getOwnPropertyDescriptor cannot report new properties as existent
  //   (it must report them as non-existent by returning undefined)
  // - defineProperty cannot successfully add a new property (it must reject)
  // - getOwnPropertyNames cannot list new properties
  // - hasOwn cannot report true for new properties (it must report false)
  // - keys cannot list new properties

  // Invariants currently not enforced:
  // - getOwnPropertyNames lists only own property names
  // - keys lists only enumerable own property names
  // Both traps may list more property names than are actually defined on the
  // target.

  // Invariants with regard to inheritance are currently not enforced.
  // - a non-configurable potentially inherited property on a proxy with
  //   non-mutable ancestry cannot be reported as non-existent
  // (An object with non-mutable ancestry is a non-extensible object whose
  // [[Prototype]] is either null or an object with non-mutable ancestry.)

  // Changes in Handler API compared to previous harmony:proxies, see:
  // http://wiki.ecmascript.org/doku.php?id=strawman:direct_proxies
  // http://wiki.ecmascript.org/doku.php?id=harmony:direct_proxies

  // ----------------------------------------------------------------------------

  // ---- WeakMap polyfill ----

  // TODO: find a proper WeakMap polyfill

  // define an empty WeakMap so that at least the Reflect module code
  // will work in the absence of WeakMaps. Proxy emulation depends on
  // actual WeakMaps, so will not work with this little shim.

  if (typeof WeakMap === "undefined") {
    global.WeakMap = function () {};
    global.WeakMap.prototype = {
      get: function get(k) {
        return undefined;
      },
      set: function set(k, v) {
        throw new Error("WeakMap not supported");
      }
    };
  }

  // ---- Normalization functions for property descriptors ----

  function isStandardAttribute(name) {
    return (/^(get|set|value|writable|enumerable|configurable)$/.test(name)
    );
  }

  // Adapted from ES5 section 8.10.5
  function toPropertyDescriptor(obj) {
    if (Object(obj) !== obj) {
      throw new TypeError("property descriptor should be an Object, given: " + obj);
    }
    var desc = {};
    if ('enumerable' in obj) {
      desc.enumerable = !!obj.enumerable;
    }
    if ('configurable' in obj) {
      desc.configurable = !!obj.configurable;
    }
    if ('value' in obj) {
      desc.value = obj.value;
    }
    if ('writable' in obj) {
      desc.writable = !!obj.writable;
    }
    if ('get' in obj) {
      var getter = obj.get;
      if (getter !== undefined && typeof getter !== "function") {
        throw new TypeError("property descriptor 'get' attribute must be " + "callable or undefined, given: " + getter);
      }
      desc.get = getter;
    }
    if ('set' in obj) {
      var setter = obj.set;
      if (setter !== undefined && typeof setter !== "function") {
        throw new TypeError("property descriptor 'set' attribute must be " + "callable or undefined, given: " + setter);
      }
      desc.set = setter;
    }
    if ('get' in desc || 'set' in desc) {
      if ('value' in desc || 'writable' in desc) {
        throw new TypeError("property descriptor cannot be both a data and an " + "accessor descriptor: " + obj);
      }
    }
    return desc;
  }

  function isAccessorDescriptor(desc) {
    if (desc === undefined) return false;
    return 'get' in desc || 'set' in desc;
  }
  function isDataDescriptor(desc) {
    if (desc === undefined) return false;
    return 'value' in desc || 'writable' in desc;
  }
  function isGenericDescriptor(desc) {
    if (desc === undefined) return false;
    return !isAccessorDescriptor(desc) && !isDataDescriptor(desc);
  }

  function toCompletePropertyDescriptor(desc) {
    var internalDesc = toPropertyDescriptor(desc);
    if (isGenericDescriptor(internalDesc) || isDataDescriptor(internalDesc)) {
      if (!('value' in internalDesc)) {
        internalDesc.value = undefined;
      }
      if (!('writable' in internalDesc)) {
        internalDesc.writable = false;
      }
    } else {
      if (!('get' in internalDesc)) {
        internalDesc.get = undefined;
      }
      if (!('set' in internalDesc)) {
        internalDesc.set = undefined;
      }
    }
    if (!('enumerable' in internalDesc)) {
      internalDesc.enumerable = false;
    }
    if (!('configurable' in internalDesc)) {
      internalDesc.configurable = false;
    }
    return internalDesc;
  }

  function isEmptyDescriptor(desc) {
    return !('get' in desc) && !('set' in desc) && !('value' in desc) && !('writable' in desc) && !('enumerable' in desc) && !('configurable' in desc);
  }

  function isEquivalentDescriptor(desc1, desc2) {
    return sameValue(desc1.get, desc2.get) && sameValue(desc1.set, desc2.set) && sameValue(desc1.value, desc2.value) && sameValue(desc1.writable, desc2.writable) && sameValue(desc1.enumerable, desc2.enumerable) && sameValue(desc1.configurable, desc2.configurable);
  }

  // copied from http://wiki.ecmascript.org/doku.php?id=harmony:egal
  function sameValue(x, y) {
    if (x === y) {
      // 0 === -0, but they are not identical
      return x !== 0 || 1 / x === 1 / y;
    }

    // NaN !== NaN, but they are identical.
    // NaNs are the only non-reflexive value, i.e., if x !== x,
    // then x is a NaN.
    // isNaN is broken: it converts its argument to number, so
    // isNaN("foo") => true
    return x !== x && y !== y;
  }

  /**
   * Returns a fresh property descriptor that is guaranteed
   * to be complete (i.e. contain all the standard attributes).
   * Additionally, any non-standard enumerable properties of
   * attributes are copied over to the fresh descriptor.
   *
   * If attributes is undefined, returns undefined.
   *
   * See also: http://wiki.ecmascript.org/doku.php?id=harmony:proxies_semantics
   */
  function normalizeAndCompletePropertyDescriptor(attributes) {
    if (attributes === undefined) {
      return undefined;
    }
    var desc = toCompletePropertyDescriptor(attributes);
    // Note: no need to call FromPropertyDescriptor(desc), as we represent
    // "internal" property descriptors as proper Objects from the start
    for (var name in attributes) {
      if (!isStandardAttribute(name)) {
        Object.defineProperty(desc, name, { value: attributes[name],
          writable: true,
          enumerable: true,
          configurable: true });
      }
    }
    return desc;
  }

  /**
   * Returns a fresh property descriptor whose standard
   * attributes are guaranteed to be data properties of the right type.
   * Additionally, any non-standard enumerable properties of
   * attributes are copied over to the fresh descriptor.
   *
   * If attributes is undefined, will throw a TypeError.
   *
   * See also: http://wiki.ecmascript.org/doku.php?id=harmony:proxies_semantics
   */
  function normalizePropertyDescriptor(attributes) {
    var desc = toPropertyDescriptor(attributes);
    // Note: no need to call FromGenericPropertyDescriptor(desc), as we represent
    // "internal" property descriptors as proper Objects from the start
    for (var name in attributes) {
      if (!isStandardAttribute(name)) {
        Object.defineProperty(desc, name, { value: attributes[name],
          writable: true,
          enumerable: true,
          configurable: true });
      }
    }
    return desc;
  }

  // store a reference to the real ES5 primitives before patching them later
  var prim_preventExtensions = Object.preventExtensions,
      prim_seal = Object.seal,
      prim_freeze = Object.freeze,
      prim_isExtensible = Object.isExtensible,
      prim_isSealed = Object.isSealed,
      prim_isFrozen = Object.isFrozen,
      prim_getPrototypeOf = Object.getPrototypeOf,
      prim_getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor,
      prim_defineProperty = Object.defineProperty,
      prim_defineProperties = Object.defineProperties,
      prim_keys = Object.keys,
      prim_getOwnPropertyNames = Object.getOwnPropertyNames,
      prim_getOwnPropertySymbols = Object.getOwnPropertySymbols,
      prim_assign = Object.assign,
      prim_isArray = Array.isArray,
      prim_concat = Array.prototype.concat,
      prim_isPrototypeOf = Object.prototype.isPrototypeOf,
      prim_hasOwnProperty = Object.prototype.hasOwnProperty;

  // these will point to the patched versions of the respective methods on
  // Object. They are used within this module as the "intrinsic" bindings
  // of these methods (i.e. the "original" bindings as defined in the spec)
  var Object_isFrozen, Object_isSealed, Object_isExtensible, Object_getPrototypeOf, Object_getOwnPropertyNames;

  /**
   * A property 'name' is fixed if it is an own property of the target.
   */
  function isFixed(name, target) {
    return {}.hasOwnProperty.call(target, name);
  }
  function isSealed(name, target) {
    var desc = Object.getOwnPropertyDescriptor(target, name);
    if (desc === undefined) {
      return false;
    }
    return desc.configurable === false;
  }
  function isSealedDesc(desc) {
    return desc !== undefined && desc.configurable === false;
  }

  /**
   * Performs all validation that Object.defineProperty performs,
   * without actually defining the property. Returns a boolean
   * indicating whether validation succeeded.
   *
   * Implementation transliterated from ES5.1 section 8.12.9
   */
  function isCompatibleDescriptor(extensible, current, desc) {
    if (current === undefined && extensible === false) {
      return false;
    }
    if (current === undefined && extensible === true) {
      return true;
    }
    if (isEmptyDescriptor(desc)) {
      return true;
    }
    if (isEquivalentDescriptor(current, desc)) {
      return true;
    }
    if (current.configurable === false) {
      if (desc.configurable === true) {
        return false;
      }
      if ('enumerable' in desc && desc.enumerable !== current.enumerable) {
        return false;
      }
    }
    if (isGenericDescriptor(desc)) {
      return true;
    }
    if (isDataDescriptor(current) !== isDataDescriptor(desc)) {
      if (current.configurable === false) {
        return false;
      }
      return true;
    }
    if (isDataDescriptor(current) && isDataDescriptor(desc)) {
      if (current.configurable === false) {
        if (current.writable === false && desc.writable === true) {
          return false;
        }
        if (current.writable === false) {
          if ('value' in desc && !sameValue(desc.value, current.value)) {
            return false;
          }
        }
      }
      return true;
    }
    if (isAccessorDescriptor(current) && isAccessorDescriptor(desc)) {
      if (current.configurable === false) {
        if ('set' in desc && !sameValue(desc.set, current.set)) {
          return false;
        }
        if ('get' in desc && !sameValue(desc.get, current.get)) {
          return false;
        }
      }
    }
    return true;
  }

  // ES6 7.3.11 SetIntegrityLevel
  // level is one of "sealed" or "frozen"
  function setIntegrityLevel(target, level) {
    var ownProps = Object_getOwnPropertyNames(target);
    var pendingException = undefined;
    if (level === "sealed") {
      var l = +ownProps.length;
      var k;
      for (var i = 0; i < l; i++) {
        k = String(ownProps[i]);
        try {
          Object.defineProperty(target, k, { configurable: false });
        } catch (e) {
          if (pendingException === undefined) {
            pendingException = e;
          }
        }
      }
    } else {
      // level === "frozen"
      var l = +ownProps.length;
      var k;
      for (var i = 0; i < l; i++) {
        k = String(ownProps[i]);
        try {
          var currentDesc = Object.getOwnPropertyDescriptor(target, k);
          if (currentDesc !== undefined) {
            var desc;
            if (isAccessorDescriptor(currentDesc)) {
              desc = { configurable: false };
            } else {
              desc = { configurable: false, writable: false };
            }
            Object.defineProperty(target, k, desc);
          }
        } catch (e) {
          if (pendingException === undefined) {
            pendingException = e;
          }
        }
      }
    }
    if (pendingException !== undefined) {
      throw pendingException;
    }
    return Reflect.preventExtensions(target);
  }

  // ES6 7.3.12 TestIntegrityLevel
  // level is one of "sealed" or "frozen"
  function testIntegrityLevel(target, level) {
    var isExtensible = Object_isExtensible(target);
    if (isExtensible) return false;

    var ownProps = Object_getOwnPropertyNames(target);
    var pendingException = undefined;
    var configurable = false;
    var writable = false;

    var l = +ownProps.length;
    var k;
    var currentDesc;
    for (var i = 0; i < l; i++) {
      k = String(ownProps[i]);
      try {
        currentDesc = Object.getOwnPropertyDescriptor(target, k);
        configurable = configurable || currentDesc.configurable;
        if (isDataDescriptor(currentDesc)) {
          writable = writable || currentDesc.writable;
        }
      } catch (e) {
        if (pendingException === undefined) {
          pendingException = e;
          configurable = true;
        }
      }
    }
    if (pendingException !== undefined) {
      throw pendingException;
    }
    if (level === "frozen" && writable === true) {
      return false;
    }
    if (configurable === true) {
      return false;
    }
    return true;
  }

  // ---- The Validator handler wrapper around user handlers ----

  /**
   * @param target the object wrapped by this proxy.
   * As long as the proxy is extensible, only non-configurable properties
   * are checked against the target. Once the proxy becomes non-extensible,
   * invariants w.r.t. non-extensibility are also enforced.
   *
   * @param handler the handler of the direct proxy. The object emulated by
   * this handler is validated against the target object of the direct proxy.
   * Any violations that the handler makes against the invariants
   * of the target will cause a TypeError to be thrown.
   *
   * Both target and handler must be proper Objects at initialization time.
   */
  function Validator(target, handler) {
    // for non-revokable proxies, these are const references
    // for revokable proxies, on revocation:
    // - this.target is set to null
    // - this.handler is set to a handler that throws on all traps
    this.target = target;
    this.handler = handler;
  }

  Validator.prototype = {

    /**
     * If getTrap returns undefined, the caller should perform the
     * default forwarding behavior.
     * If getTrap returns normally otherwise, the return value
     * will be a callable trap function. When calling the trap function,
     * the caller is responsible for binding its |this| to |this.handler|.
     */
    getTrap: function getTrap(trapName) {
      var trap = this.handler[trapName];
      if (trap === undefined) {
        // the trap was not defined,
        // perform the default forwarding behavior
        return undefined;
      }

      if (typeof trap !== "function") {
        throw new TypeError(trapName + " trap is not callable: " + trap);
      }

      return trap;
    },

    // === fundamental traps ===

    /**
     * If name denotes a fixed property, check:
     *   - whether targetHandler reports it as existent
     *   - whether the returned descriptor is compatible with the fixed property
     * If the proxy is non-extensible, check:
     *   - whether name is not a new property
     * Additionally, the returned descriptor is normalized and completed.
     */
    getOwnPropertyDescriptor: function getOwnPropertyDescriptor(name) {
      "use strict";

      var trap = this.getTrap("getOwnPropertyDescriptor");
      if (trap === undefined) {
        return Reflect.getOwnPropertyDescriptor(this.target, name);
      }

      name = String(name);
      var desc = trap.call(this.handler, this.target, name);
      desc = normalizeAndCompletePropertyDescriptor(desc);

      var targetDesc = Object.getOwnPropertyDescriptor(this.target, name);
      var extensible = Object.isExtensible(this.target);

      if (desc === undefined) {
        if (isSealedDesc(targetDesc)) {
          throw new TypeError("cannot report non-configurable property '" + name + "' as non-existent");
        }
        if (!extensible && targetDesc !== undefined) {
          // if handler is allowed to return undefined, we cannot guarantee
          // that it will not return a descriptor for this property later.
          // Once a property has been reported as non-existent on a non-extensible
          // object, it should forever be reported as non-existent
          throw new TypeError("cannot report existing own property '" + name + "' as non-existent on a non-extensible object");
        }
        return undefined;
      }

      // at this point, we know (desc !== undefined), i.e.
      // targetHandler reports 'name' as an existing property

      // Note: we could collapse the following two if-tests into a single
      // test. Separating out the cases to improve error reporting.

      if (!extensible) {
        if (targetDesc === undefined) {
          throw new TypeError("cannot report a new own property '" + name + "' on a non-extensible object");
        }
      }

      if (name !== undefined) {
        if (!isCompatibleDescriptor(extensible, targetDesc, desc)) {
          throw new TypeError("cannot report incompatible property descriptor " + "for property '" + name + "'");
        }
      }

      if (desc.configurable === false) {
        if (targetDesc === undefined || targetDesc.configurable === true) {
          // if the property is configurable or non-existent on the target,
          // but is reported as a non-configurable property, it may later be
          // reported as configurable or non-existent, which violates the
          // invariant that if the property might change or disappear, the
          // configurable attribute must be true.
          throw new TypeError("cannot report a non-configurable descriptor " + "for configurable or non-existent property '" + name + "'");
        }
        if ('writable' in desc && desc.writable === false) {
          if (targetDesc.writable === true) {
            // if the property is non-configurable, writable on the target,
            // but is reported as non-configurable, non-writable, it may later
            // be reported as non-configurable, writable again, which violates
            // the invariant that a non-configurable, non-writable property
            // may not change state.
            throw new TypeError("cannot report non-configurable, writable property '" + name + "' as non-configurable, non-writable");
          }
        }
      }

      return desc;
    },

    /**
     * In the direct proxies design with refactored prototype climbing,
     * this trap is deprecated. For proxies-as-prototypes, instead
     * of calling this trap, the get, set, has or enumerate traps are
     * called instead.
     *
     * In this implementation, we "abuse" getPropertyDescriptor to
     * support trapping the get or set traps for proxies-as-prototypes.
     * We do this by returning a getter/setter pair that invokes
     * the corresponding traps.
     *
     * While this hack works for inherited property access, it has some
     * quirks:
     *
     * In Firefox, this trap is only called after a prior invocation
     * of the 'has' trap has returned true. Hence, expect the following
     * behavior:
     * <code>
     * var child = Object.create(Proxy(target, handler));
     * child[name] // triggers handler.has(target, name)
     * // if that returns true, triggers handler.get(target, name, child)
     * </code>
     *
     * On v8, the 'in' operator, when applied to an object that inherits
     * from a proxy, will call getPropertyDescriptor and walk the proto-chain.
     * That calls the below getPropertyDescriptor trap on the proxy. The
     * result of the 'in'-operator is then determined by whether this trap
     * returns undefined or a property descriptor object. That is why
     * we first explicitly trigger the 'has' trap to determine whether
     * the property exists.
     *
     * This has the side-effect that when enumerating properties on
     * an object that inherits from a proxy in v8, only properties
     * for which 'has' returns true are returned:
     *
     * <code>
     * var child = Object.create(Proxy(target, handler));
     * for (var prop in child) {
     *   // only enumerates prop if (prop in child) returns true
     * }
     * </code>
     */
    getPropertyDescriptor: function getPropertyDescriptor(name) {
      var handler = this;

      if (!handler.has(name)) return undefined;

      return {
        get: function get() {
          return handler.get(this, name);
        },
        set: function set(val) {
          if (handler.set(this, name, val)) {
            return val;
          } else {
            throw new TypeError("failed assignment to " + name);
          }
        },
        enumerable: true,
        configurable: true
      };
    },

    /**
     * If name denotes a fixed property, check for incompatible changes.
     * If the proxy is non-extensible, check that new properties are rejected.
     */
    defineProperty: function defineProperty(name, desc) {
      // TODO(tvcutsem): the current tracemonkey implementation of proxies
      // auto-completes 'desc', which is not correct. 'desc' should be
      // normalized, but not completed. Consider:
      // Object.defineProperty(proxy, 'foo', {enumerable:false})
      // This trap will receive desc =
      //  {value:undefined,writable:false,enumerable:false,configurable:false}
      // This will also set all other attributes to their default value,
      // which is unexpected and different from [[DefineOwnProperty]].
      // Bug filed: https://bugzilla.mozilla.org/show_bug.cgi?id=601329

      var trap = this.getTrap("defineProperty");
      if (trap === undefined) {
        // default forwarding behavior
        return Reflect.defineProperty(this.target, name, desc);
      }

      name = String(name);
      var descObj = normalizePropertyDescriptor(desc);
      var success = trap.call(this.handler, this.target, name, descObj);
      success = !!success; // coerce to Boolean

      if (success === true) {

        var targetDesc = Object.getOwnPropertyDescriptor(this.target, name);
        var extensible = Object.isExtensible(this.target);

        // Note: we could collapse the following two if-tests into a single
        // test. Separating out the cases to improve error reporting.

        if (!extensible) {
          if (targetDesc === undefined) {
            throw new TypeError("cannot successfully add a new property '" + name + "' to a non-extensible object");
          }
        }

        if (targetDesc !== undefined) {
          if (!isCompatibleDescriptor(extensible, targetDesc, desc)) {
            throw new TypeError("cannot define incompatible property " + "descriptor for property '" + name + "'");
          }
          if (isDataDescriptor(targetDesc) && targetDesc.configurable === false && targetDesc.writable === true) {
            if (desc.configurable === false && desc.writable === false) {
              // if the property is non-configurable, writable on the target
              // but was successfully reported to be updated to
              // non-configurable, non-writable, it can later be reported
              // again as non-configurable, writable, which violates
              // the invariant that non-configurable, non-writable properties
              // cannot change state
              throw new TypeError("cannot successfully define non-configurable, writable " + " property '" + name + "' as non-configurable, non-writable");
            }
          }
        }

        if (desc.configurable === false && !isSealedDesc(targetDesc)) {
          // if the property is configurable or non-existent on the target,
          // but is successfully being redefined as a non-configurable property,
          // it may later be reported as configurable or non-existent, which violates
          // the invariant that if the property might change or disappear, the
          // configurable attribute must be true.
          throw new TypeError("cannot successfully define a non-configurable " + "descriptor for configurable or non-existent property '" + name + "'");
        }
      }

      return success;
    },

    /**
     * On success, check whether the target object is indeed non-extensible.
     */
    preventExtensions: function preventExtensions() {
      var trap = this.getTrap("preventExtensions");
      if (trap === undefined) {
        // default forwarding behavior
        return Reflect.preventExtensions(this.target);
      }

      var success = trap.call(this.handler, this.target);
      success = !!success; // coerce to Boolean
      if (success) {
        if (Object_isExtensible(this.target)) {
          throw new TypeError("can't report extensible object as non-extensible: " + this.target);
        }
      }
      return success;
    },

    /**
     * If name denotes a sealed property, check whether handler rejects.
     */
    delete: function _delete(name) {
      "use strict";

      var trap = this.getTrap("deleteProperty");
      if (trap === undefined) {
        // default forwarding behavior
        return Reflect.deleteProperty(this.target, name);
      }

      name = String(name);
      var res = trap.call(this.handler, this.target, name);
      res = !!res; // coerce to Boolean

      var targetDesc;
      if (res === true) {
        targetDesc = Object.getOwnPropertyDescriptor(this.target, name);
        if (targetDesc !== undefined && targetDesc.configurable === false) {
          throw new TypeError("property '" + name + "' is non-configurable " + "and can't be deleted");
        }
        if (targetDesc !== undefined && !Object_isExtensible(this.target)) {
          // if the property still exists on a non-extensible target but
          // is reported as successfully deleted, it may later be reported
          // as present, which violates the invariant that an own property,
          // deleted from a non-extensible object cannot reappear.
          throw new TypeError("cannot successfully delete existing property '" + name + "' on a non-extensible object");
        }
      }

      return res;
    },

    /**
     * The getOwnPropertyNames trap was replaced by the ownKeys trap,
     * which now also returns an array (of strings or symbols) and
     * which performs the same rigorous invariant checks as getOwnPropertyNames
     *
     * See issue #48 on how this trap can still get invoked by external libs
     * that don't use the patched Object.getOwnPropertyNames function.
     */
    getOwnPropertyNames: function getOwnPropertyNames() {
      // Note: removed deprecation warning to avoid dependency on 'console'
      // (and on node, should anyway use util.deprecate). Deprecation warnings
      // can also be annoying when they are outside of the user's control, e.g.
      // when an external library calls unpatched Object.getOwnPropertyNames.
      // Since there is a clean fallback to `ownKeys`, the fact that the
      // deprecated method is still called is mostly harmless anyway.
      // See also issues #65 and #66.
      // console.warn("getOwnPropertyNames trap is deprecated. Use ownKeys instead");
      return this.ownKeys();
    },

    /**
     * Checks whether the trap result does not contain any new properties
     * if the proxy is non-extensible.
     *
     * Any own non-configurable properties of the target that are not included
     * in the trap result give rise to a TypeError. As such, we check whether the
     * returned result contains at least all sealed properties of the target
     * object.
     *
     * Additionally, the trap result is normalized.
     * Instead of returning the trap result directly:
     *  - create and return a fresh Array,
     *  - of which each element is coerced to a String
     *
     * This trap is called a.o. by Reflect.ownKeys, Object.getOwnPropertyNames
     * and Object.keys (the latter filters out only the enumerable own properties).
     */
    ownKeys: function ownKeys() {
      var trap = this.getTrap("ownKeys");
      if (trap === undefined) {
        // default forwarding behavior
        return Reflect.ownKeys(this.target);
      }

      var trapResult = trap.call(this.handler, this.target);

      // propNames is used as a set of strings
      var propNames = Object.create(null);
      var numProps = +trapResult.length;
      var result = new Array(numProps);

      for (var i = 0; i < numProps; i++) {
        var s = String(trapResult[i]);
        if (!Object.isExtensible(this.target) && !isFixed(s, this.target)) {
          // non-extensible proxies don't tolerate new own property names
          throw new TypeError("ownKeys trap cannot list a new " + "property '" + s + "' on a non-extensible object");
        }

        propNames[s] = true;
        result[i] = s;
      }

      var ownProps = Object_getOwnPropertyNames(this.target);
      var target = this.target;
      ownProps.forEach(function (ownProp) {
        if (!propNames[ownProp]) {
          if (isSealed(ownProp, target)) {
            throw new TypeError("ownKeys trap failed to include " + "non-configurable property '" + ownProp + "'");
          }
          if (!Object.isExtensible(target) && isFixed(ownProp, target)) {
            // if handler is allowed to report ownProp as non-existent,
            // we cannot guarantee that it will never later report it as
            // existent. Once a property has been reported as non-existent
            // on a non-extensible object, it should forever be reported as
            // non-existent
            throw new TypeError("ownKeys trap cannot report existing own property '" + ownProp + "' as non-existent on a non-extensible object");
          }
        }
      });

      return result;
    },

    /**
     * Checks whether the trap result is consistent with the state of the
     * wrapped target.
     */
    isExtensible: function isExtensible() {
      var trap = this.getTrap("isExtensible");
      if (trap === undefined) {
        // default forwarding behavior
        return Reflect.isExtensible(this.target);
      }

      var result = trap.call(this.handler, this.target);
      result = !!result; // coerce to Boolean
      var state = Object_isExtensible(this.target);
      if (result !== state) {
        if (result) {
          throw new TypeError("cannot report non-extensible object as extensible: " + this.target);
        } else {
          throw new TypeError("cannot report extensible object as non-extensible: " + this.target);
        }
      }
      return state;
    },

    /**
     * Check whether the trap result corresponds to the target's [[Prototype]]
     */
    getPrototypeOf: function getPrototypeOf() {
      var trap = this.getTrap("getPrototypeOf");
      if (trap === undefined) {
        // default forwarding behavior
        return Reflect.getPrototypeOf(this.target);
      }

      var allegedProto = trap.call(this.handler, this.target);

      if (!Object_isExtensible(this.target)) {
        var actualProto = Object_getPrototypeOf(this.target);
        if (!sameValue(allegedProto, actualProto)) {
          throw new TypeError("prototype value does not match: " + this.target);
        }
      }

      return allegedProto;
    },

    /**
     * If target is non-extensible and setPrototypeOf trap returns true,
     * check whether the trap result corresponds to the target's [[Prototype]]
     */
    setPrototypeOf: function setPrototypeOf(newProto) {
      var trap = this.getTrap("setPrototypeOf");
      if (trap === undefined) {
        // default forwarding behavior
        return Reflect.setPrototypeOf(this.target, newProto);
      }

      var success = trap.call(this.handler, this.target, newProto);

      success = !!success;
      if (success && !Object_isExtensible(this.target)) {
        var actualProto = Object_getPrototypeOf(this.target);
        if (!sameValue(newProto, actualProto)) {
          throw new TypeError("prototype value does not match: " + this.target);
        }
      }

      return success;
    },

    /**
     * In the direct proxies design with refactored prototype climbing,
     * this trap is deprecated. For proxies-as-prototypes, for-in will
     * call the enumerate() trap. If that trap is not defined, the
     * operation is forwarded to the target, no more fallback on this
     * fundamental trap.
     */
    getPropertyNames: function getPropertyNames() {
      throw new TypeError("getPropertyNames trap is deprecated");
    },

    // === derived traps ===

    /**
     * If name denotes a fixed property, check whether the trap returns true.
     */
    has: function has(name) {
      var trap = this.getTrap("has");
      if (trap === undefined) {
        // default forwarding behavior
        return Reflect.has(this.target, name);
      }

      name = String(name);
      var res = trap.call(this.handler, this.target, name);
      res = !!res; // coerce to Boolean

      if (res === false) {
        if (isSealed(name, this.target)) {
          throw new TypeError("cannot report existing non-configurable own " + "property '" + name + "' as a non-existent " + "property");
        }
        if (!Object.isExtensible(this.target) && isFixed(name, this.target)) {
          // if handler is allowed to return false, we cannot guarantee
          // that it will not return true for this property later.
          // Once a property has been reported as non-existent on a non-extensible
          // object, it should forever be reported as non-existent
          throw new TypeError("cannot report existing own property '" + name + "' as non-existent on a non-extensible object");
        }
      }

      // if res === true, we don't need to check for extensibility
      // even for a non-extensible proxy that has no own name property,
      // the property may have been inherited

      return res;
    },

    /**
     * If name denotes a fixed non-configurable, non-writable data property,
     * check its return value against the previously asserted value of the
     * fixed property.
     */
    get: function get(receiver, name) {

      // experimental support for invoke() trap on platforms that
      // support __noSuchMethod__
      /*
      if (name === '__noSuchMethod__') {
        var handler = this;
        return function(name, args) {
          return handler.invoke(receiver, name, args);
        }
      }
      */

      var trap = this.getTrap("get");
      if (trap === undefined) {
        // default forwarding behavior
        return Reflect.get(this.target, name, receiver);
      }

      name = String(name);
      var res = trap.call(this.handler, this.target, name, receiver);

      var fixedDesc = Object.getOwnPropertyDescriptor(this.target, name);
      // check consistency of the returned value
      if (fixedDesc !== undefined) {
        // getting an existing property
        if (isDataDescriptor(fixedDesc) && fixedDesc.configurable === false && fixedDesc.writable === false) {
          // own frozen data property
          if (!sameValue(res, fixedDesc.value)) {
            throw new TypeError("cannot report inconsistent value for " + "non-writable, non-configurable property '" + name + "'");
          }
        } else {
          // it's an accessor property
          if (isAccessorDescriptor(fixedDesc) && fixedDesc.configurable === false && fixedDesc.get === undefined) {
            if (res !== undefined) {
              throw new TypeError("must report undefined for non-configurable " + "accessor property '" + name + "' without getter");
            }
          }
        }
      }

      return res;
    },

    /**
     * If name denotes a fixed non-configurable, non-writable data property,
     * check that the trap rejects the assignment.
     */
    set: function set(receiver, name, val) {
      var trap = this.getTrap("set");
      if (trap === undefined) {
        // default forwarding behavior
        return Reflect.set(this.target, name, val, receiver);
      }

      name = String(name);
      var res = trap.call(this.handler, this.target, name, val, receiver);
      res = !!res; // coerce to Boolean

      // if success is reported, check whether property is truly assignable
      if (res === true) {
        var fixedDesc = Object.getOwnPropertyDescriptor(this.target, name);
        if (fixedDesc !== undefined) {
          // setting an existing property
          if (isDataDescriptor(fixedDesc) && fixedDesc.configurable === false && fixedDesc.writable === false) {
            if (!sameValue(val, fixedDesc.value)) {
              throw new TypeError("cannot successfully assign to a " + "non-writable, non-configurable property '" + name + "'");
            }
          } else {
            if (isAccessorDescriptor(fixedDesc) && fixedDesc.configurable === false && // non-configurable
            fixedDesc.set === undefined) {
              // accessor with undefined setter
              throw new TypeError("setting a property '" + name + "' that has " + " only a getter");
            }
          }
        }
      }

      return res;
    },

    /**
     * Any own enumerable non-configurable properties of the target that are not
     * included in the trap result give rise to a TypeError. As such, we check
     * whether the returned result contains at least all sealed enumerable properties
     * of the target object.
     *
     * The trap should return an iterator.
     *
     * However, as implementations of pre-direct proxies still expect enumerate
     * to return an array of strings, we convert the iterator into an array.
     */
    enumerate: function enumerate() {
      var trap = this.getTrap("enumerate");
      if (trap === undefined) {
        // default forwarding behavior
        var trapResult = Reflect.enumerate(this.target);
        var result = [];
        var nxt = trapResult.next();
        while (!nxt.done) {
          result.push(String(nxt.value));
          nxt = trapResult.next();
        }
        return result;
      }

      var trapResult = trap.call(this.handler, this.target);

      if (trapResult === null || trapResult === undefined || trapResult.next === undefined) {
        throw new TypeError("enumerate trap should return an iterator, got: " + trapResult);
      }

      // propNames is used as a set of strings
      var propNames = Object.create(null);

      // var numProps = +trapResult.length;
      var result = []; // new Array(numProps);

      // trapResult is supposed to be an iterator
      // drain iterator to array as current implementations still expect
      // enumerate to return an array of strings
      var nxt = trapResult.next();

      while (!nxt.done) {
        var s = String(nxt.value);
        if (propNames[s]) {
          throw new TypeError("enumerate trap cannot list a " + "duplicate property '" + s + "'");
        }
        propNames[s] = true;
        result.push(s);
        nxt = trapResult.next();
      }

      /*for (var i = 0; i < numProps; i++) {
        var s = String(trapResult[i]);
        if (propNames[s]) {
          throw new TypeError("enumerate trap cannot list a "+
                              "duplicate property '"+s+"'");
        }
         propNames[s] = true;
        result[i] = s;
      } */

      var ownEnumerableProps = Object.keys(this.target);
      var target = this.target;
      ownEnumerableProps.forEach(function (ownEnumerableProp) {
        if (!propNames[ownEnumerableProp]) {
          if (isSealed(ownEnumerableProp, target)) {
            throw new TypeError("enumerate trap failed to include " + "non-configurable enumerable property '" + ownEnumerableProp + "'");
          }
          if (!Object.isExtensible(target) && isFixed(ownEnumerableProp, target)) {
            // if handler is allowed not to report ownEnumerableProp as an own
            // property, we cannot guarantee that it will never report it as
            // an own property later. Once a property has been reported as
            // non-existent on a non-extensible object, it should forever be
            // reported as non-existent
            throw new TypeError("cannot report existing own property '" + ownEnumerableProp + "' as non-existent on a " + "non-extensible object");
          }
        }
      });

      return result;
    },

    /**
     * The iterate trap is deprecated by the enumerate trap.
     */
    iterate: Validator.prototype.enumerate,

    /**
     * Any own non-configurable properties of the target that are not included
     * in the trap result give rise to a TypeError. As such, we check whether the
     * returned result contains at least all sealed properties of the target
     * object.
     *
     * The trap result is normalized.
     * The trap result is not returned directly. Instead:
     *  - create and return a fresh Array,
     *  - of which each element is coerced to String,
     *  - which does not contain duplicates
     *
     * FIXME: keys trap is deprecated
     */
    /*
    keys: function() {
      var trap = this.getTrap("keys");
      if (trap === undefined) {
        // default forwarding behavior
        return Reflect.keys(this.target);
      }
       var trapResult = trap.call(this.handler, this.target);
       // propNames is used as a set of strings
      var propNames = Object.create(null);
      var numProps = +trapResult.length;
      var result = new Array(numProps);
       for (var i = 0; i < numProps; i++) {
       var s = String(trapResult[i]);
       if (propNames[s]) {
         throw new TypeError("keys trap cannot list a "+
                             "duplicate property '"+s+"'");
       }
       if (!Object.isExtensible(this.target) && !isFixed(s, this.target)) {
         // non-extensible proxies don't tolerate new own property names
         throw new TypeError("keys trap cannot list a new "+
                             "property '"+s+"' on a non-extensible object");
       }
        propNames[s] = true;
       result[i] = s;
      }
       var ownEnumerableProps = Object.keys(this.target);
      var target = this.target;
      ownEnumerableProps.forEach(function (ownEnumerableProp) {
        if (!propNames[ownEnumerableProp]) {
          if (isSealed(ownEnumerableProp, target)) {
            throw new TypeError("keys trap failed to include "+
                                "non-configurable enumerable property '"+
                                ownEnumerableProp+"'");
          }
          if (!Object.isExtensible(target) &&
              isFixed(ownEnumerableProp, target)) {
              // if handler is allowed not to report ownEnumerableProp as an own
              // property, we cannot guarantee that it will never report it as
              // an own property later. Once a property has been reported as
              // non-existent on a non-extensible object, it should forever be
              // reported as non-existent
              throw new TypeError("cannot report existing own property '"+
                                  ownEnumerableProp+"' as non-existent on a "+
                                  "non-extensible object");
          }
        }
      });
       return result;
    },
    */

    /**
     * New trap that reifies [[Call]].
     * If the target is a function, then a call to
     *   proxy(...args)
     * Triggers this trap
     */
    apply: function apply(target, thisBinding, args) {
      var trap = this.getTrap("apply");
      if (trap === undefined) {
        return Reflect.apply(target, thisBinding, args);
      }

      if (typeof this.target === "function") {
        return trap.call(this.handler, target, thisBinding, args);
      } else {
        throw new TypeError("apply: " + target + " is not a function");
      }
    },

    /**
     * New trap that reifies [[Construct]].
     * If the target is a function, then a call to
     *   new proxy(...args)
     * Triggers this trap
     */
    construct: function construct(target, args, newTarget) {
      var trap = this.getTrap("construct");
      if (trap === undefined) {
        return Reflect.construct(target, args, newTarget);
      }

      if (typeof target !== "function") {
        throw new TypeError("new: " + target + " is not a function");
      }

      if (newTarget === undefined) {
        newTarget = target;
      } else {
        if (typeof newTarget !== "function") {
          throw new TypeError("new: " + newTarget + " is not a function");
        }
      }
      return trap.call(this.handler, target, args, newTarget);
    }
  };

  // ---- end of the Validator handler wrapper handler ----

  // In what follows, a 'direct proxy' is a proxy
  // whose handler is a Validator. Such proxies can be made non-extensible,
  // sealed or frozen without losing the ability to trap.

  // maps direct proxies to their Validator handlers
  var directProxies = new WeakMap();

  // patch Object.{preventExtensions,seal,freeze} so that
  // they recognize fixable proxies and act accordingly
  Object.preventExtensions = function (subject) {
    var vhandler = directProxies.get(subject);
    if (vhandler !== undefined) {
      if (vhandler.preventExtensions()) {
        return subject;
      } else {
        throw new TypeError("preventExtensions on " + subject + " rejected");
      }
    } else {
      return prim_preventExtensions(subject);
    }
  };
  Object.seal = function (subject) {
    setIntegrityLevel(subject, "sealed");
    return subject;
  };
  Object.freeze = function (subject) {
    setIntegrityLevel(subject, "frozen");
    return subject;
  };
  Object.isExtensible = Object_isExtensible = function Object_isExtensible(subject) {
    var vHandler = directProxies.get(subject);
    if (vHandler !== undefined) {
      return vHandler.isExtensible();
    } else {
      return prim_isExtensible(subject);
    }
  };
  Object.isSealed = Object_isSealed = function Object_isSealed(subject) {
    return testIntegrityLevel(subject, "sealed");
  };
  Object.isFrozen = Object_isFrozen = function Object_isFrozen(subject) {
    return testIntegrityLevel(subject, "frozen");
  };
  Object.getPrototypeOf = Object_getPrototypeOf = function Object_getPrototypeOf(subject) {
    var vHandler = directProxies.get(subject);
    if (vHandler !== undefined) {
      return vHandler.getPrototypeOf();
    } else {
      return prim_getPrototypeOf(subject);
    }
  };

  // patch Object.getOwnPropertyDescriptor to directly call
  // the Validator.prototype.getOwnPropertyDescriptor trap
  // This is to circumvent an assertion in the built-in Proxy
  // trapping mechanism of v8, which disallows that trap to
  // return non-configurable property descriptors (as per the
  // old Proxy design)
  Object.getOwnPropertyDescriptor = function (subject, name) {
    var vhandler = directProxies.get(subject);
    if (vhandler !== undefined) {
      return vhandler.getOwnPropertyDescriptor(name);
    } else {
      return prim_getOwnPropertyDescriptor(subject, name);
    }
  };

  // patch Object.defineProperty to directly call
  // the Validator.prototype.defineProperty trap
  // This is to circumvent two issues with the built-in
  // trap mechanism:
  // 1) the current tracemonkey implementation of proxies
  // auto-completes 'desc', which is not correct. 'desc' should be
  // normalized, but not completed. Consider:
  // Object.defineProperty(proxy, 'foo', {enumerable:false})
  // This trap will receive desc =
  //  {value:undefined,writable:false,enumerable:false,configurable:false}
  // This will also set all other attributes to their default value,
  // which is unexpected and different from [[DefineOwnProperty]].
  // Bug filed: https://bugzilla.mozilla.org/show_bug.cgi?id=601329
  // 2) the current spidermonkey implementation does not
  // throw an exception when this trap returns 'false', but instead silently
  // ignores the operation (this is regardless of strict-mode)
  // 2a) v8 does throw an exception for this case, but includes the rather
  //     unhelpful error message:
  // 'Proxy handler #<Object> returned false from 'defineProperty' trap'
  Object.defineProperty = function (subject, name, desc) {
    var vhandler = directProxies.get(subject);
    if (vhandler !== undefined) {
      var normalizedDesc = normalizePropertyDescriptor(desc);
      var success = vhandler.defineProperty(name, normalizedDesc);
      if (success === false) {
        throw new TypeError("can't redefine property '" + name + "'");
      }
      return subject;
    } else {
      return prim_defineProperty(subject, name, desc);
    }
  };

  Object.defineProperties = function (subject, descs) {
    var vhandler = directProxies.get(subject);
    if (vhandler !== undefined) {
      var names = Object.keys(descs);
      for (var i = 0; i < names.length; i++) {
        var name = names[i];
        var normalizedDesc = normalizePropertyDescriptor(descs[name]);
        var success = vhandler.defineProperty(name, normalizedDesc);
        if (success === false) {
          throw new TypeError("can't redefine property '" + name + "'");
        }
      }
      return subject;
    } else {
      return prim_defineProperties(subject, descs);
    }
  };

  Object.keys = function (subject) {
    var vHandler = directProxies.get(subject);
    if (vHandler !== undefined) {
      var ownKeys = vHandler.ownKeys();
      var result = [];
      for (var i = 0; i < ownKeys.length; i++) {
        var k = String(ownKeys[i]);
        var desc = Object.getOwnPropertyDescriptor(subject, k);
        if (desc !== undefined && desc.enumerable === true) {
          result.push(k);
        }
      }
      return result;
    } else {
      return prim_keys(subject);
    }
  };

  Object.getOwnPropertyNames = Object_getOwnPropertyNames = function Object_getOwnPropertyNames(subject) {
    var vHandler = directProxies.get(subject);
    if (vHandler !== undefined) {
      return vHandler.ownKeys();
    } else {
      return prim_getOwnPropertyNames(subject);
    }
  };

  // fixes issue #71 (Calling Object.getOwnPropertySymbols() on a Proxy
  // throws an error)
  if (prim_getOwnPropertySymbols !== undefined) {
    Object.getOwnPropertySymbols = function (subject) {
      var vHandler = directProxies.get(subject);
      if (vHandler !== undefined) {
        // as this shim does not support symbols, a Proxy never advertises
        // any symbol-valued own properties
        return [];
      } else {
        return prim_getOwnPropertySymbols(subject);
      }
    };
  }

  // fixes issue #72 ('Illegal access' error when using Object.assign)
  // Object.assign polyfill based on a polyfill posted on MDN: 
  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/\
  //  Global_Objects/Object/assign
  // Note that this polyfill does not support Symbols, but this Proxy Shim
  // does not support Symbols anyway.
  if (prim_assign !== undefined) {
    Object.assign = function (target) {

      // check if any argument is a proxy object
      var noProxies = true;
      for (var i = 0; i < arguments.length; i++) {
        var vHandler = directProxies.get(arguments[i]);
        if (vHandler !== undefined) {
          noProxies = false;
          break;
        }
      }
      if (noProxies) {
        // not a single argument is a proxy, perform built-in algorithm
        return prim_assign.apply(Object, arguments);
      }

      // there is at least one proxy argument, use the polyfill

      if (target === undefined || target === null) {
        throw new TypeError('Cannot convert undefined or null to object');
      }

      var output = Object(target);
      for (var index = 1; index < arguments.length; index++) {
        var source = arguments[index];
        if (source !== undefined && source !== null) {
          for (var nextKey in source) {
            if (source.hasOwnProperty(nextKey)) {
              output[nextKey] = source[nextKey];
            }
          }
        }
      }
      return output;
    };
  }

  // returns whether an argument is a reference to an object,
  // which is legal as a WeakMap key.
  function isObject(arg) {
    var type = typeof arg === 'undefined' ? 'undefined' : _typeof(arg);
    return type === 'object' && arg !== null || type === 'function';
  };

  // a wrapper for WeakMap.get which returns the undefined value
  // for keys that are not objects (in which case the underlying
  // WeakMap would have thrown a TypeError).
  function safeWeakMapGet(map, key) {
    return isObject(key) ? map.get(key) : undefined;
  };

  // returns a new function of zero arguments that recursively
  // unwraps any proxies specified as the |this|-value.
  // The primitive is assumed to be a zero-argument method
  // that uses its |this|-binding.
  function makeUnwrapping0ArgMethod(primitive) {
    return function builtin() {
      var vHandler = safeWeakMapGet(directProxies, this);
      if (vHandler !== undefined) {
        return builtin.call(vHandler.target);
      } else {
        return primitive.call(this);
      }
    };
  };

  // returns a new function of 1 arguments that recursively
  // unwraps any proxies specified as the |this|-value.
  // The primitive is assumed to be a 1-argument method
  // that uses its |this|-binding.
  function makeUnwrapping1ArgMethod(primitive) {
    return function builtin(arg) {
      var vHandler = safeWeakMapGet(directProxies, this);
      if (vHandler !== undefined) {
        return builtin.call(vHandler.target, arg);
      } else {
        return primitive.call(this, arg);
      }
    };
  };

  Object.prototype.valueOf = makeUnwrapping0ArgMethod(Object.prototype.valueOf);
  Object.prototype.toString = makeUnwrapping0ArgMethod(Object.prototype.toString);
  Function.prototype.toString = makeUnwrapping0ArgMethod(Function.prototype.toString);
  Date.prototype.toString = makeUnwrapping0ArgMethod(Date.prototype.toString);

  Object.prototype.isPrototypeOf = function builtin(arg) {
    // bugfix thanks to Bill Mark:
    // built-in isPrototypeOf does not unwrap proxies used
    // as arguments. So, we implement the builtin ourselves,
    // based on the ECMAScript 6 spec. Our encoding will
    // make sure that if a proxy is used as an argument,
    // its getPrototypeOf trap will be called.
    while (true) {
      var vHandler2 = safeWeakMapGet(directProxies, arg);
      if (vHandler2 !== undefined) {
        arg = vHandler2.getPrototypeOf();
        if (arg === null) {
          return false;
        } else if (sameValue(arg, this)) {
          return true;
        }
      } else {
        return prim_isPrototypeOf.call(this, arg);
      }
    }
  };

  Array.isArray = function (subject) {
    var vHandler = safeWeakMapGet(directProxies, subject);
    if (vHandler !== undefined) {
      return Array.isArray(vHandler.target);
    } else {
      return prim_isArray(subject);
    }
  };

  function isProxyArray(arg) {
    var vHandler = safeWeakMapGet(directProxies, arg);
    if (vHandler !== undefined) {
      return Array.isArray(vHandler.target);
    }
    return false;
  }

  // Array.prototype.concat internally tests whether one of its
  // arguments is an Array, by checking whether [[Class]] == "Array"
  // As such, it will fail to recognize proxies-for-arrays as arrays.
  // We patch Array.prototype.concat so that it "unwraps" proxies-for-arrays
  // by making a copy. This will trigger the exact same sequence of
  // traps on the proxy-for-array as if we would not have unwrapped it.
  // See <https://github.com/tvcutsem/harmony-reflect/issues/19> for more.
  Array.prototype.concat = function () /*...args*/{
    var length;
    for (var i = 0; i < arguments.length; i++) {
      if (isProxyArray(arguments[i])) {
        length = arguments[i].length;
        arguments[i] = Array.prototype.slice.call(arguments[i], 0, length);
      }
    }
    return prim_concat.apply(this, arguments);
  };

  // setPrototypeOf support on platforms that support __proto__

  var prim_setPrototypeOf = Object.setPrototypeOf;

  // patch and extract original __proto__ setter
  var __proto__setter = function () {
    var protoDesc = prim_getOwnPropertyDescriptor(Object.prototype, '__proto__');
    if (protoDesc === undefined || typeof protoDesc.set !== "function") {
      return function () {
        throw new TypeError("setPrototypeOf not supported on this platform");
      };
    }

    // see if we can actually mutate a prototype with the generic setter
    // (e.g. Chrome v28 doesn't allow setting __proto__ via the generic setter)
    try {
      protoDesc.set.call({}, {});
    } catch (e) {
      return function () {
        throw new TypeError("setPrototypeOf not supported on this platform");
      };
    }

    prim_defineProperty(Object.prototype, '__proto__', {
      set: function set(newProto) {
        return Object.setPrototypeOf(this, Object(newProto));
      }
    });

    return protoDesc.set;
  }();

  Object.setPrototypeOf = function (target, newProto) {
    var handler = directProxies.get(target);
    if (handler !== undefined) {
      if (handler.setPrototypeOf(newProto)) {
        return target;
      } else {
        throw new TypeError("proxy rejected prototype mutation");
      }
    } else {
      if (!Object_isExtensible(target)) {
        throw new TypeError("can't set prototype on non-extensible object: " + target);
      }
      if (prim_setPrototypeOf) return prim_setPrototypeOf(target, newProto);

      if (Object(newProto) !== newProto || newProto === null) {
        throw new TypeError("Object prototype may only be an Object or null: " + newProto);
        // throw new TypeError("prototype must be an object or null")
      }
      __proto__setter.call(target, newProto);
      return target;
    }
  };

  Object.prototype.hasOwnProperty = function (name) {
    var handler = safeWeakMapGet(directProxies, this);
    if (handler !== undefined) {
      var desc = handler.getOwnPropertyDescriptor(name);
      return desc !== undefined;
    } else {
      return prim_hasOwnProperty.call(this, name);
    }
  };

  // ============= Reflection module =============
  // see http://wiki.ecmascript.org/doku.php?id=harmony:reflect_api

  var Reflect = global.Reflect = {
    getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, name) {
      return Object.getOwnPropertyDescriptor(target, name);
    },
    defineProperty: function defineProperty(target, name, desc) {

      // if target is a proxy, invoke its "defineProperty" trap
      var handler = directProxies.get(target);
      if (handler !== undefined) {
        return handler.defineProperty(target, name, desc);
      }

      // Implementation transliterated from [[DefineOwnProperty]]
      // see ES5.1 section 8.12.9
      // this is the _exact same algorithm_ as the isCompatibleDescriptor
      // algorithm defined above, except that at every place it
      // returns true, this algorithm actually does define the property.
      var current = Object.getOwnPropertyDescriptor(target, name);
      var extensible = Object.isExtensible(target);
      if (current === undefined && extensible === false) {
        return false;
      }
      if (current === undefined && extensible === true) {
        Object.defineProperty(target, name, desc); // should never fail
        return true;
      }
      if (isEmptyDescriptor(desc)) {
        return true;
      }
      if (isEquivalentDescriptor(current, desc)) {
        return true;
      }
      if (current.configurable === false) {
        if (desc.configurable === true) {
          return false;
        }
        if ('enumerable' in desc && desc.enumerable !== current.enumerable) {
          return false;
        }
      }
      if (isGenericDescriptor(desc)) {
        // no further validation necessary
      } else if (isDataDescriptor(current) !== isDataDescriptor(desc)) {
        if (current.configurable === false) {
          return false;
        }
      } else if (isDataDescriptor(current) && isDataDescriptor(desc)) {
        if (current.configurable === false) {
          if (current.writable === false && desc.writable === true) {
            return false;
          }
          if (current.writable === false) {
            if ('value' in desc && !sameValue(desc.value, current.value)) {
              return false;
            }
          }
        }
      } else if (isAccessorDescriptor(current) && isAccessorDescriptor(desc)) {
        if (current.configurable === false) {
          if ('set' in desc && !sameValue(desc.set, current.set)) {
            return false;
          }
          if ('get' in desc && !sameValue(desc.get, current.get)) {
            return false;
          }
        }
      }
      Object.defineProperty(target, name, desc); // should never fail
      return true;
    },
    deleteProperty: function deleteProperty(target, name) {
      var handler = directProxies.get(target);
      if (handler !== undefined) {
        return handler.delete(name);
      }

      var desc = Object.getOwnPropertyDescriptor(target, name);
      if (desc === undefined) {
        return true;
      }
      if (desc.configurable === true) {
        delete target[name];
        return true;
      }
      return false;
    },
    getPrototypeOf: function getPrototypeOf(target) {
      return Object.getPrototypeOf(target);
    },
    setPrototypeOf: function setPrototypeOf(target, newProto) {

      var handler = directProxies.get(target);
      if (handler !== undefined) {
        return handler.setPrototypeOf(newProto);
      }

      if (Object(newProto) !== newProto || newProto === null) {
        throw new TypeError("Object prototype may only be an Object or null: " + newProto);
      }

      if (!Object_isExtensible(target)) {
        return false;
      }

      var current = Object.getPrototypeOf(target);
      if (sameValue(current, newProto)) {
        return true;
      }

      if (prim_setPrototypeOf) {
        try {
          prim_setPrototypeOf(target, newProto);
          return true;
        } catch (e) {
          return false;
        }
      }

      __proto__setter.call(target, newProto);
      return true;
    },
    preventExtensions: function preventExtensions(target) {
      var handler = directProxies.get(target);
      if (handler !== undefined) {
        return handler.preventExtensions();
      }
      prim_preventExtensions(target);
      return true;
    },
    isExtensible: function isExtensible(target) {
      return Object.isExtensible(target);
    },
    has: function has(target, name) {
      return name in target;
    },
    get: function get(target, name, receiver) {
      receiver = receiver || target;

      // if target is a proxy, invoke its "get" trap
      var handler = directProxies.get(target);
      if (handler !== undefined) {
        return handler.get(receiver, name);
      }

      var desc = Object.getOwnPropertyDescriptor(target, name);
      if (desc === undefined) {
        var proto = Object.getPrototypeOf(target);
        if (proto === null) {
          return undefined;
        }
        return Reflect.get(proto, name, receiver);
      }
      if (isDataDescriptor(desc)) {
        return desc.value;
      }
      var getter = desc.get;
      if (getter === undefined) {
        return undefined;
      }
      return desc.get.call(receiver);
    },
    // Reflect.set implementation based on latest version of [[SetP]] at
    // http://wiki.ecmascript.org/doku.php?id=harmony:proto_climbing_refactoring
    set: function set(target, name, value, receiver) {
      receiver = receiver || target;

      // if target is a proxy, invoke its "set" trap
      var handler = directProxies.get(target);
      if (handler !== undefined) {
        return handler.set(receiver, name, value);
      }

      // first, check whether target has a non-writable property
      // shadowing name on receiver
      var ownDesc = Object.getOwnPropertyDescriptor(target, name);

      if (ownDesc === undefined) {
        // name is not defined in target, search target's prototype
        var proto = Object.getPrototypeOf(target);

        if (proto !== null) {
          // continue the search in target's prototype
          return Reflect.set(proto, name, value, receiver);
        }

        // Rev16 change. Cf. https://bugs.ecmascript.org/show_bug.cgi?id=1549
        // target was the last prototype, now we know that 'name' is not shadowed
        // by an existing (accessor or data) property, so we can add the property
        // to the initial receiver object
        // (this branch will intentionally fall through to the code below)
        ownDesc = { value: undefined,
          writable: true,
          enumerable: true,
          configurable: true };
      }

      // we now know that ownDesc !== undefined
      if (isAccessorDescriptor(ownDesc)) {
        var setter = ownDesc.set;
        if (setter === undefined) return false;
        setter.call(receiver, value); // assumes Function.prototype.call
        return true;
      }
      // otherwise, isDataDescriptor(ownDesc) must be true
      if (ownDesc.writable === false) return false;
      // we found an existing writable data property on the prototype chain.
      // Now update or add the data property on the receiver, depending on
      // whether the receiver already defines the property or not.
      var existingDesc = Object.getOwnPropertyDescriptor(receiver, name);
      if (existingDesc !== undefined) {
        var updateDesc = { value: value,
          // FIXME: it should not be necessary to describe the following
          // attributes. Added to circumvent a bug in tracemonkey:
          // https://bugzilla.mozilla.org/show_bug.cgi?id=601329
          writable: existingDesc.writable,
          enumerable: existingDesc.enumerable,
          configurable: existingDesc.configurable };
        Object.defineProperty(receiver, name, updateDesc);
        return true;
      } else {
        if (!Object.isExtensible(receiver)) return false;
        var newDesc = { value: value,
          writable: true,
          enumerable: true,
          configurable: true };
        Object.defineProperty(receiver, name, newDesc);
        return true;
      }
    },
    /*invoke: function(target, name, args, receiver) {
      receiver = receiver || target;
       var handler = directProxies.get(target);
      if (handler !== undefined) {
        return handler.invoke(receiver, name, args);
      }
       var fun = Reflect.get(target, name, receiver);
      return Function.prototype.apply.call(fun, receiver, args);
    },*/
    enumerate: function enumerate(target) {
      var handler = directProxies.get(target);
      var result;
      if (handler !== undefined) {
        // handler.enumerate should return an iterator directly, but the
        // iterator gets converted to an array for backward-compat reasons,
        // so we must re-iterate over the array
        result = handler.enumerate(handler.target);
      } else {
        result = [];
        for (var name in target) {
          result.push(name);
        };
      }
      var l = +result.length;
      var idx = 0;
      return {
        next: function next() {
          if (idx === l) return { done: true };
          return { done: false, value: result[idx++] };
        }
      };
    },
    // imperfect ownKeys implementation: in ES6, should also include
    // symbol-keyed properties.
    ownKeys: function ownKeys(target) {
      return Object_getOwnPropertyNames(target);
    },
    apply: function apply(target, receiver, args) {
      // target.apply(receiver, args)
      return Function.prototype.apply.call(target, receiver, args);
    },
    construct: function construct(target, args, newTarget) {
      // return new target(...args);

      // if target is a proxy, invoke its "construct" trap
      var handler = directProxies.get(target);
      if (handler !== undefined) {
        return handler.construct(handler.target, args, newTarget);
      }

      if (typeof target !== "function") {
        throw new TypeError("target is not a function: " + target);
      }
      if (newTarget === undefined) {
        newTarget = target;
      } else {
        if (typeof newTarget !== "function") {
          throw new TypeError("newTarget is not a function: " + target);
        }
      }

      return new (Function.prototype.bind.apply(newTarget, [null].concat(args)))();
    }
  };

  // feature-test whether the Proxy global exists, with
  // the harmony-era Proxy.create API
  if (typeof Proxy !== "undefined" && typeof Proxy.create !== "undefined") {

    var primCreate = Proxy.create,
        primCreateFunction = Proxy.createFunction;

    var revokedHandler = primCreate({
      get: function get() {
        throw new TypeError("proxy is revoked");
      }
    });

    global.Proxy = function (target, handler) {
      // check that target is an Object
      if (Object(target) !== target) {
        throw new TypeError("Proxy target must be an Object, given " + target);
      }
      // check that handler is an Object
      if (Object(handler) !== handler) {
        throw new TypeError("Proxy handler must be an Object, given " + handler);
      }

      var vHandler = new Validator(target, handler);
      var proxy;
      if (typeof target === "function") {
        proxy = primCreateFunction(vHandler,
        // call trap
        function () {
          var args = Array.prototype.slice.call(arguments);
          return vHandler.apply(target, this, args);
        },
        // construct trap
        function () {
          var args = Array.prototype.slice.call(arguments);
          return vHandler.construct(target, args);
        });
      } else {
        proxy = primCreate(vHandler, Object.getPrototypeOf(target));
      }
      directProxies.set(proxy, vHandler);
      return proxy;
    };

    global.Proxy.revocable = function (target, handler) {
      var proxy = new Proxy(target, handler);
      var revoke = function revoke() {
        var vHandler = directProxies.get(proxy);
        if (vHandler !== null) {
          vHandler.target = null;
          vHandler.handler = revokedHandler;
        }
        return undefined;
      };
      return { proxy: proxy, revoke: revoke };
    };

    // add the old Proxy.create and Proxy.createFunction methods
    // so old code that still depends on the harmony-era Proxy object
    // is not broken. Also ensures that multiple versions of this
    // library should load fine
    global.Proxy.create = primCreate;
    global.Proxy.createFunction = primCreateFunction;
  } else {
    // Proxy global not defined, or old API not available
    if (typeof Proxy === "undefined") {
      // Proxy global not defined, add a Proxy function stub
      global.Proxy = function (_target, _handler) {
        throw new Error("proxies not supported on this platform. On v8/node/iojs, make sure to pass the --harmony_proxies flag");
      };
    }
    // Proxy global defined but old API not available
    // presumably Proxy global already supports new API, leave untouched
  }

  // for node.js modules, export every property in the Reflect object
  // as part of the module interface
  if (typeof exports !== 'undefined') {
    Object.keys(Reflect).forEach(function (key) {
      exports[key] = Reflect[key];
    });
  }

  // function-as-module pattern
}(typeof exports !== 'undefined' ? global : undefined);

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],3:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
// d3.tip
// Copyright (c) 2013 Justin Palmer
// ES6 / D3 v4 Adaption Copyright (c) 2016 Constantin Gavrilete
// Removal of ES6 for D3 v4 Adaption Copyright (c) 2016 David Gotz
//
// Tooltips for d3.js SVG visualizations

var d3Tip = exports.d3Tip = function () {
  d3.functor = function functor(v) {
    return typeof v === "function" ? v : function () {
      return v;
    };
  };

  d3.tip = function () {

    var direction = d3_tip_direction,
        offset = d3_tip_offset,
        html = d3_tip_html,
        node = initNode(),
        svg = null,
        point = null,
        target = null;

    function tip(vis) {
      svg = getSVGNode(vis);
      point = svg.createSVGPoint();
      document.body.appendChild(node);
    }

    // Public - show the tooltip on the screen
    //
    // Returns a tip
    tip.show = function () {
      var args = Array.prototype.slice.call(arguments);
      if (args[args.length - 1] instanceof SVGElement) target = args.pop();
      var content = html.apply(this, args),
          poffset = offset.apply(this, args),
          dir = direction.apply(this, args),
          nodel = getNodeEl(),
          i = directions.length,
          coords,
          scrollTop = document.documentElement.scrollTop || document.body.scrollTop,
          scrollLeft = document.documentElement.scrollLeft || document.body.scrollLeft;

      nodel.html(content).style('position', 'absolute').style('opacity', 1).style('pointer-events', 'all');

      while (i--) {
        nodel.classed(directions[i], false);
      }coords = direction_callbacks[dir].apply(this);
      nodel.classed(dir, true).style('top', coords.top + poffset[0] + scrollTop + 'px').style('left', coords.left + poffset[1] + scrollLeft + 'px');

      return tip;
    };

    // Public - hide the tooltip
    //
    // Returns a tip
    tip.hide = function () {
      var nodel = getNodeEl();
      nodel.style('opacity', 0).style('pointer-events', 'none');
      return tip;
    };

    // Public: Proxy attr calls to the d3 tip container.  Sets or gets attribute value.
    //
    // n - name of the attribute
    // v - value of the attribute
    //
    // Returns tip or attribute value
    tip.attr = function (n, v) {
      if (arguments.length < 2 && typeof n === 'string') {
        return getNodeEl().attr(n);
      } else {
        var args = Array.prototype.slice.call(arguments);
        d3.selection.prototype.attr.apply(getNodeEl(), args);
      }

      return tip;
    };

    // Public: Proxy style calls to the d3 tip container.  Sets or gets a style value.
    //
    // n - name of the property
    // v - value of the property
    //
    // Returns tip or style property value
    tip.style = function (n, v) {
      // debugger;
      if (arguments.length < 2 && typeof n === 'string') {
        return getNodeEl().style(n);
      } else {
        var args = Array.prototype.slice.call(arguments);
        if (args.length === 1) {
          var styles = args[0];
          Object.keys(styles).forEach(function (key) {
            return d3.selection.prototype.style.apply(getNodeEl(), [key, styles[key]]);
          });
        }
      }

      return tip;
    };

    // Public: Set or get the direction of the tooltip
    //
    // v - One of n(north), s(south), e(east), or w(west), nw(northwest),
    //     sw(southwest), ne(northeast) or se(southeast)
    //
    // Returns tip or direction
    tip.direction = function (v) {
      if (!arguments.length) return direction;
      direction = v == null ? v : d3.functor(v);

      return tip;
    };

    // Public: Sets or gets the offset of the tip
    //
    // v - Array of [x, y] offset
    //
    // Returns offset or
    tip.offset = function (v) {
      if (!arguments.length) return offset;
      offset = v == null ? v : d3.functor(v);

      return tip;
    };

    // Public: sets or gets the html value of the tooltip
    //
    // v - String value of the tip
    //
    // Returns html value or tip
    tip.html = function (v) {
      if (!arguments.length) return html;
      html = v == null ? v : d3.functor(v);

      return tip;
    };

    // Public: destroys the tooltip and removes it from the DOM
    //
    // Returns a tip
    tip.destroy = function () {
      if (node) {
        getNodeEl().remove();
        node = null;
      }
      return tip;
    };

    function d3_tip_direction() {
      return 'n';
    }
    function d3_tip_offset() {
      return [0, 0];
    }
    function d3_tip_html() {
      return ' ';
    }

    var direction_callbacks = {
      n: direction_n,
      s: direction_s,
      e: direction_e,
      w: direction_w,
      nw: direction_nw,
      ne: direction_ne,
      sw: direction_sw,
      se: direction_se
    };

    var directions = Object.keys(direction_callbacks);

    function direction_n() {
      var bbox = getScreenBBox();
      return {
        top: bbox.n.y - node.offsetHeight,
        left: bbox.n.x - node.offsetWidth / 2
      };
    }

    function direction_s() {
      var bbox = getScreenBBox();
      return {
        top: bbox.s.y,
        left: bbox.s.x - node.offsetWidth / 2
      };
    }

    function direction_e() {
      var bbox = getScreenBBox();
      return {
        top: bbox.e.y - node.offsetHeight / 2,
        left: bbox.e.x
      };
    }

    function direction_w() {
      var bbox = getScreenBBox();
      return {
        top: bbox.w.y - node.offsetHeight / 2,
        left: bbox.w.x - node.offsetWidth
      };
    }

    function direction_nw() {
      var bbox = getScreenBBox();
      return {
        top: bbox.nw.y - node.offsetHeight,
        left: bbox.nw.x - node.offsetWidth
      };
    }

    function direction_ne() {
      var bbox = getScreenBBox();
      return {
        top: bbox.ne.y - node.offsetHeight,
        left: bbox.ne.x
      };
    }

    function direction_sw() {
      var bbox = getScreenBBox();
      return {
        top: bbox.sw.y,
        left: bbox.sw.x - node.offsetWidth
      };
    }

    function direction_se() {
      var bbox = getScreenBBox();
      return {
        top: bbox.se.y,
        left: bbox.e.x
      };
    }

    function initNode() {
      var node = d3.select(document.createElement('div'));
      node.style('position', 'absolute').style('top', 0).style('opacity', 0).style('pointer-events', 'none').style('box-sizing', 'border-box');

      return node.node();
    }

    function getSVGNode(el) {
      el = el.node();
      if (el.tagName.toLowerCase() === 'svg') return el;

      return el.ownerSVGElement;
    }

    function getNodeEl() {
      if (node === null) {
        node = initNode();
        // re-add node to DOM
        document.body.appendChild(node);
      };
      return d3.select(node);
    }

    // Private - gets the screen coordinates of a shape
    //
    // Given a shape on the screen, will return an SVGPoint for the directions
    // n(north), s(south), e(east), w(west), ne(northeast), se(southeast), nw(northwest),
    // sw(southwest).
    //
    //    +-+-+
    //    |   |
    //    +   +
    //    |   |
    //    +-+-+
    //
    // Returns an Object {n, s, e, w, nw, sw, ne, se}
    function getScreenBBox() {
      var targetel = target || d3.event.target;
      console.log(targetel);
      function tryBBox() {
        try {
          targetel.getBBox();
        } catch (err) {
          targetel = targetel.parentNode;
          tryBBox();
        }
      }
      tryBBox();
      while ('undefined' === typeof targetel.getScreenCTM) {
        // && 'undefined' === targetel.parentNode) {
        targetel = targetel.parentNode;
      }
      console.log(targetel);
      var bbox = {},
          matrix = targetel.getScreenCTM(),
          tbbox = targetel.getBBox(),
          width = tbbox.width,
          height = tbbox.height,
          x = tbbox.x,
          y = tbbox.y;

      point.x = x;
      point.y = y;
      bbox.nw = point.matrixTransform(matrix);
      point.x += width;
      bbox.ne = point.matrixTransform(matrix);
      point.y += height;
      bbox.se = point.matrixTransform(matrix);
      point.x -= width;
      bbox.sw = point.matrixTransform(matrix);
      point.y -= height / 2;
      bbox.w = point.matrixTransform(matrix);
      point.x += width;
      bbox.e = point.matrixTransform(matrix);
      point.x -= width / 2;
      point.y -= height / 2;
      bbox.n = point.matrixTransform(matrix);
      point.y += height;
      bbox.s = point.matrixTransform(matrix);

      return bbox;
    }

    return tip;
  };
}();

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9ncnVudC1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJkZXYtanMvbWFpbi5lczYiLCJqcy1leHBvcnRzL3BvbHlmaWxscy5qcyIsImpzLXZlbmRvci9kMy10aXAuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztBQ0NBOztBQUNBOztBQUZBO0FBSUEsQ0FBQyxZQUFVO0FBQ1Q7O0FBRUEsTUFBSSxhQUFhLDZ0b0VBQWpCOztBQUVBLE1BQUksVUFBVTtBQUNaLE9BQUcsU0FEUztBQUVaLE9BQUcsV0FGUztBQUdaLE9BQUcsZ0JBSFM7QUFJWixPQUFHLFdBSlM7QUFLWixPQUFHLGlCQUxTO0FBTVosT0FBRyxhQU5TO0FBT1osT0FBRyxxQkFQUztBQVFaLE9BQUcsVUFSUztBQVNaLE9BQUcsZUFUUztBQVVaLE9BQUcsV0FWUztBQVdaLE9BQUcsdUJBWFM7QUFZWixPQUFHLHlCQVpTO0FBYVosT0FBRyxRQWJTO0FBY1osT0FBRyxlQWRTO0FBZVosT0FBRyxRQWZTO0FBZ0JaLE9BQUcsY0FoQlM7QUFpQlosT0FBRyxPQWpCUztBQWtCWixPQUFHLFFBbEJTO0FBbUJaLE9BQUcsYUFuQlM7QUFvQlosUUFBSSxvQkFwQlE7QUFxQlosT0FBRyxZQXJCUztBQXNCWixPQUFHLFVBdEJTO0FBdUJaLE9BQUc7QUF2QlMsR0FBZDs7QUEwQkEsTUFBTSxjQUFjLE1BQU0sR0FBMUI7O0FBRUEsTUFBSSxPQUFPLEVBQUMsS0FBSSxhQUFMLEVBQW1CLEtBQUksYUFBdkIsRUFBcUMsS0FBSSxlQUF6QyxFQUF5RCxLQUFJLGFBQTdELEVBQTJFLEtBQUksWUFBL0UsRUFBNEYsS0FBSSwyQkFBaEcsRUFBNEgsS0FBSSxhQUFoSSxFQUE4SSxLQUFJLFlBQWxKLEVBQStKLEtBQUksMkJBQW5LLEVBQStMLE1BQUssVUFBcE0sRUFBK00sTUFBSyxhQUFwTixFQUFr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VW9CLEVBQWQiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigpe2Z1bmN0aW9uIHIoZSxuLHQpe2Z1bmN0aW9uIG8oaSxmKXtpZighbltpXSl7aWYoIWVbaV0pe3ZhciBjPVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmU7aWYoIWYmJmMpcmV0dXJuIGMoaSwhMCk7aWYodSlyZXR1cm4gdShpLCEwKTt2YXIgYT1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK2krXCInXCIpO3Rocm93IGEuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixhfXZhciBwPW5baV09e2V4cG9ydHM6e319O2VbaV1bMF0uY2FsbChwLmV4cG9ydHMsZnVuY3Rpb24ocil7dmFyIG49ZVtpXVsxXVtyXTtyZXR1cm4gbyhufHxyKX0scCxwLmV4cG9ydHMscixlLG4sdCl9cmV0dXJuIG5baV0uZXhwb3J0c31mb3IodmFyIHU9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZSxpPTA7aTx0Lmxlbmd0aDtpKyspbyh0W2ldKTtyZXR1cm4gb31yZXR1cm4gcn0pKCkiLCIvKiBleHBvcnRlZCBhcnJheUZpbmQsIGQzVGlwICovXG5pbXBvcnQgeyBhcnJheUZpbmQgfSBmcm9tICcuLi9qcy1leHBvcnRzL3BvbHlmaWxscyc7XG5pbXBvcnQgeyBkM1RpcCB9IGZyb20gJy4uL2pzLXZlbmRvci9kMy10aXAnO1xuIFxuKGZ1bmN0aW9uKCl7IFxuICBcInVzZSBzdHJpY3RcIjtcblxuICB2YXIgYWxhc2thUGF0aCA9IFwiTTI3My43MTY3MzcsMzc4Ljk3NDIyMkwyNzMuNzE2NzM3LDM3OC45NzQyMjJMMjczLjcxNjczNywzNzguOTc0MjIyWk0yNjguOTA1ODg5LDM4My4wNjgyMzZMMjY4LjkwNTg4OSwzODMuMDY4MjM2TDI2OC45MDU4ODksMzgzLjA2ODIzNlpNMjY4Ljg2MDI4OSwzODIuNTk5OTAzTDI2OC44NjAyODksMzgyLjU5OTkwM0wyNjguODYwMjg5LDM4Mi41OTk5MDNaTTMwMS4zODEwMTQsMjM2LjMzNTQ4M0wzMDMuMzAzODMzLDIzNi4zNjY3MDZMMzA4LjA0NjI4LDIzOC4zODQ0NDJMMzA4LjY4NDY4NywyMzYuOTAxMzg2TDMxMy4wOTI3MzEsMjM1LjM4MzIwNkwzMTQuMTQ5MTQxLDIzNi40MzY5NTZMMzE3LjA4Mjc3MSwyMzYuMzIzNzc1TDMxNy4zMjU5NzMsMjM3Ljk4MjQ1NkwzMTkuNTgzMTk2LDIzOC4wODM5MjhMMzIxLjQ5MDgxNSwyMzkuNzkzMzQ1TDMyMC4yOTc2MDMsMjQyLjU4NzczNEwzMjAuNjc3NjA3LDI0NC4xNzYxNjVMMzIwLjM1MDgwNCwyNDguNzAzMzg4TDMxNi4xNzgzNjIsMjQ4LjMzNjUyNkwzMTMuNjYyNzM3LDI0OC45ODA0ODVMMzEyLjcyNzkyNywyNTAuNDU1NzM1TDMxMC42MjI3MDYsMjQ3LjQwMzc2MkwzMDguNTU1NDg2LDI0Ny4wMDk1ODJMMzA1Ljk3OTA2LDI0My42NjA5OThMMzAzLjkxMTgzOSwyNDIuMzkyNTk1TDMwMi4xMjU4MjEsMjQwLjE3MTkxNFpNMjUzLjkzMzczOSwzODUuNTExMzc1TDI1My45MzM3MzksMzg1LjUxMTM3NUwyNTMuOTMzNzM5LDM4NS41MTEzNzVaTTI1My4wNjczMzEsMzg3LjI5ODg0OEwyNTUuNjUxMzU3LDM4Ni4yNDExOTVMMjU5LjEzOTc5MSwzODUuODMxNDAzTDI2MC42NDQ2MDYsMzg3LjIxNjg4OUwyNjEuNjg1ODE3LDM4NS43Njg5NTlMMjY0Ljc2Mzg0OCwzODUuOTU2MjkyTDI2NC4yMTY2NDIsMzgzLjE4NTMxOUwyNjYuNDI4MjY0LDM4My4yMTI2MzlMMjY1Ljg0MzA1OCwzODIuMDYxMzE5TDI2OC4zNTg2ODQsMzgxLjk4MzI2NEwyNzEuMDc5NTExLDM4Mi43NTIxMTFMMjY3LjgyNjY3OCwzODAuMzk4NzM2TDI2Ny4wODk0NzEsMzgwLjcxNDg2MUwyNjUuNjMwMjU2LDM3OC41NzIyMzZMMjY3LjIzMzg3MiwzNzYuNzQ5NjM4TDI3Mi4xMjgzMjEsMzc1Ljk2NTE4TDI3My42NzExMzcsMzc2LjU3NDAxM0wyNzIuODA0NzI4LDM4MC41MzUzMzNMMjc4LjA5NDM4MSwzNzguMjg3MzMzTDI3OC43OTM1ODgsMzc5LjY1NzIwOEwyNzMuODk5MTM5LDM4Mi40NTE1OTdMMjczLjk2NzU0LDM4My4zNjg3NUwyNzYuMzMxMTYzLDM4Mi44ODg3MDhMMjc2LjQ2Nzk2NSwzODQuODYzNTE0TDI3Mi4zODY3MjQsMzg1LjI0OTg4OUwyNzEuNDgyMzE1LDM4Ny4yMjg1OThMMjcwLjgwNTkwOCwzODUuNTg1NTI4TDI3MC4wNjg3MDEsMzg3Ljk1NDUxNEwyNjguOTgxODksMzg2LjAwNzAyOEwyNjguNzE1ODg3LDM4OC41Mzk5MzFMMjY0LjY2NTA0NywzODcuMzEwNTU2TDI1OC40ODYxODUsMzg4LjYxNzk4N0wyNTcuNDE0NTc0LDM4OS43ODEwMTVMMjUzLjY2NzczNywzODguMjg2MjVaTTI1Mi44MDEzMjgsMzg3LjcxMjU0MkwyNTIuODAxMzI4LDM4Ny43MTI1NDJMMjUyLjgwMTMyOCwzODcuNzEyNTQyWk0yNTQuNTAzNzQ1LDM3Mi44NjYzNzRMMjU0LjUwMzc0NSwzNzIuODY2Mzc0TDI1NC41MDM3NDUsMzcyLjg2NjM3NFpNMzI1LjM0NDA1MywxMjguNzAwNzYzTDMyNS4zNDQwNTMsMTI4LjcwMDc2M0wzMjUuMzQ0MDUzLDEyOC43MDA3NjNaTTMyOS41MzkyOTUsMTEzLjUyMjg1OUwzMzEuMjcyMTEzLDExMi4xODgxMDhMMzM3LjcwOTM3NywxMTAuNjA3NDgzTDM0Ni4yNTE4NjMsMTA2LjkxNTQ1NUwzNTYuNTM0NzY1LDEwMy40NTM2OTFMMzYxLjIxNjQxMiwxMDIuMzI5NjkxTDM2OC41MTI0ODUsMTAxLjM4NTIxOEwzNzMuMzkxNzM0LDEwMi4yMTY1MUwzNzUuMDEwNTUsMTAyLjk3NzU1MkwzNzIuNTc4NTI2LDEwNi4yNTk3ODhMMzcyLjEwNzMyMSwxMDkuNDA5MzNMMzcwLjg4MzcwOSwxMTAuNTc2MjYxTDM3MS41OTA1MTYsMTEzLjkxMzEzNkwzNzcuNjI0OTc2LDExNS43MzE4MzFMMzgwLjkyMzQwOSwxMTUuNTkxMzMxTDM4MS44NjU4MTksMTE3LjE3NTg1OUwzODQuMTYxMDQyLDExNy44NTQ5NDJMMzg2LjU2MjY2NiwxMTcuMTIxMjJMMzg5LjMzNjY5MywxMjAuMDk1MTM3TDM4OS4yMjI2OTIsMTE4LjUxNDUxMkwzOTIuNTk3MTI2LDExNC4zODE0N0wzOTQuNjQxNTQ2LDExNS4yODMwMTFMMzk3LjY3Mzk3NywxMTUuNTAxNTY3TDM5Ni43MTYzNjcsMTEyLjg5NDUxMUwzOTMuMzU3MTM0LDExMC44NzY3NzVMMzg5Ljc3NzQ5OCwxMTEuMzEzODg2TDM5MC43NTc5MDgsMTA4LjI3NzUyNUwzODguNzIxMDg3LDEwMi45Nzc1NTJMMzg2LjE2NzQ2MiwxMDEuNTE0MDFMMzg1LjY1ODI1Nyw5OC41NDc4OThMMzg3LjQ2NzA3NSw5Ni43MDU3ODdMMzg4LjY0NTA4Niw5Ny4wODQzNTdMMzg5Ljg4Mzg5OSwxMDAuNzgwMjg4TDM5MC43MTk5MDcsMTAxLjM1Nzg5OUwzODkuNjQ4Mjk2LDEwNC4zMzU3MTlMMzkwLjUxNDcwNSwxMDYuNjYxNzc0TDM5My4yMTI3MzIsMTA5Ljg2OTg1OEwzOTUuNjE0MzU2LDEwOS4zOTM3MTlMMzk0LjM5MDc0NCwxMDguMDU4OTY5TDM5MS42MDE1MTYsMTAzLjAwNDg3MUwzOTMuMTUxOTMyLDk5LjM1NTc3NEwzOTYuMTg0MzYyLDk3Ljg5NjEzNUwzOTMuMjA1MTMyLDk1LjQ5MjAyM0wzODcuMjc3MDczLDk2LjA1MDEyTDM4NS40MjI2NTQsOTQuMDk0ODI5TDM4Mi45MjIyMjksOTMuODQxMTQ4TDM3Ny42MzI1NzYsOTEuMTIwOTEyTDM3Ny41NTY1NzYsODcuNTg4ODk3TDM3Ni44NDIxNjgsODAuNDY2MzI3TDM3NS44MzEzNTgsNzguMDg5NTM1TDM3My4zMzA5MzMsNzUuMzMwMjcxTDM2OC4xOTMyODIsNjYuOTYyNzE0TDM2NC4yMDMyNDIsNjMuOTE0NjQ1TDM2Mi4xMjg0MjEsNTkuNDc3MTg2TDM1Ny45MDI3NzksNTYuNDY4MTQ0TDM2MS45MjMyMTksNTUuNzY1NjQ0TDM2My44MDgwMzgsNTMuMDUzMjEzTDM2NS44NTI0NTksNDUuOTA3MjI2TDM3MC4xMDg1MDEsNDcuNjcxMjgyTDM3My4yMTY5MzIsNDguMjcyMzFMMzgyLjI4MzgyMyw0OC42NTQ3ODJMMzg1LjAxMjI1LDQ3Ljc0OTMzN0wzODguNTMxMDg1LDQ1LjQ1MDYwMUwzOTIuMTEwNzIxLDQxLjY4ODMyM0wzOTMuMjA1MTMyLDM5LjU5MjUzMUwzOTQuMjg0MzQzLDM0LjY1NTUxNkwzOTUuOTc5MTYsMzEuMTcwMzM1TDQwMy4xMzA4MzEsMjMuMzUzMDcxTDQwNy4xOTY4NzIsMjAuOTU2NzY1TDQxMC4zNzM3MDQsMjIuMzUzOTU5TDQxMy40OTczMzUsMjIuMTM5MzA3TDQxNy44OTc3NzksMjAuMTA1OTU5TDQyMC44Njk0MDksMTcuODUwMTUzTDQyNS45MTU4NTksMTMuMjY4MjkyTDQyOS43NjkwOTgsMTEuOTgwMzc1TDQzMC4wMDQ3LDEzLjM1ODA1Nkw0MjguMjMzODgyLDEzLjM5MzE4MUw0MjkuNzYxNDk4LDE0LjY4NUw0MzEuMTgyNzEyLDE0LjAwNTkxN0w0MzMuMjcyNzMzLDE0LjU2MDExMUw0MzguMjEyNzgyLDE0LjE1MDMyTDQ0MC4zMTA0MDMsMTMuMzc3NTY5TDQ0NC4zNTM2NDQsMTAuMjM1ODMzTDQ0OC41NDEyODUsNC43OTkyNjNMNDUwLjQ3OTMwNSwzLjQ4NDAyN0w0NTAuNjAwOTA2LDQuODEwOTcxTDQ1My44MzA5MzgsNi40NDYyMzVMNDU0LjY0NDE0Niw3LjczODA1NUw0NTcuNDcxMzc1LDguNTQ5ODMzTDQ1Ny40NDA5NzQsMTAuODk5MzA1TDQ1NS44ODI5NTksMTIuNTU3OTg2TDQ1My43MDkzMzcsMTIuODk3NTI4TDQ1NC4wMzYxNCwxNS43ODE2ODFMNDU2LjQ4MzM2NSwxNi4yODUxMzlMNDU3LjQ0ODU3NCwxMy42MjM0NDRMNDU5LjUxNTc5NSwxMi4xMTY5NzJMNDYxLjE0MjIxMSw5LjA4MDYxMUw0NjQuNTc3NDQ2LDEyLjkwMTQzMUw0NjQuMzg3NDQ0LDE2Ljk3NTkzMUw0NjYuMDQ0MjYsMTYuODkwMDdMNDY3LjE5OTQ3MiwxOC40MDQzNDhMNDY5LjE2MDI5MiwxNi4wMzE0NTlMNDcyLjc2MjcyOCwxNi4wNDcwN0w0NzQuNDM0NzQ0LDE1LjM2MDE4MUw0NzkuNDY1OTk1LDE2LjQ1Mjk1OUw0ODIuMTAzMjIxLDE3LjgxNTAyOEw0ODAuMDc0MDAxLDIwLjg3NDgwNkw0ODAuNDMxMjA0LDIzLjcxOTkzMkw0ODMuMjIwNDMyLDI0LjM0MDQ3M0w0ODUuNzY2NDU4LDI0LjE2MDk0Nkw0ODQuNTA0ODQ1LDI3LjAyMTY4Mkw0ODYuODYwODY5LDI2Ljg4NTA4NUw0OTAuMTI4OTAxLDI4LjM3OTg0OUw0OTEuNjcxNzE3LDI2LjUxNDMyMUw0OTUuODIxMzU4LDI2LjU1NzI1Mkw0OTYuMjI0MTYyLDI3LjcyNDE4Mkw0OTguMTY5NzgyLDI3LjI2NzU1N0w1MDAuMDY5ODAxLDI1LjM4MjUxNUw1MDMuMTcwNjMyLDI1LjI0MjAxNUw1MDUuNDg4NjU1LDI1Ljg3ODE2OEw1MDcuMDc3MDcxLDI3LjMyNjA5OUw1MDkuOTQ5ODk5LDI3LjgxNzg0OUw1MTEuMDQ0MzEsMjkuNzk2NTU3TDUxMy40OTE1MzUsMjkuMTY4MjFMNTE3LjE0NzE3MSwzMi4yMjc5ODhMNTIxLjE3NTIxMiwzMy4xNTI5NDdMNTI2LjI1OTY2MywzMi4wNjAxNjlMNTMxLjQwNDkxNCwzMy4xMTM5MTlMNTMxLjQ4MDkxNSwzMi4zNjg0ODhMNTM0LjkzODk0OSwzNS4wNjkyMTFMNTM5LjIwMjU5MiwzNi40MzEyOEw1NDEuMzY4NjE0LDM2LjE1ODA4Nkw1NDIuNjY4MjI3LDM0LjQ1MjU3Mkw1NDkuNTE1ODk1LDMxLjI3MTgwOEw1NTEuNjM2MzE2LDMwLjgzODU5OUw1NTcuMDQ3NTcsMzMuNTEyMDAyTDU1OS4wMzg3OSwzNS4yMDE5MDVMNTY0LjYwOTY0NiwzNy42Njg0NjFMNTY3LjIxNjQ3MiwzOS40NTU5MzRMNTY4LjEyMDg4MSw0MC45NTQ2TDU2OS4yODM2OTMsMzkuNjE1OTQ3TDU3MC45NjMzMSw0MC4yMjQ3ODFMNjAxLjUyMzIxNSwyNTQuMjM3NTI3TDYwNy4yNjEyNzMsMjU1LjQwODM2MUw2MDcuNjY0MDc3LDI1My4yODUyNDlMNjEzLjUwODUzNSwyNTUuMzI2NDAyTDYxNi4xOTg5NjIsMjUxLjMwNjU0MUw2MjMuMDkyMjMxLDI0OS43Mzc2MjRMNjIyLjczNTAyNywyNTUuOTg5ODc1TDYyNC43NDkwNDcsMjU3LjgzMTk4Nkw2MjkuMDQzMDksMjU5LjE0NzIyMkw2MzAuNTQwMzA1LDI2Mi4xMDk0MzFMNjQ0LjUyNDQ0NSwyNzEuNzgwNTE1TDY0Ny44OTEyNzksMjc4Ljk2MTYyN0w2NDkuNjAxMjk2LDI3Ni40MzY1M0w2NTMuOTcxMzQsMjcxLjg1ODU3MUw2NTYuNzc1NzY4LDI3MS4xMDUzMzVMNjU3LjQ5Nzc3NSwyNjguMTM5MjIzTDY1Ni41MTczNjUsMjY0LjA2NDcyM0w2NTguNTAwOTg1LDI2My42NjI3MzZMNjU4Ljc3NDU4OCwyNjEuMzYwMDk3TDY1Ny4zMDc3NzMsMjYwLjczOTU1Nkw2NjEuNjAxODE2LDI1OC4yNjUxOTRMNjY2LjIwNzQ2MiwyNTQuMDMwNjhMNjY5LjUyMTA5NSwyNTUuNjY5ODQ3TDY3Mi41NjExMjYsMjU4LjA4NTY2Nkw2NzIuNDY5OTI1LDI2MS4zMzY2ODFMNjczLjk1OTU0LDI2MS45Mzc3MDlMNjc0Ljg1NjM0OSwyNjQuMjUyMDU2TDY3OC4wMjU1OCwyNjQuMjI0NzM3TDY3OC41ODAzODYsMjY1LjQzNDU5OEw2ODEuMTcyMDEyLDI2Ni4yMzQ2NjdMNjgyLjg1OTIyOSwyNjguMDE4MjM3TDY4Mi45MDQ4MjksMjY5LjQyMzIzN0w2ODUuMzk3NjU0LDI3MS42NzUxNEw2OTAuOTAwMTA5LDI3My4zNTMzMzVMNjkzLjI0MDkzMiwyNzUuNjA1MjM4TDY5OC4wNTE3ODEsMjc4LjU1NTczOEw2OTcuMzE0NTczLDI3OS43Njk1MDJMNzAyLjA4NzQyMSwyODQuMTUyMzIyTDcwNC4xNzc0NDIsMjg3LjE2OTE3TDcwNy41ODk4NzYsMjg5Ljk3MTM2NEw3MTMuMzg4NzM0LDI5Ni40NDk5NzZMNzE2LjY1Njc2NywyOTkuMjMyNjU3TDcxOC45NzQ3OSwzMDEuODU5MjI3TDcxOC4yNjc5ODMsMzA0LjkyMjkwOEw3MjIuNDg2MDI1LDMwNC44MjE0MzZMNzIyLjYzMDQyNiwzMDguODg0MjI4TDcyNi4xNDE2NjEsMzA5LjQ5Njk2NEw3MjYuMTExMjYxLDMxMC43NDU4NTNMNzI3LjkyMDA3OSwzMTMuOTAzMkw3MzAuOTM3MzA5LDMxMi42NjYwMkw3MzIuODI5NzI4LDMxMy42NjUxMzFMNzM4LjM4NTM4NCwzMTUuMzY2NzQyTDc0Mi4zNzU0MjQsMzE1LjA3MDEzMUw3NDUuMDIwMjUsMzE2LjYzMTI0Mkw3NDcuMTAyNjcxLDMxNi41ODgzMTJMNzQ4LjMzMzg4MywzMTguNjQ4OTc5TDc1MC44NTcxMDksMzE4Ljg5NDg1NEw3NTIuNDIyNzI0LDMxNy43NzA4NTRMNzU0LjQ3NDc0NSwzMTkuODY2NjQ2TDc1NS4xODE1NTIsMzIyLjA2MzkxTDc1NC4zNTMxNDQsMzI1LjcxMzAwN0w3NTUuOTY0MzYsMzI5LjY2NjUyMkw3NjAsMzM1LjU3NTMyOEw3NTkuMDQ5OTksMzM3Ljg5NzQ4MUw3NTguODM3MTg4LDM0MS4xNzE5MTJMNzU3LjkwOTk3OSwzNDQuOTE0Njc2TDc1NC44OTI3NDksMzUwLjc0OTMzTDc1My42MDgzMzYsMzQ5LjAxMjU5M0w3NTIuNDE1MTI0LDM1MC41MDczNTdMNzUxLjEzMDcxMSwzNDkuOTQ1MzU3TDc0OC40NDc4ODQsMzQzLjk2MjM5OEw3NDYuNDY0MjY1LDM0Mi4wMjY2Mkw3NDcuODYyNjc5LDMzOC45NzQ2NDhMNzQ4Ljc5NzQ4OCwzMzguODQ5NzU5TDc0Ny4xMTAyNzEsMzM2LjEzNzMyOEw3NDcuMTYzNDcyLDMzNC4zNDIwNUw3NDUuNTA2NjU1LDMzMC4wMjk0OEw3MzkuNjE2NTk2LDMyNS4wMDY2MDRMNzM5LjIyODk5MiwzMjUuNTU2ODk2TDc0Mi40MTM0MjQsMzI3Ljk0NTM5Nkw3NDQuNzY5NDQ4LDMzMC41MjEyM0w3NDYuNjY5NDY3LDMzNy4yNjEzMjhMNzQ1Ljc5NTQ1OCwzMzcuMjQ5NjJMNzQ2LjM4ODI2NCwzNDAuNDAzMDY1TDc0NS4zMDkwNTMsMzQyLjM4MTc3M0w3NDMuMTM1NDMxLDM0MS43NTM0MjZMNzQzLjk2Mzg0LDM0MC40OTY3MzFMNzQzLjc5NjYzOCwzMzguMDUzNTkyTDc0Mi42OTQ2MjcsMzQxLjU1NDM4NEw3MzkuOTk2NiwzNDEuNTQ2NTc5TDczNy43MDg5NzcsMzQwLjc1ODIxN0w3MzguNjgxNzg3LDM0My41OTk0NEw3MzguMzYyNTg0LDM0NS45OTE4NDNMNzM3LjA0MDE3LDM0NC43MjczNDNMNzM1LjI1NDE1MywzNDAuODMyMzdMNzM2Ljc5Njk2OCwzMzUuMDgzNTc4TDczNS41NzMzNTYsMzM0LjcwODkxMUw3MzQuNDEwNTQ0LDMzMC4yMzI0MjVMNzM2LjU5OTM2NiwzMjkuNjE1Nzg2TDczNC45MTk3NDksMzI3LjYwNTg1NUw3MzMuNTUxNzM2LDMyOS40ODMwOTFMNzMxLjc3MzMxOCwzMzAuMjA5MDA4TDczMy43NzIxMzgsMzMwLjcxMjQ2Nkw3MzQuMTQ0NTQxLDMzNC4zMTQ3MzFMNzMzLjE3MTczMiwzMzYuNDQ1NjQ3TDczMy4zNjkzMzQsMzM4LjY0NjgxNEw3MzAuMDQ4MSwzMzcuNDQwODU2TDcyOC44MDE2ODgsMzM1LjEzMDQxMUw3MjguNjcyNDg3LDMzMi42OTUwNzhMNzMwLjAzMjksMzMyLjE0NDc4Nkw3MjkuNDcwNDk1LDMyOC43MjU5NTJMNzMwLjQzNTcwNCwzMjguMTM2NjMzTDcyOC45Njg4OSwzMjMuNzgxMTMyTDczMS4zMTczMTMsMzIxLjg3NjU3Nkw3MjkuMTA1NjkxLDMyMi4yNDczNEw3MjcuMTIyMDcxLDMyNy4wNTk0NjZMNzI4LjUyODA4NSwzMjkuMzU4MjAyTDcyNy4zOTU2NzQsMzI5LjI5OTY2MUw3MjYuMTc5NjYyLDMzMS4zMjUyMDJMNzI0LjY1OTY0NywzMzAuNDAwMjQ0TDcyMy42MTA4MzYsMzI4LjAxOTU0OUw3MjEuNTI4NDE1LDMyOS4yNjQ1MzZMNzE5LjQ2ODc5NSwzMjUuNDk4MzU1TDcyMC43NTMyMDgsMzI0LjU1Nzc4NUw3MjEuMDI2ODEsMzIyLjExMDc0M0w3MjIuMTA2MDIxLDMyMS40NjY3ODVMNzIzLjI4NDAzMywzMjMuODY2OTkzTDcyNS41MzM2NTUsMzI0LjMxMTkxTDcyMy40MDU2MzQsMzIyLjc2MjUwN0w3MjMuMDU2MDMxLDMyMC4xNDc2NDZMNzIxLjc5NDQxOCwzMTguNDMwNDIzTDcyNC4yMTg4NDIsMzE4LjM3OTY4N0w3MjEuOTM4ODE5LDMxNy4zNDU0NTFMNzIxLjczMzYxNywzMTQuNzczNTJMNzE5Ljk3OCwzMTYuMDk2NTYyTDcxOC43Njk1ODgsMzE1LjgzMTE3M0w3MTguNDgwNzg1LDMxMy4wNTIzOTVMNzE0LjcwMzU0NywzMTEuODUwMzM5TDcxMS43Nzc1MTgsMzA5LjA3NTQ2NEw3MTMuNjc3NTM3LDMwOC4yMzI0NjRMNzA5LjcwMjY5NywzMDcuNTE4MjU1TDcwNi45Mjg2NjksMzA3LjY5Mzg4TDcwMy41MzE0MzUsMzA2LjgxOTY1OEw3MDMuMTIxMDMxLDMwNS4wNTk1MDVMNzA2Ljk4OTQ3LDMwMi44MTU0MDhMNzAzLjU1NDIzNiwzMDIuNzEwMDMzTDcwMy42NDU0MzYsMzAxLjUxNTc4Mkw3MDEuOTczNDIsMzAwLjI0MzQ3N0w3MDEuODg5ODE5LDI5Ny42NzU0NDlMNzAxLjAwODIxLDI5OC40NTIxMDJMNjk5LjI2Nzc5MywyOTcuMzM1OTA3TDY5OS4xMDA1OTEsMjk1LjI4MzA0Nkw3MDIuNTY2MjI2LDI5NS43NjY5OUw3MDUuNTQ1NDU1LDI5Ni43NzM5MDdMNzAwLjI3MTAwMywyOTMuODkzNjU3TDY5OS41NTY1OTYsMjk0LjA4ODc5NUw2OTguNzU4NTg4LDI5MC41OTk3MTJMNjk4Ljc3Mzc4OCwyOTMuNjYzMzkzTDY5Ny44NTQxNzksMjkzLjczMzY0M0w2OTQuNzE1MzQ3LDI5MC4zMTQ4MDlMNjkyLjI1MjkyMywyODguODU1MTdMNjkwLjY2NDUwNywyODQuMDc4MTY5TDY5MS43OTY5MTgsMjgyLjg4MzkxOUw2OTAuNDQ0MTA0LDI4MS4yMjkxNDFMNjg5LjgwNTY5OCwyODMuNjkxNzk0TDY5MC4zMzc3MDMsMjg2LjA0MTI2N0w2ODguMjcwNDgzLDI4Ni43MDQ3MzlMNjg0Ljk0MTY0OSwyODYuNjk2OTM0TDY4My4zNjg0MzQsMjg1LjQwNTExNEw2ODMuNDIxNjM0LDI4My4zOTkwODZMNjgyLjE1MjQyMiwyODMuNTIwMDcyTDY4MS4wNjU2MTEsMjgxLjQ1NTUwMkw2NzQuOTE3MTQ5LDI3NC4yOTc4MDdMNjczLjEzMTEzMSwyNjkuNDkzNDg3TDY3MC4xOTc1MDIsMjY1LjY0OTI1MUw2NjkuMzg0Mjk0LDI2MS42MDIwN0w2NjkuNjY1NDk3LDI2Ni43MjI1MTVMNjY4LjEwNzQ4MSwyNjYuNzIyNTE1TDY3MC45NzI3MSwyNjkuNDExNTI5TDY3MS40Mjg3MTQsMjcyLjM0NjQxOEw2NzYuMzE1NTYzLDI3OS41MzUzMzVMNjc1LjU2MzE1NiwyNzkuNTk3NzhMNjc5LjEyNzU5MSwyODYuMzg0NzExTDY3OS41MDc1OTUsMjg4Ljc2MTUwM0w2NzYuMjc3NTYzLDI4OC40MjE5NjFMNjczLjE2MTUzMiwyODMuNTY2OTA1TDY3My42ODU5MzcsMjg1Ljk1NTQwNkw2NzEuNzMyNzE3LDI4NS4yMjk0ODlMNjY4LjQ1NzA4NSwyODcuMDc5NDA2TDY2OC4yMDYyODIsMjg1LjA2NTU3Mkw2NjYuNzg1MDY4LDI4Mi45MjI5NDdMNjY3LjE0MjI3MSwyODEuNTE3OTQ3TDY2NC4yODQ2NDMsMjc3LjgyNTkxOUw2NjQuOTQ1ODQ5LDI3Ni44OTcwNTdMNjYyLjYyNzgyNiwyNzQuMjA4MDQzTDY2My43OTgyMzgsMjc2LjY3ODUwMkw2NjMuNzk4MjM4LDI3OS4zNjM2MTNMNjYyLjYwNTAyNiwyNzkuNTMxNDMzTDY1OS40MzU3OTQsMjc4LjIzNTcxTDY1Ny45MDgxNzksMjc1Ljc0MTgzNUw2NTcuNTU4NTc2LDI3Ny40MzE3MzhMNjUxLjY5ODkxNywyNzQuOTg4NTk5TDY1My45Nzg5NCwyNzcuMTMxMjI0TDY1Mi45NjgxMywyNzguMDYwMDg1TDY1Ni4yNzQxNjMsMjc3Ljk5MzczOEw2NTguNjY4MTg3LDI3OC41NzEzNDlMNjU5LjI5MTM5MywyNzkuOTg4MDU4TDY2Mi4zMDg2MjMsMjgxLjU0OTE2OUw2NjUuNjI5ODU2LDI4NC41NTQzMDhMNjY3LjA2NjI3MSwyODcuNTY3MjUzTDY2My40MDMwMzQsMjkwLjA4NDU0NUw2NjAuMTY1NDAyLDI5MC4wNjUwMzFMNjYxLjM5NjYxNCwyOTEuNzk3ODY1TDY2MC4xNTc4MDIsMjkyLjg2MzMyM0w2NTYuOTA0OTY5LDI5MC40NjMxMTVMNjU2Ljg4MjE2OSwyODkuNDcxODA5TDY1My40ODQ5MzUsMjg5LjIzMzczOUw2NDYuNDc3NjY1LDI4Ni4wMjU2NTZMNjQ2LjIxOTI2MiwyODUuMTA4NTAzTDY0Mi43ODQwMjgsMjgyLjkwNzMzNkw2NDIuMjA2NDIyLDI4MC43NTY5MDVMNjM4LjA3MTk4MSwyNzcuODU3MTQxTDYzMy4zNzUxMzQsMjc2LjcyNTMzNUw2MjkuNjk2Njk3LDI3NC43MTU0MDRMNjI0LjIwOTQ0MiwyNzMuMDk1NzUxTDYxNy41MTM3NzUsMjY5Ljk2MTgyMUw2MTkuMzgzMzk0LDI2OC43Njc1N0w2MjAuOTQxNDA5LDI2NS4xODQ4Mkw2MTguNzkwNTg4LDI2Mi4zMjc5ODZMNjE4LjU3MDE4NiwyNjEuMDQzOTcyTDYxOS43OTM3OTgsMjU4LjY3MTA4M0w2MTkuMTQwMTkxLDI1Ny43MDMxOTRMNjE3LjQ2MDU3NSwyNjAuODI5MzJMNjE3LjEwMzM3MSwyNjMuMDU3ODA2TDYxMS40NDEzMTQsMjY3LjA3NzY2N0w2MDQuNjQ2ODQ2LDI2Ni45NDQ5NzNMNTk3Ljc4Mzk3OCwyNjQuNTY0Mjc4TDU5OS40NDgzOTQsMjYzLjI2MDc1TDU5OC4yMzk5ODIsMjU5LjgyNjMwNkw1OTUuNjcxMTU3LDI1OC4zOTM5ODZMNTk4LjIwMTk4MiwyNjEuMDU5NTgzTDU5NS44NTM1NTksMjYzLjA0MjE5NUw1ODQuNzE5NDQ3LDI2MS42MDIwN0w1ODAuNDU1ODA1LDI2MS45NDE2MTFMNTcyLjQwNzMyNCwyNjMuOTkwNTdMNTY5LjM3NDg5NCwyNjUuNTIwNDU5TDU2NS4xNzk2NTIsMjY1LjAzNjUxNEw1NjcuNTg4ODc2LDI2NC4zNTc0MzFMNTY0LjQyNzI0NCwyNjIuMzA0NTdMNTY1LjA5NjA1MSwyNjEuMzk5MTI1TDU2Mi4zNTI0MjQsMjYyLjAwNzk1OUw1NTcuMzA1OTczLDI2MS4xMzM3MzZMNTU5LjIwNTk5MiwyNjAuMDY4Mjc4TDU1Ni40OTI3NjUsMjU5LjE2MjgzM0w1NTguMDEyNzgsMjU1LjUwMjAyN0w1NTUuNzMyNzU3LDI1Ni44MjUwNjlMNTU0LjY5OTE0NywyNTkuNTk2MDQyTDU1My42MTk5MzYsMjU5LjU2NDgxOUw1NDkuMDk3ODkxLDI1Ni41MjQ1NTVMNTQ0Ljg4NzQ0OSwyNTYuMzQxMTI1TDU0Ni43MTE0NjcsMjU0LjkzMjIyMkw1NDguMzgzNDg0LDI1MS41MDE2OEw1NDUuOTUxNDYsMjUyLjkyMjI5MUw1NDQuMjAzNDQyLDI1Mi45NDU3MDhMNTQ0LjkyNTQ0OSwyNTAuOTE2MjYzTDU0Mi41NTQyMjYsMjUyLjY2NDcwN0w1NDEuMTU1ODEyLDI1Mi4zMzY4NzRMNTQzLjQzNTgzNCwyNTAuMTg2NDQzTDUzNy4xNDI5NzEsMjUxLjgzMzQxNkw1MzYuMjIzMzYyLDI1MC42NzgxOTNMNTQwLjI1MTQwMywyNDkuMTk5MDRMNTQxLjk5MTgyLDI0Ny43MDQyNzZMNTQxLjE3MTAxMiwyNDYuOTg2MTY1TDUzOS40MzA1OTQsMjQ4LjY3NjA2OEw1MzcuNjE0MTc2LDI0OC42NDQ4NDZMNTM1LjU3NzM1NiwyNDYuNjQ2NjIzTDUzNy4xOTYxNzIsMjQ2LjEzOTI2Mkw1MzUuNzA2NTU3LDI0NS4zMDc5NzFMNTM2LjY1NjU2NywyNDIuNTY0MzE3TDU0MC42MDg2MDYsMjQyLjI5ODkyOUw1MzguODkwOTg5LDI0MS4yNTY4ODdMNTM2LjM0NDk2MywyNDIuMDEwMTIzTDUzMy40MTg5MzQsMjQ2LjAwMjY2NUw1MzEuNDczMzE1LDI0MS4xNTE1MTJMNTMxLjU1NjkxNiwyNDQuMzMyMjc2TDUzMC43MDU3MDcsMjQ2LjM0NjExTDUyNi44NTI0NjksMjQ3LjQxMTU2OEw1MjYuNDQ5NjY0LDI0NS42NTE0MTVMNTI3LjExMDg3MSwyNDMuMzE3NTU0TDUyNi4zNDMyNjMsMjQxLjgyMjc5TDUyNS41OTA4NTYsMjQ1LjgxMTQyOUw1MjUuOTYzMjYsMjQ4LjQ0MTkwMUw1MjQuMzgyNDQ0LDI0Ny40OTM1MjZMNTI0LjM1MjA0NCwyNDkuMzg2Mzc0TDUxOS44OTgzOTksMjQ5Ljg3MDMxOEw1MjAuMjcwODAzLDI0Ny4yMDg2MjRMNTIxLjk1ODAyLDI0NC43NTM3NzZMNTIxLjg4OTYxOSwyNDMuNDYxOTU2TDUyMy44NjU2MzksMjQwLjc2MTIzNEw1MjQuMTU0NDQyLDIzOC43MDgzNzNMNTIwLjM2MjAwNCwyNDUuMDQ2NDg0TDUxOS4yOTc5OTMsMjQyLjUzNjk5OEw1MTYuNDQ3OTY0LDI0NS42NDc1MTJMNTE5LjQxMTk5NCwyNDMuNTYzNDI5TDUxOC4wNTE1ODEsMjQ5LjA0NjgzMkw1MTUuOTkxOTYsMjQ5LjczNzYyNEw1MTMuOTc3OTQsMjUxLjg4NDE1Mkw1MTMuOTAxOTM5LDI1My40OTk5MDJMNTE1Ljg0NzU1OCwyNTAuNjM1MjYzTDUxNy40NjYzNzUsMjUwLjY0Njk3MUw1MTYuNzY3MTY4LDI1NC4xMzk5NThMNTE4LjUxNTE4NSwyNTAuODI2NDk5TDUyMC40MDAwMDQsMjUxLjI0MDE5M0w1MjAuNjA1MjA2LDI1Mi45ODg2MzhMNTE4LjA0Mzk4LDI1Ni4yMDg0M0w1MTYuMjU3OTYzLDI1NS4xNTg1ODNMNTEzLjYyODMzNiwyNTcuODI0MThMNTE2LjUyMzk2NSwyNTUuNzk0NzM2TDUxOC43MzU1ODcsMjU3LjExMzg3NUw1MjAuNzM0NDA3LDI1NC40OTEyMDhMNTIyLjUwNTIyNSwyNTguMTAxMjc4TDUxOC4wMjg3OCwyNjIuNjYzNjI1TDUyMC4yMTc2MDIsMjYyLjgxOTczNkw1MjAuOTc3NjEsMjY1Ljk0NTg2Mkw1MTkuMDI0MzksMjY4LjA1MzM2Mkw1MTguNjk3NTg3LDI2NC40NTg5MDNMNTE3Ljk4MzE4LDI2NC41MjUyNUw1MTcuMDAyNzcsMjY5LjY4ODYyNkw1MTUuODM5OTU4LDI2Ny42ODI1OThMNTE1LjAyNjc1LDI3MC4yMzUwMTVMNTEzLjUxNDMzNSwyNjkuNDM0OTQ1TDUwOS4xMjkwOTEsMjY5LjMyNTY2OEw1MTAuMDk0MzAxLDI2Ny40NjQwNDJMNTA4LjYxMjI4NiwyNjcuODg5NDQ1TDUwNy4xMDc0NzEsMjcxLjA0Njc5M0w1MDYuMjYzODYzLDI2NS43NDI5MTdMNTA1LjQ4MTA1NSwyNjUuOTE0NjRMNTA2LjA1ODY2MSwyNjguNjQ2NTg0TDUwNC40MDk0NDQsMjcwLjM0ODE5Nkw1MDMuMzc1ODM0LDI3Mi44MjI1NTdMNTAyLjk5NTgzLDI3MC41NzA2NTRMNTAxLjk5MjYyLDI2OS44NzU5NTlMNTAxLjg0ODIxOCwyNzIuNzI0OTg4TDUwMC41MDMwMDUsMjcxLjk2Mzk0Nkw1MDIuMjQzNDIyLDI3NS41NDY2OTZMNDk5LjgzNDE5OCwyNzQuODEyOTc0TDQ5OS43OTYxOTgsMjc2LjIyMTg3N0w0OTguMDAyNTgsMjc2LjY0NzI4TDQ5Ni42MDQxNjYsMjc5LjY0NDYxM0w0OTUuODc0NTU5LDI3OS40NDE2NjlMNDk0Ljk5Mjk1LDI4Mi4wMzMxMTRMNDk0LjI3ODU0MywyODEuMDEwNTg2TDQ5Ni40MjE3NjQsMjc0LjQ2NTYyN0w0OTMuNDA0NTM0LDI4MS4wNTc0MTlMNDkxLjgwODUxOCwyNzkuMjAzNTk5TDQ5MS45MDczMTksMjgxLjg1NzQ4OUw0OTAuMzQ5MzAzLDI4MS44MjIzNjRMNDg3LjMyNDQ3MywyODYuMTgxNzY3TDQ4NC4zMzc2NDMsMjg2LjgyOTYyOEw0ODIuMzE2MDIzLDI4NS41MDI2ODNMNDgwLjM3MDQwNCwyODcuNDI2NzUzTDQ3OC41ODQzODYsMjg3Ljc4NTgwOUw0NzUuNjUwNzU3LDI4NS40MzI0MzNMNDc2LjM2NTE2NCwyODMuMDMyMjI1TDQ3Ny44MjQzNzgsMjgzLjEwNjM3OEw0NzcuMDE4NzcsMjgxLjU1Njk3NUw0NzkuNjU1OTk3LDI4MC4yMTQ0MTlMNDgyLjI0MDAyMiwyODAuNzU2OTA1TDQ4MS43NjEyMTgsMjc5Ljg0NzU1OEw0ODUuOTQ4ODU5LDI3NS45NzIwOTlMNDg4LjI1MTY4MywyNzMuMjcxMzc2TDQ4Ni4zNTkyNjQsMjczLjQwMDE2OEw0ODEuNjA5MjE2LDI3Ni44Mzg1MTZMNDc5Ljg2MTE5OSwyNzYuNDM2NTNMNDc3LjI2MTk3MywyNzMuNTEzMzQ5TDQ3OS4xOTk5OTIsMjY4LjA5NjI5M0w0ODMuMDQ1NjMsMjYyLjY0ODAxNEw0ODMuMjgxMjMzLDI2MC4wNDg3NjRMNDg0LjI0NjQ0MiwyNTkuMzczNTgzTDQ4NC42ODcyNDcsMjU1LjgxNDI0OUw0ODMuMTI5MjMxLDI1MS43NjcwNjhMNDg3LjYzNjA3NiwyNDkuODAwMDY4TDQ5MS40Mjg1MTQsMjQ2LjQwODU1NEw0OTQuODEwNTQ4LDI0NC41NzAzNDVMNDk2Ljg0NzM2OCwyNDcuNzYyODE4TDQ5OC43NzAxODgsMjQ4LjE2NDgwNEw1MDAuNjU1MDA3LDI0Ni4yMzY4MzJMNTAyLjk4ODIzLDI0Ny4yMzU5NDNMNTA4LjMzMTA4MywyNDguMDM2MDEzTDUxMC4yMDA3MDIsMjQ5LjI4ODgwNEw1MDguMDExODgsMjQ2LjcxMjk3MUw1MDYuMTU3NDYyLDI0Ny4xNTc4ODdMNTA0LjY2Nzg0NywyNDUuODU0MzU5TDUwMS45MDE0MTksMjQ1LjA0NjQ4NEw0OTguMjkxMzgzLDI0MS45OTQ1MTJMNDk5LjgxODk5OCwyNDAuNzA2NTk1TDUwMi4wOTkwMjEsMjM2Ljg3MDE2NEw1MDUuMzg5ODU0LDIzNC45NTM5TDUwMi45NDI2MjksMjM0LjIxNjI3NUw1MDAuMzIwNjAzLDIzNi42MzU5OTdMNDk5LjE4MDU5MiwyMzkuOTk2Mjg5TDQ5Ni43NDg1NjcsMjM5LjQ4NTAyNUw0OTMuODIyNTM4LDIzOS44MTI4NTlMNDkyLjkxMDUyOSwyMzguNjQ5ODMxTDQ4OC41NjMyODYsMjQwLjU3MzkwMUw0ODYuMDI0ODYsMjQ0LjI4NTQ0M0w0ODIuMzk5NjI0LDI0NS4wMDc0NTdMNDc5LjE2MTk5MiwyNDguMDU1NTI2TDQ3OS42NTU5OTcsMjUxLjkxNTM3NEw0NzguMTg5MTgyLDI1MS4yOTA5M0w0NzUuOTAxNTU5LDI1Mi45NDE4MDVMNDc1LjI0MDM1MiwyNTQuNDYzODg4TDQ3Mi41MTk1MjUsMjU3LjE2NDYxMUw0NzMuNDg0NzM1LDI1OS4wNjUyNjRMNDY5LjczNzg5NywyNjIuODM5MjVMNDY2LjMxNzg2MywyNjIuNzk2MzJMNDY5LjQwMzQ5NCwyNjYuMTcyMjIzTDQ2Ny42ODU4NzcsMjY5LjkyNjY5Nkw0NjYuNDkyNjY1LDI3MC42ODc3MzdMNDYzLjg3MDYzOSwyNzAuNDQxODYyTDQ2MS40OTk0MTUsMjcxLjYwNDg5TDQ2NC4zMDM4NDMsMjcyLjEzOTU3MUw0NjMuNTA1ODM1LDI3NC43NTQ0MzJMNDYwLjAwOTgsMjc2LjI4MDQxOEw0NTkuMTEyOTkxLDI3Mi42OTc2NjhMNDU4LjU4ODU4NiwyNzUuNTA3NjY4TDQ1Ny4wOTg5NzEsMjc3LjY4NTQxOUw0NTQuODI2NTQ4LDI3OC4yMzE4MDhMNDU1LjI1OTc1MywyODAuMzI3NTk5TDQ1My4xNzczMzIsMjgwLjYxMjUwMkw0NTAuNzk4NTA4LDI4Mi4xNTgwMDJMNDQ5LjcwNDA5NywyODUuOTEyNDc1TDQ0OS43ODAwOTgsMjg5LjUzODE1Nkw0NTEuMTE3NzExLDI4OC40MDI0NDhMNDU1LjA1NDU1MSwyODguNjE3MUw0NTYuMDg4MTYxLDI5MC4yODM1ODdMNDU3LjUzOTc3NSwyOTAuNTIxNjU2TDQ1OS4zMTA1OTMsMjkyLjMyNDc0TDQ1Ny44MjA5NzgsMjk3LjA3ODMyNEw0NTUuNzk5MzU4LDI5OC44NjU3OTZMNDUyLjE1ODkyMiwyOTkuMjUyMTcxTDQ1MS41MjgxMTUsMzAxLjgwMDY4NUw0NTAuMDc2NTAxLDMwMS44MjgwMDVMNDQ5Ljk1NDksMzA0LjkyNjgxMUw0NDguMzUxMjg0LDMwNC43NTUwODhMNDQ2LjEzOTY2MSwzMDYuNDI5MzhMNDQ4LjYwOTY4NiwzMDUuNzU4MTAyTDQ0OC4yNjc2ODMsMzA4LjQ3ODMzOUw0NDYuMTAxNjYxLDMwOS4yNTQ5OTJMNDQ2LjMyMjA2MywzMTAuODU5MDMzTDQ0NC41MzYwNDUsMzA4LjY3NzM4TDQ0NC42NjUyNDcsMzEwLjU4MTkzNkw0NDMuMDkyMDMxLDMxMi4xMjM1MzRMNDQxLjIzNzYxMiwzMTEuMzY2Mzk1TDQzOS4xNTUxOTIsMzExLjc5NTdMNDM2LjIyMTU2MiwzMTMuMzkxOTM3TDQzNi40ODc1NjUsMzE1LjA5MzU0OEw0MzMuMzYzOTM0LDMxNS44NTQ1OUw0MzMuNTMxMTM1LDMxOC4yNzgyMTVMNDMyLjM1MzEyNCwzMTguNjQxMTczTDQzMC42NTA3MDcsMzE2LjU2ODc5OEw0MjkuMzg5MDk0LDMxOC4zODM1OUw0MjkuNzg0Mjk4LDMxOS40NjA3NTdMNDI3LjkyMjI3OSwzMTkuOTIxMjg0TDQyNy44MDgyNzgsMzIxLjk3MDI0M0w0MjQuMDMxMDQsMzIxLjEzMTE0Nkw0MjQuMDA4MjQsMzI0LjE0NDA5MUw0MjIuMTYxNDIyLDMyMi44NjAwNzZMNDE3LjE1Mjk3MiwzMjYuODI1Mjk5TDQxOS42NjA5OTcsMzI2LjI0NzY4OEw0MTguODAyMTg4LDMyOC41Mzg2MTlMNDE5Ljc5MDE5OCwzMjkuNDI4NDUyTDQxOC4wMDQxOCwzMzEuNjY0NzQ0TDQxNS43NTQ1NTgsMzMyLjM1MTYzM0w0MTYuMjg2NTYzLDMzMy45MjgzNTVMNDE0LjM5NDE0NCwzMzIuMzA4NzAzTDQxMi43MDY5MjcsMzM1LjM5NThMNDEyLjA5ODkyMSwzMzMuNzUyNzNMNDA3LjY2MDQ3NywzMzcuOTAxMzg0TDQwNS42MTYwNTYsMzM1LjQwNzUwOEw0MDQuNDMwNDQ0LDMzNS45MjY1NzhMNDA1LjE0NDg1MSwzMzcuNDEzNTM2TDQwMy41OTQ0MzYsMzM3LjU2MTg0Mkw0MDMuNjAyMDM2LDM0MC44MjQ1NjVMNDAxLjMwNjgxMywzNDAuNjg0MDY1TDQwMC42MzgwMDYsMzM5LjEyMjk1M0wzOTguMzM1MTgzLDMzOS41NTYxNjJMMzk1LjE5NjM1MiwzNDEuNzE4MzAxTDM5OS4wMjY3OSwzNDEuNDQ1MTA2TDM5OC4xNTI3ODIsMzQzLjUxNzQ4MkwzOTUuMTA1MTUxLDM0MS45ODc1OTNMMzk1LjA4OTk1MSwzNDMuMzY5MTc2TDM5Mi42MTIzMjYsMzQyLjU1NzM5OEwzODkuOTc1MSwzNDQuNzIzNDRMMzkzLjYyMzEzNiwzNDcuMTI3NTUxTDM5Mi4wNjUxMjEsMzQ4LjE5NjkxM0wzODkuNjkzODk3LDM1My41MjQyMDVMMzg4LjY5ODI4NywzNTMuNjI5NThMMzg4LjAzNzA4LDM1MC41ODkzMTZMMzg2LjkxOTg2OSwzNTAuNDkxNzQ2TDM4Ny4wNDE0NywzNTMuMjA0MTc3TDM4NC41MDMwNDUsMzUyLjMxMDQ0MUwzODMuMzQ3ODMzLDM1NC4xMzY5NDFMMzc3LjYxNzM3NiwzNTQuNDYwODcyTDM3Ni42MzY5NjYsMzU2LjE2MjQ4M0wzNzUuODE2MTU4LDM1My42ODgxMjJMMzc0LjM2NDU0NCwzNTkuMjMzOTY5TDM3Mi4yMDYxMjIsMzU4LjczNDQxNEwzNzMuNjQyNTM2LDM1NS4wMzA2NzdMMzcxLjQzMDkxNCwzNTQuMDM1NDY5TDM3MC42Nzg1MDcsMzU1LjQ5OTAxMUwzNjkuNTE1Njk1LDM1NC41Nzc5NTVMMzY3LjgyODQ3OCwzNTcuMTc3MjA1TDM2My42MjU2MzYsMzU4LjQ0MTcwNUwzNjAuNzYwNDA4LDM2MS4xNjU4NDVMMzYwLjM3MjgwNCwzNTguMDQ3NTI1TDM1OS4wODgzOTEsMzYxLjExNTEwOUwzNTcuMzAyMzczLDM2MS4wMDU4MzFMMzU1LjY2MDc1NywzNTkuNDQ4NjIyTDM1NC42NDk5NDYsMzYwLjkxOTk3TDM1MS4xMzExMTEsMzYyLjI1NDcyTDM0OS45OTg3LDM2MS40MDc4MTdMMzQ3Ljc0MTQ3NywzNjEuNTI4ODAzTDM0OC42MDAyODYsMzU4LjY2NDE2NEwzNTAuNTUzNTA2LDM1Ni42NTAzM0wzNTAuMzQwNzAzLDM1NS44MDM0MjdMMzQ3LjM0NjI3MywzNTUuNzEzNjY0TDM0NS44Nzk0NTksMzU3LjQ2NjAxMUwzNDUuNTIyMjU1LDM2MC4xMTIwOTVMMzQxLjg4MTgxOSwzNjQuMDY5NTEyTDM0MC4zOTIyMDQsMzYzLjA1MDg4N0wzNDEuMDQ1ODEsMzY1Ljc5MDYzN0wzMzkuMzg4OTk0LDM2Ni42OTYwODFMMzM4LjA4OTM4MSwzNjQuNTQ1NjUxTDMzNy40NzM3NzUsMzY2LjY2MDk1NkwzMzQuNTQwMTQ1LDM2Ni42OTYwODFMMzMzLjQzMDUzNCwzNjQuNTEwNTI2TDMzNS4wMDM3NSwzNjQuODIyNzQ4TDMzNC4xMzczNDEsMzYxLjQ5NzU4MUwzMzIuNDA0NTI0LDM2MC4wNDE4NDVMMzMxLjI3OTcxMywzNjEuODU2NjM2TDMzMi42NzgxMjcsMzYzLjc1MzM4N0wzMzIuMDAxNzIsMzY0LjU4MDc3NkwzMzEuODk1MzE5LDM2Ny43ODg4NTlMMzI3Ljg5NzY3OSwzNjcuNjMyNzQ4TDMyNi4yNjM2NjMsMzYzLjIzODIyTDMyNC42OTgwNDcsMzYzLjEzMjg0NUwzMjMuOTUzMjQsMzY0LjYwMDI5TDMyNS44NTMyNTksMzY2LjM0MDkyOUwzMjMuMDMzNjMsMzY4Ljc3NjI2MkwzMjEuMDgwNDExLDM2OS4wNzI4NzNMMzIyLjY3NjQyNywzNjUuNzc4OTI5TDMyMy4yNTQwMzMsMzYyLjUzOTYyM0wzMjYuNDIzMjY0LDM2MS41MzI3MDZMMzI5LjE1MTY5MiwzNjIuMTQ1NDQyTDMyOC45NjkyOSwzNjAuNDcxMTVMMzMzLjAyMDEzLDM1OC41MjM2NjRMMzM0LjkyMDE0OSwzNTguNDAyNjc4TDMzNC4wMzg1NCwzNTYuNzU1NzA1TDMzOS4yMjkzOTIsMzUyLjM0NTU2NkwzNDYuMDE2MjYsMzQ4LjgzMzA2NkwzNTMuMjQzOTMyLDM0OC4wMDE3NzRMMzU1LjYxNTE1NiwzNDkuMzc5NDU0TDM1OC41NDg3ODUsMzQ4LjcxNTk4MkwzNTYuMzE0MzYzLDM1MC4xNjM5MTNMMzU3Ljk4NjM4LDM1NC4yNjk2MzZMMzYwLjI4OTIwMywzNTQuOTM3MDExTDM1OS4wNDI3OSwzNTMuNjM3Mzg1TDM1OS4wMzUxOSwzNTEuMzE1MjMyTDM2Mi43ODk2MjgsMzUyLjQ1NDg0NEwzNjIuODIwMDI4LDM1NC4wNjI3ODhMMzY1LjU1NjA1NiwzNTUuMTUxNjYzTDM2Ni4xODY4NjIsMzUzLjcwNzYzNUwzNjIuMDM3MjIsMzQ5LjY0NDg0M0wzNjMuNDczNjM1LDM0Ny45MzU0MjdMMzY2LjIwMjA2MiwzNDMuMjc1NTA5TDM3My45NDY1MzksMzM4LjM3MzYyTDM3Ny41NzE3NzYsMzM3LjIyMjNMMzg0LjY5MzA0NywzMzMuOTQwMDY0TDM4NS45ODUwNiwzMzIuOTU2NTY0TDM4Ny44Njk4NzksMzM0Ljg5NjI0NEwzODkuNTAzODk1LDMzNC43MzIzMjhMMzg5LjMyOTA5MywzMzEuNTc0OThMMzkxLjg2NzUxOSwzMjcuNTgyNDM4TDM5NS4yNzIzNTMsMzI0LjIyMjE0NkwzOTguMjQzOTgyLDMyMy4wMzk2MDRMNDAwLjQ4NjAwNSwzMjAuNjE5ODgyTDQwMy41NzkyMzYsMzE4Ljg4NzA0OEw0MDUuMDYxMjUxLDMyMC4wOTMwMDdMNDA0LjkyNDQ0OSwzMTguMDIwNjMxTDQwMy43NDY0MzcsMzE3Ljc5ODE3M0w0MDYuNDU5NjY1LDMwNi42MzIzMjVMNDA4LjQ5NjQ4NSwzMDUuNTYyOTYzTDQwNy41MzEyNzUsMzAyLjk5MTAzM0w0MDcuODY1Njc5LDMwMC4zMDIwMThMNDA5LjE4MDQ5MiwyOTcuNzYxMzFMNDEwLjY3NzcwNywyOTYuOTY1MTQzTDQxNC41MDgxNDUsMjkzLjU4OTI0TDQxNi4xNTczNjIsMjg3LjQ4MTM5Mkw0MTQuNTUzNzQ2LDI4OS44MTUyNTNMNDExLjUyMTMxNSwyOTAuNDMxODkyTDQwMi4wMjEyMiwyOTQuMDk2NjAxTDQwMC4zNjQ0MDQsMjk0LjEwODMwOUwzOTkuMTEwMzkxLDI5Mi44NDM4MDlMMzk4LjgwNjM4OCwyOTAuNzI0NjAxTDM5Ni43ODQ3NjgsMjg5LjI0NTQ0OEwzOTguMzUwMzg0LDI4NC45MjUwNzJMMzk2LjUyNjM2NSwyODYuNjU0MDAzTDM5NC42MTg3NDYsMjg3LjE4ODY4NEwzOTMuNzIxOTM3LDI5MC40MjAxODRMMzkyLjgwMjMyOCwyOTAuNDYzMTE1TDM5My41Njk5MzYsMjk1LjY4ODkzNUwzOTIuNzAzNTI3LDI5Ny44OTQwMDRMMzg5LjU5NTA5NiwyOTcuMDgyMjI2TDM4Ny4yNTQyNzMsMjg5LjkwODkyTDM4NS43MjY2NTcsMjg3LjI1NTAzMUwzODQuMDA5MDQsMjg2LjU3OTg1TDM4NC43NDYyNDcsMjg0LjU2MjExNEwzODMuMjMzODMyLDI4NC40NjA2NDJMMzgyLjIwMDIyMiwyODcuMTAyODIyTDM4MC43NjM4MDgsMjg3LjU3NTA1OUwzNzkuOTUwNiwyODUuMDI2NTQ0TDM3Ny4xNjg5NzIsMjg0LjM4MjU4NkwzNzcuNDE5Nzc0LDI4MS45Mjc3MzlMMzc2LjU2ODU2NiwyNzkuOTYwNzM4TDM3MS4yNzEzMTMsMjgyLjk3NzU4NkwzNzAuMTU0MTAyLDI4NC41MjY5ODlMMzY4LjYzNDA4NiwyODMuMjM5MDcyTDM2My4zNzQ4MzQsMjg1Ljg2NTY0MkwzNjMuMDkzNjMxLDI4Ny4yMzU1MTdMMzU4LjgyMjM4OCwyODguODM1NjU2TDM1Ny4zOTM1NzQsMjg2Ljk0NjcxMUwzNTQuNDgyNzQ1LDI4Ni41ODc2NTZMMzUzLjQxODczNCwyODUuNzY4MDcyTDM1Ny41ODM1NzYsMjg1LjQ5ODc4MUwzNTkuMDgwNzkxLDI4My4xMTgwODZMMzU5LjM2OTU5NCwyNzkuMjg1NTU4TDM1Ny44Nzk5NzksMjc0Ljg3MTUxNkwzNTcuNTE1MTc1LDI3Mi4wNjE1MTVMMzU5LjE3OTU5MiwyNjkuNzAwMzM0TDM2Mi42MTQ4MjYsMjY3LjU0NjAwMUwzNjEuMjg0ODEzLDI2NC4wMDIyNzhMMzYxLjQxNDAxNCwyNjIuNTMwOTMxTDM2MC4wNDYsMjU4LjU4MTMxOUwzNTkuOTQ3MTk5LDI1Ni40MTUyNzdMMzU3Ljg4NzU3OSwyNTAuODc3MjM1TDM1Ni4yNzYzNjMsMjUxLjUwOTQ4NUwzNTUuMTEzNTUxLDI1NC43MzcwODNMMzUzLjE2MDMzMiwyNTQuMTA4NzM1TDM1Mi40NjExMjUsMjU0Ljk1MTczNkwzNDguNDAyNjg0LDI1Ni4yMDQ1MjdMMzQ0LjA4NTg0MSwyNTYuNTQ0MDY5TDMzOC4xOTU3ODIsMjU1LjI2Mzk1OEwzMzYuNDA5NzY0LDI1NC4wMzA2OEwzMzUuOTc2NTYsMjUxLjUyNTA5NkwzMzcuMjY4NTczLDI1MS4yMTY3NzdMMzM0LjgwNjE0OCwyNDguMTI5Njc5TDMzNC4yMTMzNDIsMjQ1LjUwMzEwOUwzMzIuODMwMTI4LDI0My42Mjk3NzZMMzMyLjg1MjkyOSwyNDIuMjAxMzU5TDMzMC45NzU3MSwyNDEuOTEyNTUzTDMyOC4zNjEyODQsMjM3Ljg2MTQ3TDMzMC42NDEzMDYsMjM2Ljg5MzU4MUwzMjkuNzc0ODk4LDIzNS44NDM3MzNMMzI4LjAzNDQ4LDIzNi41NDIzMzFMMzI2LjEwNDA2MSwyMzUuNzM0NDU2TDMyNy4zNzMyNzQsMjM0LjUzNjMwM0wzMzEuNzgxMzE4LDIzMi4wMDM0TDMzMS4zOTM3MTQsMjMwLjQ2NTcwNUwzMzMuNTU5NzM2LDIyOS42MjY2MDhMMzMyLjg1MjkyOSwyMjguMDY1NDk2TDMzMC44MzEzMDgsMjI2Ljk0OTMwMkwzMzEuNzM1NzE3LDIyNS4xMTEwOTNMMzMzLjYyMDUzNiwyMjUuMzA2MjMyTDMzMi4wMzIxMiwyMjMuNjc4Nzc0TDMzMC42NTY1MDcsMjIwLjkwNzgwMUwzMjkuMzcyMDk0LDIyMi45MTc3MzJMMzI3LjAzODg3LDIyMS43MTU2NzZMMzI3LjIzNjQ3MiwyMTguOTI5MDkzTDMyOC4wNjQ4ODEsMjE3LjY3MjM5OEwzMjUuMjY4MDUzLDIxNi4wNDg4NDJMMzI1LjM1MTY1NCwyMTMuODg2NzAzTDMyNy41MTc2NzUsMjEyLjgxNzM0MkwzMjYuMTQyMDYxLDIxMC45MTI3ODZMMzIzLjQzNjQzNCwyMTEuMTg5ODgzTDMyNC4wMjE2NCwyMDguMzg3Njg5TDMyOC41NzQwODYsMjA4LjQ1MDEzM0wzMjYuMTg3NjYyLDIwNi45NTkyNzJMMzI1Ljc2MjA1OCwyMDQuNTUxMjU4TDMzMS4wNDQxMSwyMDUuMDAwMDc3TDMzMC4zMjIxMDMsMjAxLjY1NTM5NkwzMzEuMTUwNTEyLDE5OS4zNzYxNzRMMzM4LjgxMTM4OCwxOTIuMTUyMTMxTDM0MS42NDYyMTYsMTkwLjY3Mjk3OEwzNDMuOTAzNDM5LDE5MC41NDQxODdMMzQzLjU2MTQzNiwxODcuNDY0ODk1TDM0NS42MTM0NTYsMTgyLjU1OTEwMkwzNDcuNDE0Njc0LDE4MC45NjI4NjZMMzQ4LjY1MzQ4NywxODEuMjEyNjQ0TDM0OC42MzA2ODYsMTc4Ljk3NjM1MkwzNTEuOTA2MzE5LDE3Ni45NDMwMDVMMzU0Ljc0MTE0NywxNzcuMTI2NDM1TDM1Ny43MDUxNzcsMTc4Ljk4NDE1OEwzNTkuMTU2NzkyLDE4MS44MjUzOEwzNjAuOTk2MDEsMTgzLjg1ODcyOEwzNjQuMDA1NjQsMTgzLjg2MjYzTDM2OC41NzMyODYsMTgwLjk1ODk2M0wzNzMuNzQ4OTM3LDE3NS44NDI0MjFMMzczLjU4OTMzNiwxNzQuNDcyNTQ2TDM3NS44ODQ1NTksMTc1Ljg4OTI1NEwzNzQuNzQ0NTQ3LDE3Ny4zMzcxODVMMzc5LjM4MDU5NCwxNzcuNDI2OTQ5TDM4Mi4xMjQyMjEsMTc4LjA5NDMyNEwzODUuMjU1NDUzLDE3Ny41OTA4NjZMMzg1LjcyNjY1NywxNzYuNDcwNzY4TDM4OS42MDI2OTYsMTcyLjgzNzI4MkwzOTAuMzI0NzAzLDE3MC42MzYxMTVMMzg5LjQ4ODY5NSwxNjQuNTMyMTdMMzg5Ljk1OTksMTYxLjk3NTg1TDM4Ny42NDk0NzYsMTU3LjE4MzIzOEwzODUuMTAzNDUxLDE1Ni4wODY1NThMMzg3LjE3ODI3MiwxNTMuNjcwNzM4TDM5MC41Njc5MDYsMTU0Ljk4MjA3MUwzOTMuMTM2NzMxLDE1Mi43MzAxNjhMMzkzLjYyMzEzNiwxNTAuNDUwOTQ2TDM5Mi44ODU5MjksMTQ3Ljg3NTExMkwzOTAuNTc1NTA2LDE0NS4wNDk1MDFMMzg4LjIzNDY4MiwxNDguMDcwMjUxTDM4Ni42NzY2NjcsMTQ4LjM4MjQ3NEwzODUuMzYxODU0LDE0Ny4zMjA5MThMMzgyLjY3MTQyNywxNDguODM5MDk5TDM3OS45NTA2LDE0OC44OTc2NEwzNzkuMTgyOTkyLDE1MC4xMTE0MDRMMzc1Ljc4NTc1OCwxNTEuNTM1OTE4TDM3NC4yNTgxNDMsMTU0LjY3NzY1NUwzNzIuNDM0MTI0LDE1NS43NDMxMTNMMzcyLjc0NTcyNywxNTIuMTI5MTQxTDM2OS45ODY5LDE0Ny42NDQ4NDhMMzY4LjIyMzY4MiwxNDguNjI0NDQ2TDM2OS43Mjg0OTcsMTUwLjc0MzY1NEwzNzAuOTY3MzEsMTUxLjEwNjYxM0wzNjkuNzI4NDk3LDE1My4xOTA2OTZMMzY1LjczODQ1NywxNDguNjc1MTgyTDM2My4xMDg4MzEsMTQ3Ljg2MzQwNEwzNTcuOTg2MzgsMTQ3LjIzODk2TDM1My4xNzU1MzIsMTQ4LjYxNjY0TDM1MS40NTAzMTUsMTQ4LjQ2ODMzNUwzNDUuNjI4NjU2LDE0NC43OTU4MkwzNDAuNjg4NjA3LDE0Mi4yNTkwMTVMMzM5LjM3Mzc5NCwxNDAuNTI2MTgxTDMzOS4xMDAxOTEsMTM4LjE0OTM4OUwzNDAuNTI5MDA1LDEzNS41NzM1NTVMMzM4LjU5ODU4NiwxMzIuMDM3NjM4TDMzNy40MjgxNzQsMTI3LjgzMDQ0M0wzNDAuNTUxODA2LDEyOS4yMzE1NDFMMzQzLjUzODYzNSwxMjYuMzU5MDk2TDM0Mi4yOTk4MjMsMTI0LjYxMDY1MUwzNDAuNjgxMDA3LDEyNC4zNDEzNkwzMzcuNzE2OTc3LDEyMi4xNjc1MTJMMzM0LjUzMjU0NSwxMjAuODc1NjkzTDMzMS4zMzI5MTMsMTE2LjY0ODk4NEwzMjkuNTMxNjk1LDExNS4yMzYxNzhaTTI0My41ODI0MzYsMzkyLjAwMTY5NUwyNDMuNTgyNDM2LDM5Mi4wMDE2OTVMMjQzLjU4MjQzNiwzOTIuMDAxNjk1Wk0yNDMuMzM5MjMzLDM5MC42NTUyMzdMMjQzLjMzOTIzMywzOTAuNjU1MjM3TDI0My4zMzkyMzMsMzkwLjY1NTIzN1pNMjQyLjQxMjAyNCwzOTIuMDE3MzA2TDI0Mi40MTIwMjQsMzkyLjAxNzMwNkwyNDIuNDEyMDI0LDM5Mi4wMTczMDZaTTMyMi43MjIwMjcsMTA4LjgwODMwMkwzMjIuNzIyMDI3LDEwOC44MDgzMDJMMzIyLjcyMjAyNywxMDguODA4MzAyWk0yMzIuODY2MzI5LDM5Mi44NzU5MThMMjM0LjkwMzE0OSwzOTIuMzEzOTE4TDIzNS43NDY3NTcsMzkxLjAzMzgwNkwyMzcuMjc0MzczLDM5MS4wOTYyNTFMMjM3LjU1NTU3NiwzODkuNzIyNDczTDIzOS4zNDkxOTMsMzg4LjQ4MTM4OUwyMzkuNDU1NTk1LDM4Ni44MzQ0MTdMMjQyLjYwOTYyNiwzODUuMTEzMjkyTDI0Ni4xNTg4NjIsMzg2LjQwOTAxNEwyNDUuNDA2NDU0LDM4NC43MjY5MTdMMjQ2LjM1NjQ2NCwzODIuNjg1NzY0TDI0OS4zNDMyOTMsMzgxLjA1ODMwNUwyNTIuNjE4OTI2LDM4MS4xMDEyMzZMMjU1LjIxMDU1MiwzODIuOTI3NzM2TDI1My42OTA1MzcsMzg1LjY5ODcwOUwyNDkuMzY2MDk0LDM4Ny4wNDkwN0wyNDcuMDE3NjcsMzg3LjE3Nzg2MUwyNDIuNjAyMDI2LDM5MC43ODAxMjZMMjM4LjQ1OTk4NSwzOTEuMzkyODYyWk0yMzAuNTI1NTA1LDM5My41NTEwOThMMjMwLjUyNTUwNSwzOTMuNTUxMDk4TDIzMC41MjU1MDUsMzkzLjU1MTA5OFpNMjI1LjI1ODY1MywzODYuNjQ3MDg0TDIyNS4yNTg2NTMsMzg2LjY0NzA4NEwyMjUuMjU4NjUzLDM4Ni42NDcwODRaTTI1MC40MzAxMDQsMzA3LjQ2MzYxNkwyNTQuMTk5NzQyLDMwOS4xMDI3ODNMMjUyLjQxMzcyNCwzMTAuMDkwMTg2Wk0yMjUuMjk2NjUzLDM4NC44NjM1MTRMMjI1LjI5NjY1MywzODQuODYzNTE0TDIyNS4yOTY2NTMsMzg0Ljg2MzUxNFpNMjIwLjg3MzQwOSwzODguODMyNjM5TDIyMS4zNjc0MTQsMzg4LjM3NjAxNEwyMjUuMzcyNjU0LDM4OS4wMzE2ODFMMjI0LjE1NjY0MiwzOTEuMjY0MDdMMjIyLjkwMjYyOSwzODkuNTg5Nzc4TDIyMS4yMzgyMTIsMzkwLjAxMTI3OFpNMjE5Ljg3MDE5OSwzODYuODczNDQ1TDIxOS44NzAxOTksMzg2Ljg3MzQ0NUwyMTkuODcwMTk5LDM4Ni44NzM0NDVaTTIxNy43ODc3NzgsMzkwLjM4OTg0OEwyMTguNDE4NTg0LDM4OS4xMjUzNDhMMjE5Ljg3Nzc5OSwzOTAuMDAzNDczWk0yNDYuNzA2MDY3LDI5My4wMDc3MjZMMjQ4LjUzNzY4NSwyOTIuMjMxMDczTDI1MC42MjAxMDYsMjkyLjc1MDE0M0wyNDguNTM3Njg1LDI5NC4xMzE3MjZaTTIwNy43NDA0NzcsMzkwLjkzMjMzNEwyMDguNTkxNjg2LDM4OS40NDkyNzhMMjExLjE2MDUxMiwzODguNzQ2Nzc4TDIxMi4zMzA5MjMsMzg5Ljc2OTMwNkwyMTEuMTkwOTEyLDM5MS4xMzUyNzlaTTIwMy4yNDEyMzIsMzg5LjM2MzQxN0wyMDMuMjQxMjMyLDM4OS4zNjM0MTdMMjAzLjI0MTIzMiwzODkuMzYzNDE3Wk0yMDAuNzk0MDA4LDM5MC40MzY2ODFMMjAwLjc5NDAwOCwzOTAuNDM2NjgxTDIwMC43OTQwMDgsMzkwLjQzNjY4MVpNMjc5LjA0NDM5LDE0OS43MDk0MThMMjgxLjQ3NjQxNSwxNDYuMjQ3NjU0TDI4Mi4zODg0MjQsMTQzLjYwNTQ3M0wyODIuNjkyNDI3LDE0NS45NjY2NTRMMjg0Ljc3NDg0OCwxNDguMjIyNDZMMjg4LjgzMzI4OCwxNTEuMDI4NTU3TDI5MS45OTQ5MiwxNDkuNzk5MTgyTDI5NS42Mjc3NTYsMTUwLjUwOTQ4OEwyOTYuOTY1MzcsMTUzLjQwNTM0OUwyOTYuNjY4OTY3LDE1NS44NjAxOTdMMzAwLjAxMywxNTguMjIxMzc3TDMwMS4xMjI2MTEsMTYwLjIzOTExNEwzMDYuODgzNDY5LDE2Mi43NzIwMTdMMzA4LjUwMjI4NSwxNjMuOTg5Njg0TDMwNy43NTc0NzgsMTY1LjQ4NDQ0OEwzMDUuNjY3NDU3LDE2Ni44ODk0NDhMMzAyLjQ3NTQyNSwxNjUuMTk1NjQyTDMwMC43MTk4MDcsMTY1LjI1MDI4MUwyOTcuODc3Mzc5LDE2Ny4yNzU4MjNMMjk2LjYwODE2NiwxNjkuMDg2NzEyTDI5NS43NTY5NTgsMTY1LjQzMzcxMkwyOTMuNTM3NzM1LDE2Mi4wODkwMzFMMjkxLjk2NDUyLDE2MS40OTE5MDZMMjkyLjAyNTMyLDE1OS4yNTE3MTFMMjkwLjQ5NzcwNSwxNTYuNzU3ODM2TDI4Ny45OTcyOCwxNTQuNjExMzA4TDI4NS43NDc2NTcsMTUzLjY3MDczOEwyODEuNjEzMjE2LDE1NS4wMjUwMDJMMjc5LjE4MTE5MiwxNTIuNzUzNTg1Wk0xODEuNDUxODE1LDM4OC41NzExNTNMMTgyLjc3NDIyOCwzODcuMjA5MDg0TDE4NS40MTkwNTQsMzg3LjEyNzEyNUwxODYuMzYxNDY0LDM4OC45NzMxMzlMMTgyLjU2MTQyNiwzODkuNTc0MTY3Wk0xNzUuMzY0MTU0LDM5MS4xMzUyNzlMMTc1LjM2NDE1NCwzOTEuMTM1Mjc5TDE3NS4zNjQxNTQsMzkxLjEzNTI3OVpNMjQyLjc4NDQyOCwyMDkuODk4MDY0TDI0NS4yMjQwNTIsMjA4LjI5MDExOUwyNDQuNzMwMDQ3LDIxMC42Mzk1OTJMMjQ3LjQ4MTI3NSwyMTQuNjEyNjJMMjQ5LjExNTI5MSwyMTUuMTYyOTEyTDI1MC4yODU3MDMsMjE3LjM2NDA3OUwyNDYuMjM0ODYyLDIxNS43Nzk1NTFMMjQzLjk3MDA0LDIxMC45OTA4NDJaTTI0My40ODM2MzUsMjA2LjIzNzI1OEwyNDMuNDgzNjM1LDIwNi4yMzcyNThMMjQzLjQ4MzYzNSwyMDYuMjM3MjU4Wk0xNjEuMjUwODEzLDM4NC4yMTE3NUwxNjMuMTU4NDMyLDM4NS40MzMzMkwxNjcuMTMzMjcxLDM4Ni4wMTQ4MzRMMTcwLjI2NDUwMywzODguNzA3NzUxTDE3MS41MzM3MTUsMzg4Ljc1NDU4NEwxNzUuNzQ0MTU3LDM5MC42Nzg2NTRMMTcyLjc4MDEyOCwzOTAuNDMyNzc5TDE2OC4yNjU2ODMsMzg5LjA1MTE5NUwxNjUuNjk2ODU3LDM4Ny41NDA4MkwxNjIuMjQ2NDIyLDM4Ni40OTg3NzhaTTE1NC4zMjcxNDMsMzg0LjMwOTMxOUwxNTQuMzI3MTQzLDM4NC4zMDkzMTlMMTU0LjMyNzE0MywzODQuMzA5MzE5Wk0xNTMuNTU5NTM2LDM4MC4xODAxOEwxNTMuNTU5NTM2LDM4MC4xODAxOEwxNTMuNTU5NTM2LDM4MC4xODAxOFpNMTQ3LjYwODY3NiwzNzYuMjg1MjA3TDE0Ny42MDg2NzYsMzc2LjI4NTIwN0wxNDcuNjA4Njc2LDM3Ni4yODUyMDdaTTE0My4xNjI2MzIsMzc5LjQyNjk0NEwxNDkuODIwMjk4LDM3OS45NTM4MTlMMTUxLjI2NDMxMywzODEuMzU0OTE2TDE1Ni43ODE5NjgsMzgxLjQ5MTUxNEwxNTkuOTgxNiwzODAuMTM3MjVMMTU3LjQ1ODM3NSwzNzguNDc0NjY2TDE2MS45MTIwMTksMzc3LjQ3NTU1NUwxNjMuNzY2NDM4LDM3OS41NzUyNUwxNjEuOTE5NjE5LDM4Mi4xOTAxMTFMMTU5LjkwNTU5OSwzODEuNjM1OTE2TDE2MC44OTM2MDksMzg0LjA4Njg2MUwxNTguNzQyNzg3LDM4NC4xMjE5ODZMMTU3LjQ4ODc3NSwzODIuOTIzODMzTDE1My44Nzg3MzksMzgzLjUxMzE1M0wxNTEuMDk3MTExLDM4My4xMjI4NzVMMTQ5LjU2MTg5NiwzODEuNjIwMzA1TDE0NC43MzU4NDcsMzgwLjUxOTcyMlpNMTQwLjY5MjYwNywzNzkuNDk3MTk0TDE0MC42OTI2MDcsMzc5LjQ5NzE5NEwxNDAuNjkyNjA3LDM3OS40OTcxOTRaTTE0Mi4wNTMwMjEsMzc1LjEyNjA4MkwxNDIuMDUzMDIxLDM3NS4xMjYwODJMMTQyLjA1MzAyMSwzNzUuMTI2MDgyWk0xMzcuMTczNzcyLDM3OC42NDI0ODZMMTM3LjE3Mzc3MiwzNzguNjQyNDg2TDEzNy4xNzM3NzIsMzc4LjY0MjQ4NlpNMTM1LjM0OTc1MywzNzguMDYwOTcyTDEzNS4zNDk3NTMsMzc4LjA2MDk3MkwxMzUuMzQ5NzUzLDM3OC4wNjA5NzJaTTEzNC42MTI1NDYsMzc2LjczMDEyNEwxMzQuNjEyNTQ2LDM3Ni43MzAxMjRMMTM0LjYxMjU0NiwzNzYuNzMwMTI0Wk0xMzMuNjI0NTM2LDM3Ni44NzQ1MjdMMTMzLjYyNDUzNiwzNzYuODc0NTI3TDEzMy42MjQ1MzYsMzc2Ljg3NDUyN1pNMTMyLjg5NDkyOSwzNzcuMjQxMzg4TDEzMi44OTQ5MjksMzc3LjI0MTM4OEwxMzIuODk0OTI5LDM3Ny4yNDEzODhaTTEzMi4xMzQ5MjEsMzc2Ljg1ODkxNkwxMzIuMTM0OTIxLDM3Ni44NTg5MTZMMTMyLjEzNDkyMSwzNzYuODU4OTE2Wk0xMzEuNjcxMzE3LDM3Ny44NDYzMTlMMTMzLjU2MzczNiwzNzguMDc2NTgzTDEzMy4zMjA1MzMsMzc5LjU5ODY2NlpNMTMyLjA2NjUyMSwzNzYuMjY5NTk2TDEzMi4wNjY1MjEsMzc2LjI2OTU5NkwxMzIuMDY2NTIxLDM3Ni4yNjk1OTZaTTEzMS41NjQ5MTYsMzc2LjI1MDA4MkwxMzEuNTY0OTE2LDM3Ni4yNTAwODJMMTMxLjU2NDkxNiwzNzYuMjUwMDgyWk0xMzEuOTc1MzIsMzczLjY3MDM0NkwxMzMuMzIwNTMzLDM3Mi44NzAyNzdMMTM0LjgxNzc0OCwzNzQuNzMxOTAyTDEzMy42MTY5MzYsMzc2LjUzNDk4NUwxMzEuNzMyMTE3LDM3NS4xMDI2NjZaTTEyOS41NTg0OTYsMzc4LjM4NDkwMkwxMzEuMDU1NzExLDM3OS4wNjc4ODhMMTMwLjAyOTcsMzgwLjA4MjYxMVpNMTE3LjY2NDM3NywzNzguMDQ5MjYzTDEyMy4wNjA0MzEsMzc0LjE3NzcwN0wxMjMuNzIxNjM3LDM3Mi40MDk3NDlMMTI2LjgwNzI2OCwzNzMuMDk2NjM4TDEyNS45NzEyNiwzNzQuODYwNjkzTDEyNC40MjA4NDQsMzc1LjUwMDc0OUwxMjUuODE5MjU4LDM3Ni43NzY5NThMMTI5LjIzOTI5MiwzNzcuNDU2MDQxTDEyNy41ODI0NzYsMzc5Ljg0ODQ0NEwxMjUuNjE0MDU2LDM3OC43MDEwMjdMMTIzLjEwNjAzMSwzNzkuMzA5ODYxTDEyMS42Njk2MTcsMzc4LjU5NTY1MkwxMTkuOTEzOTk5LDM3OS41NjM1NDFMMTIwLjY4MTYwNywzNzcuMTQzODE5TDExNy45NzU5OCwzNzkuMTQyMDQxWk0xMTMuOTkzNTQsMzY5LjUwNjA4MkwxMTMuOTkzNTQsMzY5LjUwNjA4MkwxMTMuOTkzNTQsMzY5LjUwNjA4MlpNMTA4Ljk3NzQ5LDM3Mi4xMDUzMzJMMTExLjY0NTExNiwzNzIuOTAxNDk5TDExNi41Njk5NjYsMzcyLjg2MjQ3MUwxMTcuNzkzNTc4LDM3MC41Njc2MzdMMTE5LjIwNzE5MiwzNzEuMjQ2NzIxTDExNi4zMzQzNjMsMzc1LjUzNTg3NEwxMTQuMzQzMTQzLDM3NS4zMDU2MUwxMTMuNzEyMzM3LDM3My42NTQ3MzVaTTEwMy43NzkwMzgsMzY1LjM3MzA0TDEwNS40OTY2NTUsMzY1LjE1NDQ4NEwxMDcuNzM4Njc3LDM2Ni4zMTc1MTJMMTA4LjEwMzQ4MSwzNjguNjMxODU5TDExMC43NDA3MDcsMzcwLjE4MTI2MkwxMDguMjc4MjgzLDM2OS43MjA3MzVMMTA1LjA1NTg1MSwzNzEuOTIxOTAxTDEwMy42NTc0MzcsMzY5LjU1NjgxOEwxMDUuNjYzODU3LDM3MC4yNzQ5MjlaTTk4LjgwMDk4OCwzNzIuOTgzNDU3TDk4LjgwMDk4OCwzNzIuOTgzNDU3TDk4LjgwMDk4OCwzNzIuOTgzNDU3Wk05NS4wNTQxNTEsMzY4LjExMjc5TDk1LjA1NDE1MSwzNjguMTEyNzlMOTUuMDU0MTUxLDM2OC4xMTI3OVpNOTIuNTAwNTI1LDM2Ny41MzkwODFMOTIuNTAwNTI1LDM2Ny41MzkwODFMOTIuNTAwNTI1LDM2Ny41MzkwODFaTTk0LjQ2ODk0NSwzNjMuMjA2OTk4TDk1Ljk0MzM1OSwzNjIuNjg0MDI1TDk1LjcxNTM1NywzNjQuNTcyOTdaTTg4Ljc0NjA4NywzNzAuNTE2OTAxTDg4Ljc0NjA4NywzNzAuNTE2OTAxTDg4Ljc0NjA4NywzNzAuNTE2OTAxWk04OC4xNDU2ODEsMzcwLjk5Njk0M0w4OC4xNDU2ODEsMzcwLjk5Njk0M0w4OC4xNDU2ODEsMzcwLjk5Njk0M1pNOTAuMDIyOSwzNjYuMDUyMTIzTDkwLjAyMjksMzY2LjA1MjEyM0w5MC4wMjI5LDM2Ni4wNTIxMjNaTTg1LjY2ODA1NywzNzEuOTE0MDk2TDg1LjY2ODA1NywzNzEuOTE0MDk2TDg1LjY2ODA1NywzNzEuOTE0MDk2Wk01MDIuMzExODIzLDI3Ni4yOTIxMjdMNTAyLjMxMTgyMywyNzYuMjkyMTI3TDUwMi4zMTE4MjMsMjc2LjI5MjEyN1pNNTAyLjI1ODYyMywyNzAuNjY0MzIxTDUwMi4yNTg2MjMsMjcwLjY2NDMyMUw1MDIuMjU4NjIzLDI3MC42NjQzMjFaTTUwMS4xMjYyMTEsMjQuMDA4NzM3TDUwMS4xMjYyMTEsMjQuMDA4NzM3TDUwMS4xMjYyMTEsMjQuMDA4NzM3Wk01MDIuMTgyNjIyLDI3NS45MTc0Nkw1MDIuMTgyNjIyLDI3NS45MTc0Nkw1MDIuMTgyNjIyLDI3NS45MTc0NlpNNTAwLjgxNDYwOCwyNzYuMDU0MDU3TDUwMC44MTQ2MDgsMjc2LjA1NDA1N0w1MDAuODE0NjA4LDI3Ni4wNTQwNTdaTTQ5NS44MzY1NTgsMjQyLjU0NDgwNEw0OTUuODM2NTU4LDI0Mi41NDQ4MDRMNDk1LjgzNjU1OCwyNDIuNTQ0ODA0Wk00OTMuODQ1MzM4LDI4My4wNzUxNTVMNDkzLjg0NTMzOCwyODMuMDc1MTU1TDQ5My44NDUzMzgsMjgzLjA3NTE1NVpNNDkwLjc3NDkwOCwyODEuODg4NzExTDQ5MC43NzQ5MDgsMjgxLjg4ODcxMUw0OTAuNzc0OTA4LDI4MS44ODg3MTFaTTQ4OS44ODU2OTksMjg0LjI0MjA4Nkw0OTEuNTEyMTE1LDI4Mi4yMTY1NDRMNDkwLjUxNjUwNSwyODQuOTQ4NDg5Wk00ODguMjU5MjgzLDI4NC41Mzg2OTdMNDg4LjI1OTI4MywyODQuNTM4Njk3TDQ4OC4yNTkyODMsMjg0LjUzODY5N1pNNDgyLjQwNzIyNCwyODYuMDg4MUw0ODIuNDA3MjI0LDI4Ni4wODgxTDQ4Mi40MDcyMjQsMjg2LjA4ODFaTTQ4MS43MjMyMTcsMjc4Ljk2OTQzM0w0ODEuNzIzMjE3LDI3OC45Njk0MzNMNDgxLjcyMzIxNywyNzguOTY5NDMzWk00ODEuMjU5NjEzLDI3OS4zODMxMjdMNDgxLjI1OTYxMywyNzkuMzgzMTI3TDQ4MS4yNTk2MTMsMjc5LjM4MzEyN1pNNDgwLjkwMjQwOSwyODguMDI3NzgxTDQ4MC45MDI0MDksMjg4LjAyNzc4MUw0ODAuOTAyNDA5LDI4OC4wMjc3ODFaTTQ4MS4wNzcyMTEsMjc5LjcyNjU3Mkw0ODEuMDc3MjExLDI3OS43MjY1NzJMNDgxLjA3NzIxMSwyNzkuNzI2NTcyWk00ODUuODA0NDU4LDI1LjYxMjc3OUw0ODUuODA0NDU4LDI1LjYxMjc3OUw0ODUuODA0NDU4LDI1LjYxMjc3OVpNNDc4LjU0NjM4NSwyODguNjk1MTU2TDQ3OC41NDYzODUsMjg4LjY5NTE1Nkw0NzguNTQ2Mzg1LDI4OC42OTUxNTZaTTQ4NS42MDY4NTYsMjUuMDg5ODA3TDQ4NS42MDY4NTYsMjUuMDg5ODA3TDQ4NS42MDY4NTYsMjUuMDg5ODA3Wk00NzYuNzE0NzY3LDI4Ny43MTk0NjFMNDc2LjcxNDc2NywyODcuNzE5NDYxTDQ3Ni43MTQ3NjcsMjg3LjcxOTQ2MVpNNDc2Ljc4MzE2OCwyODIuNzQzNDE5TDQ3Ni43ODMxNjgsMjgyLjc0MzQxOUw0NzYuNzgzMTY4LDI4Mi43NDM0MTlaTTQ3NS45MDE1NTksMzA5Ljc4NTc2OUw0NzUuOTAxNTU5LDMwOS43ODU3NjlMNDc1LjkwMTU1OSwzMDkuNzg1NzY5Wk00ODQuMjM4ODQyLDIzLjYxMDY1NEw0ODQuMjM4ODQyLDIzLjYxMDY1NEw0ODQuMjM4ODQyLDIzLjYxMDY1NFpNNDgzLjcxNDQzNywyMy40ODU3NjVMNDgzLjcxNDQzNywyMy40ODU3NjVMNDgzLjcxNDQzNywyMy40ODU3NjVaTTQ3NC44Njc5NDksMjkzLjIxODQ3Nkw0NzQuODY3OTQ5LDI5My4yMTg0NzZMNDc0Ljg2Nzk0OSwyOTMuMjE4NDc2Wk00NzQuNTI1OTQ1LDI5My44MzkwMThMNDc0LjUyNTk0NSwyOTMuODM5MDE4TDQ3NC41MjU5NDUsMjkzLjgzOTAxOFpNNDc0LjIyOTU0MiwyOTMuMDE1NTMxTDQ3NC4yMjk1NDIsMjkzLjAxNTUzMUw0NzQuMjI5NTQyLDI5My4wMTU1MzFaTTQ3NS4yMDk5NTIsMjYwLjIzNjA5N0w0NzYuMDgzOTYxLDI1OS42NDI4NzVMNDc3LjE2MzE3MiwyNTYuMzU2NzM2TDQ3OC4xNzM5ODIsMjU3LjEyNTU4M1pNNDczLjI1NjczMywyOTEuOTAzMjRMNDczLjI1NjczMywyOTEuOTAzMjRMNDczLjI1NjczMywyOTEuOTAzMjRaTTQ3Mi40NDM1MjQsMjkzLjYwODc1NEw0NzIuNDQzNTI0LDI5My42MDg3NTRMNDcyLjQ0MzUyNCwyOTMuNjA4NzU0Wk00NzAuNDc1MTA1LDMxOS44MDAyOThMNDcwLjQ3NTEwNSwzMTkuODAwMjk4TDQ3MC40NzUxMDUsMzE5LjgwMDI5OFpNNDcwLjA0OTUsMzI4Ljc4NDQ5NEw0NzAuMDQ5NSwzMjguNzg0NDk0TDQ3MC4wNDk1LDMyOC43ODQ0OTRaTTQ4MC45Nzg0MSwyMi45OTAxMTJMNDgwLjk3ODQxLDIyLjk5MDExMkw0ODAuOTc4NDEsMjIuOTkwMTEyWk00NzAuODcwMzA5LDI5My4wNzAxN0w0NzAuODcwMzA5LDI5My4wNzAxN0w0NzAuODcwMzA5LDI5My4wNzAxN1pNNDY5Ljg5NzQ5OSwzMTkuMTYwMjQzTDQ2OS44OTc0OTksMzE5LjE2MDI0M0w0NjkuODk3NDk5LDMxOS4xNjAyNDNaTTQ3MC4xNzExMDIsMzAyLjQ2ODA2TDQ3MC4xNzExMDIsMzAyLjQ2ODA2TDQ3MC4xNzExMDIsMzAyLjQ2ODA2Wk00NjguNTIxODg1LDMxNC41MzkzNTNMNDY4LjUyMTg4NSwzMTQuNTM5MzUzTDQ2OC41MjE4ODUsMzE0LjUzOTM1M1pNNDY4LjIzMzA4MiwyOTkuMjUyMTcxTDQ2OC4yMzMwODIsMjk5LjI1MjE3MUw0NjguMjMzMDgyLDI5OS4yNTIxNzFaTTQ2OC43MDQyODcsMjY0LjEzMTA3TDQ2OC43MDQyODcsMjY0LjEzMTA3TDQ2OC43MDQyODcsMjY0LjEzMTA3Wk00NjcuNzg0Njc4LDI2Mi43MjYwN0w0NjcuNzg0Njc4LDI2Mi43MjYwN0w0NjcuNzg0Njc4LDI2Mi43MjYwN1pNNDc3LjQzNjc3NCwxNi4wMzkyNjRMNDc3LjQzNjc3NCwxNi4wMzkyNjRMNDc3LjQzNjc3NCwxNi4wMzkyNjRaTTQ2My44NzgyMzksMzE0Ljg3NDk5Mkw0NjUuNjE4NjU2LDMxNC4yNzc4NjdMNDY0LjgzNTg0OCwzMTUuNzQ5MjE1Wk00NjQuMzQxODQzLDI3MS4zNTEyMUw0NjQuMzQxODQzLDI3MS4zNTEyMUw0NjQuMzQxODQzLDI3MS4zNTEyMVpNNDU4LjYzNDE4NiwyOTAuNDU1MzA5TDQ1OC42MzQxODYsMjkwLjQ1NTMwOUw0NTguNjM0MTg2LDI5MC40NTUzMDlaTTQ1Ny4xNjczNzIsMzEyLjE1NDc1Nkw0NjAuMzIxNDAzLDMwOC43MjQyMTRMNDYyLjM3MzQyNCwzMDguNzE2NDA4TDQ2MS45OTM0MiwzMDYuNzU3MjE0TDQ2My41MzYyMzUsMzA3LjU2NTA4OUw0NjMuODcwNjM5LDMwNS45Mzc2M0w0NjUuMzM3NDUzLDMwNi42MzYyMjdMNDY0LjAzMDI0LDMwNC41MzI2M0w0NjYuODExODY4LDMwMi45NDQxOTlMNDY2LjgwNDI2OCwzMDAuOTA2OTQ5TDQ2OC4wMzU0OCwyOTkuNzcxMjQxTDQ3MS4xMjg3MTEsMjk5LjY4NTM3OUw0NjkuOTA1MDk5LDMwMi43NDkwNkw0NjguMzMxODgzLDMwNC41NzU1NjFMNDY5Ljk1ODMsMzA2LjI4MTA3NUw0NzEuMzQxNTEzLDMwNC40MjMzNTJMNDczLjcwNTEzNywzMDcuMTgyNjE2TDQ3NC44OTgzNDksMzA2LjE3MTc5N0w0NzUuMTAzNTUxLDMwOC4zNjEyNTVMNDczLjU3NTkzNiwzMTAuNzM0MTQ1TDQ3MC44Nzc5MDksMzA4LjYyNjY0NEw0NzEuMzY0MzE0LDMxMS4xMDg4MTFMNDY3LjU4NzA3NiwzMTEuNjE2MTcyTDQ2My41MzYyMzUsMzE0LjU4MjI4NFpNNDU4Ljg2OTc4OSwyNzUuODgyMzM1TDQ1OC44Njk3ODksMjc1Ljg4MjMzNUw0NTguODY5Nzg5LDI3NS44ODIzMzVaTTQ1NS4yNTk3NTMsMzE1LjAzMTEwM0w0NTUuMjU5NzUzLDMxNS4wMzExMDNMNDU1LjI1OTc1MywzMTUuMDMxMTAzWk00NTUuOTIwOTU5LDI5OS42OTcwODhMNDU1LjkyMDk1OSwyOTkuNjk3MDg4TDQ1NS45MjA5NTksMjk5LjY5NzA4OFpNNDU2Ljk1NDU3LDI4MS44MDY3NTJMNDU4Ljg0Njk4OCwyODEuMDIyMjk0TDQ1OS42OTgxOTcsMjgyLjM4NDM2NEw0NTcuNjMwOTc2LDI4My4xMTgwODZaTTQ1My4yMjI5MzIsMzM4LjY2NjMyOEw0NTMuMjIyOTMyLDMzOC42NjYzMjhMNDUzLjIyMjkzMiwzMzguNjY2MzI4Wk00NDkuOTYyNSwzNDIuMDIyNzE4TDQ0OS45NjI1LDM0Mi4wMjI3MThMNDQ5Ljk2MjUsMzQyLjAyMjcxOFpNNDQ5LjM3NzI5NCwzNDIuNDE2ODk4TDQ0OS4zNzcyOTQsMzQyLjQxNjg5OEw0NDkuMzc3Mjk0LDM0Mi40MTY4OThaTTQ0OC44MTQ4ODgsMzQyLjQwMTI4N0w0NDguODE0ODg4LDM0Mi40MDEyODdMNDQ4LjgxNDg4OCwzNDIuNDAxMjg3Wk00NTAuOTY1NzEsMzA0LjE2NTc2OUw0NTAuOTY1NzEsMzA0LjE2NTc2OUw0NTAuOTY1NzEsMzA0LjE2NTc2OVpNNDUwLjQ3OTMwNSwzMDIuNzQ5MDZMNDUwLjQ3OTMwNSwzMDIuNzQ5MDZMNDUwLjQ3OTMwNSwzMDIuNzQ5MDZaTTQ0OC4wNjI0ODEsMzM2LjI5NzM0Mkw0NDguMDYyNDgxLDMzNi4yOTczNDJMNDQ4LjA2MjQ4MSwzMzYuMjk3MzQyWk00NTEuMTcwOTEyLDI4MS44MTQ1NThMNDUxLjE3MDkxMiwyODEuODE0NTU4TDQ1MS4xNzA5MTIsMjgxLjgxNDU1OFpNNDQ2LjA4NjQ2MSwzNDMuMjEzMDY1TDQ0Ni4wODY0NjEsMzQzLjIxMzA2NUw0NDYuMDg2NDYxLDM0My4yMTMwNjVaTTQ0OS4zODQ4OTQsMjg5LjAyNjg5Mkw0NDkuMzg0ODk0LDI4OS4wMjY4OTJMNDQ5LjM4NDg5NCwyODkuMDI2ODkyWk00NDMuMjI4ODMyLDM0Ni4yNjUwMzdMNDQ1LjE1OTI1MiwzNDQuNjc2NjA3TDQ0Ni43NTUyNjgsMzQ0LjcyMzQ0TDQ0Ny41OTg4NzYsMzQ2LjMxNTc3NEw0NDkuNTQ0NDk1LDM0Ni4yMTQzMDFMNDQ4LjQzNDg4NCwzNDcuNDY3MDkzTDQ0NC44NjI4NDksMzQ3LjUwMjIxOFpNNDQ0LjczMzY0NywzMTAuOTY0NDA4TDQ0NC43MzM2NDcsMzEwLjk2NDQwOEw0NDQuNzMzNjQ3LDMxMC45NjQ0MDhaTTQ0NC42MzQ4NDYsMzExLjQ1MjI1Nkw0NDQuNjM0ODQ2LDMxMS40NTIyNTZMNDQ0LjYzNDg0NiwzMTEuNDUyMjU2Wk00NDMuNzgzNjM4LDMxMS4yMzM3TDQ0My43ODM2MzgsMzExLjIzMzdMNDQzLjc4MzYzOCwzMTEuMjMzN1pNNDM3LjUyODc3NSwzNDguNDAzNzZMNDM5LjA0ODc5LDM0Ni4zMzEzODVMNDQxLjkyMTYxOSwzNDQuODA5MzAxTDQ0Mi44NzkyMjksMzQ1Ljk3MjMyOVpNNDM5LjEwMTk5MSwzMjcuNDE0NjE5TDQ0MS40MzUyMTQsMzIzLjg4NjUwN0w0NDYuNjI2MDY2LDMyMC42NzA2MThMNDQ5LjcxMTY5NywzMjEuMjAxMzk2TDQ0OS41MTQwOTUsMzIzLjYxMzMxM0w0NTAuODc0NTA5LDMyNC4zODk5NjZMNDUxLjc4NjUxOCwzMjIuNzg1OTI0TDQ1MS4xNDgxMTEsMzIxLjI3MTY0Nkw0NTMuNTE5MzM1LDMyMC45NzUwMzVMNDUwLjUzMjUwNSwzMjAuMDY1Njg3TDQ1MC41NDc3MDUsMzE3LjU4NzQyM0w0NTEuOTM4NTE5LDMxNi4zODkyN0w0NTQuNDk5NzQ1LDMxNi4xNTEyMDFMNDU1LjQ1NzM1NSwzMTguNDkyODY4TDQ1Ni4xNTY1NjIsMzE3LjExOTA5TDQ1OC4zNDUzODMsMzE4LjE3Njc0M0w0NTguMDU2NTgxLDMxNy4wNjgzNTRMNDU1LjYwMTc1NiwzMTUuMTQ4MTg3TDQ1Ni4zNTQxNjQsMzE0LjIwNzYxN0w0NjAuODYxMDA5LDMxNy40MDM5OTNMNDU4LjQ3NDU4NSwzMTMuOTM4MzI1TDQ2Mi45OTY2MywzMTUuMDM1MDA2TDQ2NC42NjEwNDcsMzE2LjEzNTU5TDQ2My45MjM4MzksMzE3LjkxNTI1Nkw0NjkuMTM3NDkxLDMxNC43NTc5MDlMNDcwLjQ3NTEwNSwzMTYuMTA0MzY3TDQ2OC45MjQ2ODksMzE2LjMzNDYzMUw0NjkuMjA1ODkyLDMxOC4zNDQ1NjJMNDY4LjE5NTA4MiwzMjIuMjIwMDIxTDQ2OS42NzcwOTcsMzIxLjUyMTQyNEw0NzAuMzE1NTAzLDMyMi45MTA4MTNMNDcyLjI5MTUyMywzMjIuNzg1OTI0TDQ3MC40ODI3MDUsMzI1LjI2ODA5MUw0NjkuODM2Njk4LDMyNy40MjYzMjdMNDY3LjY0MDI3NiwzMjcuMDgyODgzTDQ2NC45NDk4NDksMzI1LjM0MjI0M0w0NjIuNjkyNjI3LDMyNS4zMTEwMjFMNDY2LjU0NTg2NSwzMjguMTg3MzY5TDQ2NS4yNDYyNTIsMzMwLjUxMzQyNUw0NjMuODAyMjM4LDMzMC43NjMyMDJMNDYyLjg1OTgyOSwzMjguOTM2NzAyTDQ2MC4yNDU0MDIsMzI5LjU4MDY2MUw0NjIuMTc1ODIyLDMzMC44NDkwNjNMNDYwLjQ4MTAwNSwzMzEuODQ4MTc1TDQ1OC44NTQ1ODksMzMxLjU2NzE3NUw0NTkuMjY0OTkzLDMzMy4wNDYzMjhMNDYyLjAwODYyLDMzMi40ODQzMjhMNDYyLjk2NjIzLDMzMy4zOTc1NzhMNDU4LjY1Njk4NywzMzQuODIyMDkyTDQ1OC4xODU3ODIsMzM2LjU1MTAyMkw0NTYuODQwNTY4LDMzNi4zODcxMDZMNDU2LjY4ODU2NywzMzIuMDk0MDVMNDU0LjMzMjU0MywzMzYuNDE0NDI1TDQ0OC40ODgwODUsMzQxLjk2ODA3OUw0NDYuMjk5MjYzLDM0MS43NzY4NDJMNDQ3LjUwNzY3NSwzMzkuNDg1OTEyTDQ1MC41MzI1MDUsMzM3LjIzNDAwOUw0NDguODgzMjg5LDMzNy4xMzY0MzlMNDUxLjIyNDExMiwzMzIuNTkzNjA1TDQ0NC40NjAwNDUsMzM5LjQ1MDc4N0w0NDQuMjkyODQzLDMzNy40NjAzN0w0NDEuOTM2ODE5LDMzNS44MzI5MTFMNDQyLjE1NzIyMiwzMzEuNDM4MzgzTDQ0MS41MTEyMTUsMzI5LjY5Nzc0NEw0MzkuNTgwNzk2LDMyOC43MjIwNDlaTTQ2MC44NjEwMDksOC44NTQyNUw0NjAuODYxMDA5LDguODU0MjVMNDYwLjg2MTAwOSw4Ljg1NDI1Wk00NTkuNTAwNTk1LDguMzE1NjY2TDQ1OS41MDA1OTUsOC4zMTU2NjZMNDU5LjUwMDU5NSw4LjMxNTY2NlpNNDU4LjIwMDk4Miw3LjUwNzc5MUw0NTguMjAwOTgyLDcuNTA3NzkxTDQ1OC4yMDA5ODIsNy41MDc3OTFaTTQyNC4wMjM0NCwzNjEuMjk0NjM2TDQyNi42NzU4NjcsMzU5Ljg1ODQxNEw0MjYuMDY3ODYxLDM2Mi44NDc5NDJaTTQ1Ni4xOTQ1NjIsNi44Mjg3MDhMNDU2LjE5NDU2Miw2LjgyODcwOEw0NTYuMTk0NTYyLDYuODI4NzA4Wk00MjYuMzU2NjY0LDMyMS43MDQ4NTRMNDI2LjM1NjY2NCwzMjEuNzA0ODU0TDQyNi4zNTY2NjQsMzIxLjcwNDg1NFpNNDIxLjY5MDIxNywzMjQuNTQ2MDc3TDQyMS42OTAyMTcsMzI0LjU0NjA3N0w0MjEuNjkwMjE3LDMyNC41NDYwNzdaTTQ1Mi45NjQ1MywzLjkwNTUyN0w0NTIuOTY0NTMsMy45MDU1MjdMNDUyLjk2NDUzLDMuOTA1NTI3Wk00MjEuMDU5NDExLDMyNC45MDkwMzVMNDIxLjA1OTQxMSwzMjQuOTA5MDM1TDQyMS4wNTk0MTEsMzI0LjkwOTAzNVpNNDIwLjY2NDIwNywzMjUuMTAwMjcxTDQyMC42NjQyMDcsMzI1LjEwMDI3MUw0MjAuNjY0MjA3LDMyNS4xMDAyNzFaTTQyMC4zMjIyMDMsMzI1LjM2OTU2M0w0MjAuMzIyMjAzLDMyNS4zNjk1NjNMNDIwLjMyMjIwMywzMjUuMzY5NTYzWk00MTkuOTA0MTk5LDMyNi4wNDQ3NDRMNDE5LjkwNDE5OSwzMjYuMDQ0NzQ0TDQxOS45MDQxOTksMzI2LjA0NDc0NFpNNDE5LjgwNTM5OCwzMjYuMTg5MTQ2TDQxOS44MDUzOTgsMzI2LjE4OTE0Nkw0MTkuODA1Mzk4LDMyNi4xODkxNDZaTTQ1Mi4xMTMzMjEsMy4zNzA4NDZMNDUyLjExMzMyMSwzLjM3MDg0Nkw0NTIuMTEzMzIxLDMuMzcwODQ2Wk00MTcuMjIxMzcyLDMzMy4yMjk3NThMNDE3LjIyMTM3MiwzMzMuMjI5NzU4TDQxNy4yMjEzNzIsMzMzLjIyOTc1OFpNNDE2Ljk3MDU3LDMzMi43NDU4MTRMNDE2Ljk3MDU3LDMzMi43NDU4MTRMNDE2Ljk3MDU3LDMzMi43NDU4MTRaTTQxNC4xMzU3NDEsMzMzLjUzNDE3NUw0MTQuMTM1NzQxLDMzMy41MzQxNzVMNDE0LjEzNTc0MSwzMzMuNTM0MTc1Wk00MTEuNTc0NTE2LDM1NS4xMjQzNDRMNDEyLjc4MjkyOCwzNTMuODQ0MjMzTDQxMi41MDkzMjUsMzU2LjE2MjQ4M1pNNDEzLjYxMTMzNiwzMzQuNzU5NjQ3TDQxMy42MTEzMzYsMzM0Ljc1OTY0N0w0MTMuNjExMzM2LDMzNC43NTk2NDdaTTQxMy40ODIxMzUsMzM0LjI3OTYwNkw0MTMuNDgyMTM1LDMzNC4yNzk2MDZMNDEzLjQ4MjEzNSwzMzQuMjc5NjA2Wk00MTMuMjkyMTMzLDMzNS4wNzk2NzVMNDEzLjI5MjEzMywzMzUuMDc5Njc1TDQxMy4yOTIxMzMsMzM1LjA3OTY3NVpNNDExLjE3OTMxMiwzNTIuMDcyMzcxTDQxMS4xNzkzMTIsMzUyLjA3MjM3MUw0MTEuMTc5MzEyLDM1Mi4wNzIzNzFaTTQwNS40MzM2NTQsMzQyLjg2OTYyTDQwNi4zMjI4NjMsMzQxLjk5MTQ5NUw0MDkuNDMxMjk0LDM0My4wODQyNzNaTTQwNS4zNTAwNTQsMzM1Ljg1MjQyNUw0MDUuMzUwMDU0LDMzNS44NTI0MjVMNDA1LjM1MDA1NCwzMzUuODUyNDI1Wk00MDQuNDUzMjQ1LDM0MC4yNzQyNzNMNDA0LjQ1MzI0NSwzNDAuMjc0MjczTDQwNC40NTMyNDUsMzQwLjI3NDI3M1pNNDAwLjA3NTYwMSwzNDMuMzYxMzdMNDAwLjA3NTYwMSwzNDMuMzYxMzdMNDAwLjA3NTYwMSwzNDMuMzYxMzdaTTM5Ny41OTAzNzYsMzQ2LjM1ODcwNEwzOTcuNTkwMzc2LDM0Ni4zNTg3MDRMMzk3LjU5MDM3NiwzNDYuMzU4NzA0Wk0zOTMuNzI5NTM3LDM1MC41Mzg1OEwzOTMuNzI5NTM3LDM1MC41Mzg1OEwzOTMuNzI5NTM3LDM1MC41Mzg1OFpNMzg5LjAwOTg5LDM0OS4yNzQwNzlMMzg5LjAwOTg5LDM0OS4yNzQwNzlMMzg5LjAwOTg5LDM0OS4yNzQwNzlaTTQzMy4wNTk5MzEsMTEuODA4NjUzTDQzMy4wNTk5MzEsMTEuODA4NjUzTDQzMy4wNTk5MzEsMTEuODA4NjUzWk0zODQuNDg3ODQ1LDM1NC40MTAxMzZMMzg0LjQ4Nzg0NSwzNTQuNDEwMTM2TDM4NC40ODc4NDUsMzU0LjQxMDEzNlpNMzg0LjA4NTA0MSwzNTQuMjAzMjg4TDM4NC4wODUwNDEsMzU0LjIwMzI4OEwzODQuMDg1MDQxLDM1NC4yMDMyODhaTTM4My4xNTc4MzIsMzU3LjQyMzA4TDM4My4xNTc4MzIsMzU3LjQyMzA4TDM4My4xNTc4MzIsMzU3LjQyMzA4Wk0zODMuMjMzODMyLDM1Ni40ODI1MTFMMzgzLjcyNzgzNywzNTUuMzU0NjA4TDM4NS4wMzUwNSwzNTYuNTA1OTI3Wk0zODAuOTUzODEsMzU1LjI5MjE2M0wzODAuOTUzODEsMzU1LjI5MjE2M0wzODAuOTUzODEsMzU1LjI5MjE2M1pNMzgwLjgxNzAwOCwzNTUuNzI5Mjc1TDM4MC44MTcwMDgsMzU1LjcyOTI3NUwzODAuODE3MDA4LDM1NS43MjkyNzVaTTM4MC40NTIyMDUsMzU0LjcwMjg0NEwzODAuNDUyMjA1LDM1NC43MDI4NDRMMzgwLjQ1MjIwNSwzNTQuNzAyODQ0Wk0zNzkuNTg1Nzk2LDM1NS41ODQ4NzJMMzc5LjU4NTc5NiwzNTUuNTg0ODcyTDM3OS41ODU3OTYsMzU1LjU4NDg3MlpNMzc1LjA0ODU1LDM3Mi45NzE3NDlMMzc1LjA0ODU1LDM3Mi45NzE3NDlMMzc1LjA0ODU1LDM3Mi45NzE3NDlaTTM3NC4zODczNDQsMzc2LjYyNDc0OUwzNzQuMzg3MzQ0LDM3Ni42MjQ3NDlMMzc0LjM4NzM0NCwzNzYuNjI0NzQ5Wk0zNzcuMDkyOTcxLDM1Ni4zNjU0MjdMMzc3LjA5Mjk3MSwzNTYuMzY1NDI3TDM3Ny4wOTI5NzEsMzU2LjM2NTQyN1pNMzc3LjE2ODk3MiwzNTUuNDYzODg2TDM3Ny4xNjg5NzIsMzU1LjQ2Mzg4NkwzNzcuMTY4OTcyLDM1NS40NjM4ODZaTTM3Ni40MDEzNjQsMzU3Ljk4MTE3OEwzNzYuNDAxMzY0LDM1Ny45ODExNzhMMzc2LjQwMTM2NCwzNTcuOTgxMTc4Wk0zNzMuODMyNTM4LDM3Mi42MDA5ODVMMzczLjgzMjUzOCwzNzIuNjAwOTg1TDM3My44MzI1MzgsMzcyLjYwMDk4NVpNMzcyLjk2NjEzLDM3My42NDMwMjdMMzcyLjk2NjEzLDM3My42NDMwMjdMMzcyLjk2NjEzLDM3My42NDMwMjdaTTM3Mi45NTg1MywzNzIuMjY5MjQ5TDM3Mi45NTg1MywzNzIuMjY5MjQ5TDM3Mi45NTg1MywzNzIuMjY5MjQ5Wk0zNzUuNTE5NzU1LDM1NC44Mzk0NDFMMzc1LjUxOTc1NSwzNTQuODM5NDQxTDM3NS41MTk3NTUsMzU0LjgzOTQ0MVpNMzcwLjYxNzcwNiwzNzguMDQ1MzZMMzcwLjYxNzcwNiwzNzguMDQ1MzZMMzcwLjYxNzcwNiwzNzguMDQ1MzZaTTM3MC45OTc3MSwzNzAuOTUwMTFMMzczLjE4NjUzMiwzNzAuOTY5NjI0TDM3MS44NzkzMTksMzcyLjg5MzY5M1pNMzcxLjA1ODUxMSwzNjkuNTYwNzIxTDM3MS4wNTg1MTEsMzY5LjU2MDcyMUwzNzEuMDU4NTExLDM2OS41NjA3MjFaTTM3Mi42NjIxMjcsMzU3LjA1NjIxOUwzNzIuNjYyMTI3LDM1Ny4wNTYyMTlMMzcyLjY2MjEyNywzNTcuMDU2MjE5Wk0zNjkuNTk5Mjk2LDM3MS40MTg0NDNMMzY5LjU5OTI5NiwzNzEuNDE4NDQzTDM2OS41OTkyOTYsMzcxLjQxODQ0M1pNMzY3Ljc0NDg3NywzNzcuNTU3NTEzTDM2Ny43NDQ4NzcsMzc3LjU1NzUxM0wzNjcuNzQ0ODc3LDM3Ny41NTc1MTNaTTM2OC41NzMyODYsMzcxLjc0MjM3NEwzNjguNTczMjg2LDM3MS43NDIzNzRMMzY4LjU3MzI4NiwzNzEuNzQyMzc0Wk0zNjguMDc5MjgxLDM3Mi4zNDM0MDFMMzY4LjA3OTI4MSwzNzIuMzQzNDAxTDM2OC4wNzkyODEsMzcyLjM0MzQwMVpNMzc5LjEyOTc5MSwyOTEuMDkxNDYyTDM3OS4xMjk3OTEsMjkxLjA5MTQ2MkwzNzkuMTI5NzkxLDI5MS4wOTE0NjJaTTM2NS4xMTUyNTEsMzc0LjAyMTU5NkwzNjUuMTE1MjUxLDM3NC4wMjE1OTZMMzY1LjExNTI1MSwzNzQuMDIxNTk2Wk0zNjcuMDAwMDcsMzYxLjU3OTUzOUwzNjcuMDAwMDcsMzYxLjU3OTUzOUwzNjcuMDAwMDcsMzYxLjU3OTUzOVpNMzY1Ljc2ODg1OCwzNjUuMjY3NjY1TDM2NS43Njg4NTgsMzY1LjI2NzY2NUwzNjUuNzY4ODU4LDM2NS4yNjc2NjVaTTM2My4yODM2MzMsMzczLjExMjI0OUwzNjMuMjgzNjMzLDM3My4xMTIyNDlMMzYzLjI4MzYzMywzNzMuMTEyMjQ5Wk0zNzcuMTUzNzcyLDI4NS4yNzI0MTlMMzc3LjE1Mzc3MiwyODUuMjcyNDE5TDM3Ny4xNTM3NzIsMjg1LjI3MjQxOVpNMzYyLjMwMzIyMywzNzQuNjc3MjYzTDM2NS4wMzE2NSwzNzIuMTA5MjM1TDM2My45MjIwMzksMzcwLjMyNTY2NUwzNjYuMTc5MjYyLDM3MC42NjkxMUwzNjYuNDE0ODY0LDM2OC4zNzAzNzNMMzY3LjM1NzI3NCwzNjkuMzEwOTQzTDM2OC41MjAwODUsMzY2Ljc1NDYyM0wzNjguMDQ4ODgsMzcxLjE0OTE1MUwzNjQuNTgzMjQ2LDM3My4xMDQ0NDNMMzYyLjU5OTYyNiwzNzUuNjUyOTU3Wk0zNzUuNTk1NzU2LDI4OC42NDA1MTdMMzc1LjU5NTc1NiwyODguNjQwNTE3TDM3NS41OTU3NTYsMjg4LjY0MDUxN1pNMzYzLjEzOTIzMSwzNjQuMjAyMjA2TDM2My4xMzkyMzEsMzY0LjIwMjIwNkwzNjMuMTM5MjMxLDM2NC4yMDIyMDZaTTM2My4wNjMyMzEsMzYyLjY4NzkyOEwzNjUuODkwNDU5LDM2Mi42MzcxOTJMMzY1LjM4ODg1NCwzNjQuMTg2NTk1Wk0zNjIuNzQ0MDI3LDM1OS43OTk4NzJMMzYyLjc0NDAyNywzNTkuNzk5ODcyTDM2Mi43NDQwMjcsMzU5Ljc5OTg3MlpNMzc0LjExMzc0MSwyODguNTE5NTMxTDM3NC4xMTM3NDEsMjg4LjUxOTUzMUwzNzQuMTEzNzQxLDI4OC41MTk1MzFaTTM2MC4yMjA4MDIsMzY1LjU1MjU2N0wzNjAuMjIwODAyLDM2NS41NTI1NjdMMzYwLjIyMDgwMiwzNjUuNTUyNTY3Wk0zNjAuMzEyMDAzLDM2NC42NzQ0NDJMMzYyLjk5NDgzLDM2NC4yMTM5MTRMMzYyLjQ5MzIyNSwzNjYuODQwNDg0Wk0zNTkuMTQxNTkxLDM2My45NzE5NDJMMzU5LjE0MTU5MSwzNjMuOTcxOTQyTDM1OS4xNDE1OTEsMzYzLjk3MTk0MlpNMzU4LjgwNzE4OCwzNDguMDkxNTM4TDM1OC44MDcxODgsMzQ4LjA5MTUzOEwzNTguODA3MTg4LDM0OC4wOTE1MzhaTTM1NS44OTYzNTksMzYzLjkwNTU5NUwzNTYuOTc1NTcsMzYyLjcwNzQ0MkwzNTguODM3NTg4LDM2Mi42NDQ5OThMMzU4LjQxOTU4NCwzNjQuNzgzNzJMMzYwLjA3NjQwMSwzNjMuMDA0MDUzTDM1OS41NzQ3OTYsMzY0Ljg5Mjk5OEwzNjAuMzA0NDAzLDM2OC4wMDc0MTVMMzU4LjUzMzU4NSwzNjguMzg1OTg0TDM1Ni44MzExNjgsMzY3LjAwNDQwMUwzNTYuMDkzOTYxLDM2OC4zMTE4MzJaTTM1Ny4yNDkxNzIsMzUwLjc0NTQyN0wzNTguOTc0MzksMzQ5LjczNDYwN0wzNTguOTk3MTksMzUwLjkyODg1N1pNMzU2LjU0OTk2NSwzNDguMDY4MTIxTDM1Ni41NDk5NjUsMzQ4LjA2ODEyMUwzNTYuNTQ5OTY1LDM0OC4wNjgxMjFaTTM5Ni45NDQzNjksMTE1LjkyMzA2N0wzOTYuOTQ0MzY5LDExNS45MjMwNjdMMzk2Ljk0NDM2OSwxMTUuOTIzMDY3Wk0zOTYuNzQ2NzY3LDExNS44NTI4MTdMMzk2Ljc0Njc2NywxMTUuODUyODE3TDM5Ni43NDY3NjcsMTE1Ljg1MjgxN1pNMzY2LjExMDg2MSwyODkuNDMyNzgxTDM2Ni44MjUyNjgsMjg3LjAwMTM1TDM3MS43MzQ5MTcsMjg1LjEyMDIxMUwzNjguNDM2NDg0LDI5MC4xMDc5NjJMMzY2LjAyNzI2LDI5MC40NjMxMTVaTTM1MC45NTYzMSwzNjIuMzMyNzc1TDM1MC45NTYzMSwzNjIuMzMyNzc1TDM1MC45NTYzMSwzNjIuMzMyNzc1Wk0zODUuOTkyNjYsMTYzLjA5NTk0N0wzODUuOTkyNjYsMTYzLjA5NTk0N0wzODUuOTkyNjYsMTYzLjA5NTk0N1pNMzQ3Ljg3MDY3OSwzNjUuMjcxNTY3TDM0OS40NjY2OTUsMzY1LjE2NjE5MkwzNDguOTk1NDksMzY2LjQ2OTcyWk0zODEuNTAxMDE1LDE3Ny41OTQ3NjhMMzgxLjUwMTAxNSwxNzcuNTk0NzY4TDM4MS41MDEwMTUsMTc3LjU5NDc2OFpNMzQ1LjE0OTg1MSwzNjcuNzc3MTUxTDM0NS4xNDk4NTEsMzY3Ljc3NzE1MUwzNDUuMTQ5ODUxLDM2Ny43NzcxNTFaTTM0Ni4yODk4NjMsMzU3LjczNTMwM0wzNDYuMjg5ODYzLDM1Ny43MzUzMDNMMzQ2LjI4OTg2MywzNTcuNzM1MzAzWk0zNTkuMDE5OTksMjg4Ljg1OTA3M0wzNTkuMDE5OTksMjg4Ljg1OTA3M0wzNTkuMDE5OTksMjg4Ljg1OTA3M1pNMzk0LjM2Nzk0NCw5OC4wMjQ5MjZMMzk0LjM2Nzk0NCw5OC4wMjQ5MjZMMzk0LjM2Nzk0NCw5OC4wMjQ5MjZaTTM0NC42MTc4NDYsMzY0LjQ3OTMwM0wzNDYuOTEzMDY5LDM2My43NDU1ODFMMzQ2LjMzNTQ2MywzNjQuOTA0NzA2Wk0zOTQuMzk4MzQ0LDk3LjA4MDQ1NEwzOTQuMzk4MzQ0LDk3LjA4MDQ1NEwzOTQuMzk4MzQ0LDk3LjA4MDQ1NFpNMzc5LjU3MDU5NiwxNzQuMDcwNTZMMzc5LjU3MDU5NiwxNzQuMDcwNTZMMzc5LjU3MDU5NiwxNzQuMDcwNTZaTTM0MS42Mzg2MTYsMzY1LjQ2MjgwM0wzNDIuNzkzODI4LDM2NC43ODc2MjNMMzQ0Ljk4MjY1LDM2Ni45NzcwODFMMzQzLjQwMTgzNCwzNjcuODk0MjM0Wk0zNDAuOTYyMjEsMzY4LjIwMjU1NEwzNDAuOTYyMjEsMzY4LjIwMjU1NEwzNDAuOTYyMjEsMzY4LjIwMjU1NFpNMzQxLjE5NzgxMiwzNjYuMTM3OTg0TDM0MS4xOTc4MTIsMzY2LjEzNzk4NEwzNDEuMTk3ODEyLDM2Ni4xMzc5ODRaTTM0MC41MTM4MDUsMzY2Ljc2MjQyOUwzNDAuNTEzODA1LDM2Ni43NjI0MjlMMzQwLjUxMzgwNSwzNjYuNzYyNDI5Wk0zNzYuNDAxMzY0LDE3Ni4xNzAyNTRMMzc2LjQwMTM2NCwxNzYuMTcwMjU0TDM3Ni40MDEzNjQsMTc2LjE3MDI1NFpNMzUzLjk0MzEzOSwyODUuNDUxOTQ3TDM1My45NDMxMzksMjg1LjQ1MTk0N0wzNTMuOTQzMTM5LDI4NS40NTE5NDdaTTMzNi43MDYxNjcsMzcxLjUzMTYyNEwzMzYuNzA2MTY3LDM3MS41MzE2MjRMMzM2LjcwNjE2NywzNzEuNTMxNjI0Wk0zMzMuMTI2NTMxLDM3NS42OTk3OTFMMzMzLjEyNjUzMSwzNzUuNjk5NzkxTDMzMy4xMjY1MzEsMzc1LjY5OTc5MVpNMzMzLjgyNTczOCwzNjguMzU0NzYyTDMzMy44MjU3MzgsMzY4LjM1NDc2MkwzMzMuODI1NzM4LDM2OC4zNTQ3NjJaTTMzMy43MTkzMzcsMzY4LjkxMjg1OUwzMzYuMjA0NTYyLDM2OC4yOTIzMThMMzM2LjEzNjE2MSwzNzAuNTAxMjlMMzM0Ljg0NDE0OCwzNzEuNDg4NjkzWk0zMzAuNjMzNzA2LDM4MS44OTM1TDMzMC42MzM3MDYsMzgxLjg5MzVMMzMwLjYzMzcwNiwzODEuODkzNVpNMzMwLjgwMDkwOCwzODAuMzU5NzA4TDMzMC44MDA5MDgsMzgwLjM1OTcwOEwzMzAuODAwOTA4LDM4MC4zNTk3MDhaTTMzMC4zNDQ5MDMsMzgxLjY2MzIzNkwzMzAuMzQ0OTAzLDM4MS42NjMyMzZMMzMwLjM0NDkwMywzODEuNjYzMjM2Wk0zMzAuMTYyNTAyLDM4MS4xNjc1ODNMMzMwLjE2MjUwMiwzODEuMTY3NTgzTDMzMC4xNjI1MDIsMzgxLjE2NzU4M1pNMzY5LjY5ODA5NywxNzIuNzYzMTI5TDM3MS41Mjk3MTUsMTcxLjkwODQyMUwzNzMuMzg0MTM0LDE3Mi40ODIxMjlMMzczLjE3ODkzMiwxNzQuNDE0MDA0TDM3MC40ODA5MDUsMTczLjg5MTAzMlpNMzI5LjMxMTI5MywzNzAuOTczNTI2TDMyOS4zMTEyOTMsMzcwLjk3MzUyNkwzMjkuMzExMjkzLDM3MC45NzM1MjZaTTMzMC44NTQxMDksMzU5LjEwMTI3NUwzMzAuODU0MTA5LDM1OS4xMDEyNzVMMzMwLjg1NDEwOSwzNTkuMTAxMjc1Wk0zMjkuOTgwMSwzNTkuNjc4ODg2TDMyOS45ODAxLDM1OS42Nzg4ODZMMzI5Ljk4MDEsMzU5LjY3ODg4NlpNMzI1Ljg3NjA1OSwzNzkuMDkxMzA1TDMyNi45NDAwNjksMzc3Ljc1MjY1MkwzMjkuMTg5NjkyLDM3OS4wNjAwODNMMzI5LjgxMjg5OCwzODAuOTY0NjM5Wk0zMjkuOTExNjk5LDM1OC4zNDAyMzNMMzI5LjkxMTY5OSwzNTguMzQwMjMzTDMyOS45MTE2OTksMzU4LjM0MDIzM1pNMzcyLjE2MDUyMiwxNTIuNjU2MDE2TDM3Mi4xNjA1MjIsMTUyLjY1NjAxNkwzNzIuMTYwNTIyLDE1Mi42NTYwMTZaTTMyNy41NjMyNzYsMzY4LjMwNDAyNkwzMjcuNTYzMjc2LDM2OC4zMDQwMjZMMzI3LjU2MzI3NiwzNjguMzA0MDI2Wk0zMjguNzE4NDg3LDM2MC43NTIxNUwzMjguNzE4NDg3LDM2MC43NTIxNUwzMjguNzE4NDg3LDM2MC43NTIxNVpNMzI4LjY4ODA4NywzNjAuNDkwNjY0TDMyOC42ODgwODcsMzYwLjQ5MDY2NEwzMjguNjg4MDg3LDM2MC40OTA2NjRaTTMyOC4wODc2ODEsMzYwLjA5MjU4MUwzMjguMDg3NjgxLDM2MC4wOTI1ODFMMzI4LjA4NzY4MSwzNjAuMDkyNTgxWk0zMjYuMzM5NjYzLDM1Ni4wMTQxNzdMMzI2LjMzOTY2MywzNTYuMDE0MTc3TDMyNi4zMzk2NjMsMzU2LjAxNDE3N1pNMzcyLjIxMzcyMiwxMDguOTE3NThMMzcyLjIxMzcyMiwxMDguOTE3NThMMzcyLjIxMzcyMiwxMDguOTE3NThaTTMzNi45NzIxNywyNTcuMjk3MzA1TDMzNi45NzIxNywyNTcuMjk3MzA1TDMzNi45NzIxNywyNTcuMjk3MzA1Wk0zNDguMjg4NjgzLDE4MC4zODkxNThMMzQ4LjI4ODY4MywxODAuMzg5MTU4TDM0OC4yODg2ODMsMTgwLjM4OTE1OFpNMzQ3Ljg5MzQ3OSwxODAuNjk3NDc3TDM0Ny44OTM0NzksMTgwLjY5NzQ3N0wzNDcuODkzNDc5LDE4MC42OTc0NzdaTTM0Ny44NzA2NzksMTc5Ljc4NDIyN0wzNDcuODcwNjc5LDE3OS43ODQyMjdMMzQ3Ljg3MDY3OSwxNzkuNzg0MjI3Wk0yOTguMTg4OTgyLDM3OC41OTU2NTJMMjk4LjE4ODk4MiwzNzguNTk1NjUyTDI5OC4xODg5ODIsMzc4LjU5NTY1MlpNMzQzLjkwMzQzOSwxODUuNTQ0NzI4TDM0My45MDM0MzksMTg1LjU0NDcyOEwzNDMuOTAzNDM5LDE4NS41NDQ3MjhaTTI5Ny44NTQ1NzksMzc4LjE1ODU0MUwyOTcuODU0NTc5LDM3OC4xNTg1NDFMMjk3Ljg1NDU3OSwzNzguMTU4NTQxWk0zNDMuMDIxODMsMTg4LjI4NDQ3OEwzNDMuMDIxODMsMTg4LjI4NDQ3OEwzNDMuMDIxODMsMTg4LjI4NDQ3OFpNMzQzLjE0MzQzMSwxODcuNjM2NjE3TDM0My4xNDM0MzEsMTg3LjYzNjYxN0wzNDMuMTQzNDMxLDE4Ny42MzY2MTdaTTI5Ny4xMzI1NzEsMzc5LjE0NTk0NEwyOTcuMTMyNTcxLDM3OS4xNDU5NDRMMjk3LjEzMjU3MSwzNzkuMTQ1OTQ0Wk0zNDIuNDgyMjI1LDE4OC42MzU3MjhMMzQyLjQ4MjIyNSwxODguNjM1NzI4TDM0Mi40ODIyMjUsMTg4LjYzNTcyOFpNMjk5LjA1NTM5MSwzNjkuNTU2ODE4TDMwMi41MTM0MjUsMzY4LjQ5OTE2NUwzMDUuNTc2MjU2LDM2NC42ODYxNTFMMzA3LjYyODI3NiwzNjMuMjU3NzM0TDMwOC42NjE4ODcsMzY0LjMzNDkwMUwzMTUuMTM3MTUxLDM2Mi41MTIzMDNMMzE5LjgzMzk5OCwzNjMuMTk5MTkyTDMyMC44MzcyMDgsMzY1LjczNTk5OEwzMjAuNjMyMDA2LDM2OC4yMTgxNjVMMzIxLjI5MzIxMywzNzAuNTMyNTEyTDMyMy40NTE2MzUsMzcwLjU4NzE1MUwzMjMuNzQwNDM3LDM3Mi4yOTY1NjhMMzE5Ljc1MDM5OCwzNzAuOTExMDgyTDMxOS40NzY3OTUsMzcyLjM0NzMwNEwzMTcuMDk3OTcxLDM3Mi44NTQ2NjVMMzE0LjI1NTU0MywzNzEuNjcyMTI0TDMxMC4zOTQ3MDQsMzcxLjE5OTg4N0wzMDcuMDczNDcxLDM3Mi4yMTQ2MUwzMDQuNzU1NDQ4LDM3NC41NzE4ODhMMzAxLjk3MzgyLDM3NC42NjE2NTJMMjk5LjU0OTM5NSwzNzMuMzY5ODMyWk0zMzEuNzI4MTE3LDIyOS4zOTI0NDFMMzMxLjcyODExNywyMjkuMzkyNDQxTDMzMS43MjgxMTcsMjI5LjM5MjQ0MVpNMzQxLjM0MjIxMywxODkuNDM1Nzk4TDM0MS4zNDIyMTMsMTg5LjQzNTc5OEwzNDEuMzQyMjEzLDE4OS40MzU3OThaTTM0MC43MDM4MDcsMTkwLjAwMTdMMzQwLjcwMzgwNywxOTAuMDAxN0wzNDAuNzAzODA3LDE5MC4wMDE3Wk0yOTIuODYxMzI5LDM3OS4yNjMwMjdMMjkzLjkzMjkzOSwzNzguOTAzOTcyTDI5Ni45MjczNjksMzc5Ljk4MTEzOEwyOTUuMDcyOTUxLDM4MC42MjlaTTI4OS4yMzYwOTIsMzc4Ljk5NzYzOEwyODkuMjM2MDkyLDM3OC45OTc2MzhMMjg5LjIzNjA5MiwzNzguOTk3NjM4Wk0yODkuNDk0NDk1LDM3Ny4zNzQwODNMMjg5LjQ5NDQ5NSwzNzcuMzc0MDgzTDI4OS40OTQ0OTUsMzc3LjM3NDA4M1pNMjg5LjIzNjA5MiwzNzcuNjYyODg4TDI4OS4yMzYwOTIsMzc3LjY2Mjg4OEwyODkuMjM2MDkyLDM3Ny42NjI4ODhaTTI4Ny44MDcyNzgsMzc5LjQwNzQzTDI4Ny44MDcyNzgsMzc5LjQwNzQzTDI4Ny44MDcyNzgsMzc5LjQwNzQzWk0yODcuNDcyODc1LDM3NC41Mjg5NTdMMjg4LjgwMjg4OCwzNzMuNjk3NjY2TDI5MC41NDMzMDUsMzc0LjE2MjA5NkwyODkuMjA1NjkyLDM3NS42MTc4MzJMMjkxLjIwNDUxMiwzNzYuNTg5NjI0TDI4Ny43ODQ0NzgsMzc3LjY5MDIwOFpNMzE2Ljk3NjM3LDI0OC43NjU4MzJMMzE2Ljk3NjM3LDI0OC43NjU4MzJMMzE2Ljk3NjM3LDI0OC43NjU4MzJaTTI4MC4zNTE2MDQsMzgxLjc0MTI5MUwyODAuMzUxNjA0LDM4MS43NDEyOTFMMjgwLjM1MTYwNCwzODEuNzQxMjkxWk0yODAuNzY5NjA4LDM3OC41OTk1NTVMMjgwLjc2OTYwOCwzNzguNTk5NTU1TDI4MC43Njk2MDgsMzc4LjU5OTU1NVpNMjgxLjE1NzIxMiwzNzUuNzk3MzZMMjgzLjQwNjgzNCwzNzQuMDc2MjM1TDI4NC44NTg0NDksMzc0LjYwNzAxM0wyODYuODQ5NjY4LDM3Ny4yMzc0ODVMMjg1LjM0NDg1MywzNzguMjEzMThMMjgxLjU0NDgxNSwzNzcuNzQwOTQ0Wk0zMjQuODg4MDQ5LDIwNS42OTg2NzRMMzI0Ljg4ODA0OSwyMDUuNjk4Njc0TDMyNC44ODgwNDksMjA1LjY5ODY3NFpNMjc5LjIxOTE5MiwzNzguNTA1ODg4TDI3OS4yMTkxOTIsMzc4LjUwNTg4OEwyNzkuMjE5MTkyLDM3OC41MDU4ODhaTTM0MC4wNDI2LDE0NC4yMjk5MThMMzQwLjA0MjYsMTQ0LjIyOTkxOEwzNDAuMDQyNiwxNDQuMjI5OTE4Wk0yNzYuNTgxOTY2LDM4Mi40OTQ1MjhMMjc5LjU2ODc5NiwzODEuNzMzNDg2TDI3OS4wODk5OTEsMzgzLjQ2MjQxN0wyNzYuOTc3MTcsMzg0LjMxNzEyNVpNNzAzLjA5MDYzMSwzMDUuNTEyMjI3TDcwMy4wOTA2MzEsMzA1LjUxMjIyN0w3MDMuMDkwNjMxLDMwNS41MTIyMjdaTTcwNy43ODc0NzgsMzIzLjU1ODY3NEw3MDcuNzg3NDc4LDMyMy41NTg2NzRMNzA3Ljc4NzQ3OCwzMjMuNTU4Njc0Wk03MTcuMDU5NTcxLDM1OC42MzI5NDJMNzE3LjA1OTU3MSwzNTguNjMyOTQyTDcxNy4wNTk1NzEsMzU4LjYzMjk0MlpNNzAyLjkxNTgyOSwzMDYuMjYxNTYxTDcwMi45MTU4MjksMzA2LjI2MTU2MUw3MDIuOTE1ODI5LDMwNi4yNjE1NjFaTTcwMS4wNjE0MTEsMjk5LjkyNzM1Mkw3MDEuMDYxNDExLDI5OS45MjczNTJMNzAxLjA2MTQxMSwyOTkuOTI3MzUyWk03MTIuNjY2NzI3LDM0NS41MDM5OTZMNzEzLjQwMzkzNCwzNDMuNDQ3MjMyTDcxNC44NzgzNDksMzQ1LjI2OTgyOVpNNzA5Ljg0NzA5OCwzMzUuMTg4OTUzTDcwOS44NDcwOTgsMzM1LjE4ODk1M0w3MDkuODQ3MDk4LDMzNS4xODg5NTNaTTY5OC43NTA5ODgsMjk0LjE1OTA0NUw2OTguNzUwOTg4LDI5NC4xNTkwNDVMNjk4Ljc1MDk4OCwyOTQuMTU5MDQ1Wk03MTEuMjA3NTEyLDM0MS43Mzc4MTVMNzExLjMwNjMxMywzMzkuOTAzNTA5TDcxMi4zOTMxMjQsMzQwLjQxMDg3Wk03MDkuNTEyNjk1LDMzNS44NjQxMzNMNzA5LjUxMjY5NSwzMzUuODY0MTMzTDcwOS41MTI2OTUsMzM1Ljg2NDEzM1pNNzEyLjI0ODcyMiwzNDYuMzE5Njc2TDcxMi4yNDg3MjIsMzQ2LjMxOTY3Nkw3MTIuMjQ4NzIyLDM0Ni4zMTk2NzZaTTcwOC4wMzgyOCwzMzEuMTQ5NTc3TDcwOC4wMzgyOCwzMzEuMTQ5NTc3TDcwOC4wMzgyOCwzMzEuMTQ5NTc3Wk03MTIuNjIxMTI2LDM0OC45MDcyMThMNzEzLjU5MzkzNiwzNDYuMTMyMzQzTDcxNS42MzgzNTYsMzQ2LjIzNzcxOEw3MTMuOTgxNTQsMzQ3LjY4OTU1MUw3MTQuMDExOTQsMzUwLjIzODA2NlpNNzA5LjAyNjI5LDMzNi4xOTE5NjdMNzA5LjAyNjI5LDMzNi4xOTE5NjdMNzA5LjAyNjI5LDMzNi4xOTE5NjdaTTcxMC4yNDIzMDIsMzQxLjA1ODczMUw3MTAuMjQyMzAyLDM0MS4wNTg3MzFMNzEwLjI0MjMwMiwzNDEuMDU4NzMxWk03MDUuOTQ4MjU5LDMyNC44NTgyOTlMNzA1Ljk0ODI1OSwzMjQuODU4Mjk5TDcwNS45NDgyNTksMzI0Ljg1ODI5OVpNNzEwLjQzMjMwNCwzNDIuNTYxMzAxTDcxMC40MzIzMDQsMzQyLjU2MTMwMUw3MTAuNDMyMzA0LDM0Mi41NjEzMDFaTTcwNC4zNjc0NDQsMzIyLjEyMjQ1MUw3MDQuMzY3NDQ0LDMyMi4xMjI0NTFMNzA0LjM2NzQ0NCwzMjIuMTIyNDUxWk03MDcuMjYzMDczLDMzNC45ODYwMDhMNzA5LjYxMTQ5NiwzMjkuNTgwNjYxTDcwOC4wMzA2OCwzMjguNTExMjk5TDcwNy4zMDg2NzMsMzI1LjM4MTI3MUw3MTAuMDc1MTAxLDMyNS4zNzM0NjZMNzEyLjY4OTUyNywzMjQuNDcxOTI0TDcxNS42OTkxNTcsMzI3LjQ3MzE2TDcxNS43OTc5NTgsMzMwLjUyNTEzM0w3MTkuMDI3OTksMzI5LjkzMTkxMUw3MjIuNjA3NjI2LDMzMS45MTA2MTlMNzI1LjIzNzI1MiwzMzQuMTQ2OTExTDcyNi40OTEyNjUsMzM3LjgyNzIzMUw3MjYuOTU0ODcsMzM2LjM1OTc4Nkw3MzAuMTM5MzAxLDMzOS44NzYxOUw3MjYuMTg3MjYyLDMzOC41NTcwNUw3MjUuNTQ4ODU1LDM0MC44NDQwNzhMNzI3LjYwMDg3NiwzMzkuODU2Njc2TDcyOS43NTE2OTgsMzQwLjk0NTU1MUw3MzMuMjQwMTMyLDM0NC4xMzQxMjFMNzM0LjU5Mjk0NiwzNDMuOTUwNjlMNzM1LjMzNzc1MywzNDUuNzY5Mzg1TDczNC4zODc3NDQsMzUwLjQ3NjEzNUw3MzYuMDA2NTYsMzQ4Ljc4MjMyOUw3MzguMDM1NzgsMzUzLjgyODYyMkw3MzcuOTQ0NTc5LDM1Ni41MTc2MzZMNzMzLjgxNzczOCwzNTcuMDU2MjE5TDczMy4wNzI5MzEsMzU0LjUzNTAyNEw3MjguNDIxNjg0LDM1Mi41Nzk3MzNMNzI3LjYzMTI3NiwzNDguMTUwMDc5TDcyNS44MzAwNTgsMzQ5LjM3MTY0OUw3MjcuMDkxNjcxLDM1MS4xNTEzMTZMNzI2LjUyOTI2NSwzNTIuNzA0NjIxTDcyNC40NTQ0NDUsMzUyLjEzNDgxNkw3MjIuODEyODI4LDM0OC40NjIzMDJMNzIwLjIyODgwMiwzNDguMTA3MTQ5TDcyMi40MjUyMjQsMzUwLjY0Mzk1NUw3MjIuMDM3NjIsMzUxLjc2Nzk1NUw3MjMuODAwODM4LDM1Mi44MDYwOTRMNzI0LjY2NzI0NywzNTQuNTUwNjM2TDcyNy42MzEyNzYsMzU2LjQwMDU1Mkw3MjkuMDI5NjksMzU4LjE2NDYwOEw3MjcuMjA1NjcyLDM1OS41NzM1MTFMNzI1Ljg5ODQ1OSwzNTcuOTEwOTI4TDcyMS40NTI0MTUsMzU1LjAyNjc3NUw3MTkuNzA0Mzk3LDM1Mi4yMzIzODVMNzE5LjA3MzU5MSwzNDguNjczMDUyTDcxNy42OTc5NzcsMzQ5Ljk4ODI4OEw3MTYuMDQ4NzYsMzQ5Ljk0MTQ1NUw3MTUuNDQ4MzU0LDM0Ny44NzY4ODVMNzE5Ljc1NzU5OCwzNDQuODcxNzQ2TDcxNy41OTkxNzYsMzQyLjIzMzQ2OEw3MTcuODcyNzc5LDM0MS4xNzk3MTdMNzE1LjkwNDM1OSwzNDEuNDM3MzAxTDcwOS42OTUwOTcsMzM4LjM4OTIzMUw3MTAuOTAzNTA5LDMzNi44MDA4TDcxMi4zNzc5MjQsMzM3LjUzODQyNUw3MTQuMzE1OTQzLDMzNi40NDE3NDVMNzEzLjUxMDMzNSwzMzQuOTkzODE0TDcxMS4zNTE5MTQsMzM0LjI0NDQ4MUw3MTAuOTcxOTEsMzMyLjI1NDA2NEw3MDkuNzAyNjk3LDMzNS4xNTM4MjhaTTcxMC4xMjgzMDEsMzQ2LjMxNTc3NEw3MTAuNDA5NTA0LDM0NC4xMjI0MTJMNzEyLjYyODcyNiwzNDMuNDY2NzQ1TDcxMi4xNDk5MjEsMzQ1LjkzNzIwNFpNNzA0LjMzNzA0MywzMjQuNjQzNjQ2TDcwNC4zMzcwNDMsMzI0LjY0MzY0Nkw3MDQuMzM3MDQzLDMyNC42NDM2NDZaTTcwMy44NTA2MzksMzIzLjA3MDgyN0w3MDMuODUwNjM5LDMyMy4wNzA4MjdMNzAzLjg1MDYzOSwzMjMuMDcwODI3Wk03MDMuNTMxNDM1LDMyMi4xMDI5MzhMNzAzLjUzMTQzNSwzMjIuMTAyOTM4TDcwMy41MzE0MzUsMzIyLjEwMjkzOFpNNjk4LjkxMDU4OSwzMDUuOTI5ODI1TDY5OC45MTA1ODksMzA1LjkyOTgyNUw2OTguOTEwNTg5LDMwNS45Mjk4MjVaTTcwNS45NzEwNiwzMzYuNTc0NDM5TDcwNi45MTM0NjksMzM1LjYyOTk2N0w3MDcuMjAyMjcyLDMzNy42MTY0ODFaTTcwMC4yMzMwMDIsMzE0LjY3OTg1M0w3MDAuMjMzMDAyLDMxNC42Nzk4NTNMNzAwLjIzMzAwMiwzMTQuNjc5ODUzWk02OTguMzEwMTgzLDMwOS41MjgxODZMNjk4LjMxMDE4MywzMDkuNTI4MTg2TDY5OC4zMTAxODMsMzA5LjUyODE4NlpNNjk3LjAzMzM3LDMwNS44OTg2MDJMNjk3LjAzMzM3LDMwNS44OTg2MDJMNjk3LjAzMzM3LDMwNS44OTg2MDJaTTY5OS4wNTQ5OTEsMzE0LjAyNDE4N0w2OTkuMDU0OTkxLDMxNC4wMjQxODdMNjk5LjA1NDk5MSwzMTQuMDI0MTg3Wk02OTMuODcxNzM5LDI5NS4yNDQwMThMNjkzLjg3MTczOSwyOTUuMjQ0MDE4TDY5My44NzE3MzksMjk1LjI0NDAxOFpNNjkyLjY0ODEyNiwyOTAuODIyMTdMNjkyLjY0ODEyNiwyOTAuODIyMTdMNjkyLjY0ODEyNiwyOTAuODIyMTdaTTY5My41NDQ5MzUsMjk0LjYwMDA1OUw2OTMuNTQ0OTM1LDI5NC42MDAwNTlMNjkzLjU0NDkzNSwyOTQuNjAwMDU5Wk02OTYuNjQ1NzY2LDMwNi43MzM3OTdMNjk2LjY0NTc2NiwzMDYuNzMzNzk3TDY5Ni42NDU3NjYsMzA2LjczMzc5N1pNNjkzLjM1NDkzNCwyOTQuMzI2ODY1TDY5My4zNTQ5MzQsMjk0LjMyNjg2NUw2OTMuMzU0OTM0LDI5NC4zMjY4NjVaTTcwMy4yMTIyMzIsMzM2LjA5MDQ5NUw3MDMuMjEyMjMyLDMzNi4wOTA0OTVMNzAzLjIxMjIzMiwzMzYuMDkwNDk1Wk02OTAuODYyMTA5LDI4OC4xODc3OTVMNjkwLjg2MjEwOSwyODguMTg3Nzk1TDY5MC44NjIxMDksMjg4LjE4Nzc5NVpNNjkxLjIyNjkxMiwyOTMuMTEzMTAxTDY5MS4yMjY5MTIsMjkzLjExMzEwMUw2OTEuMjI2OTEyLDI5My4xMTMxMDFaTTY5MC42NDkzMDYsMjkzLjI0OTY5OEw2OTAuNjQ5MzA2LDI5My4yNDk2OThMNjkwLjY0OTMwNiwyOTMuMjQ5Njk4Wk02OTAuMTAyMTAxLDI5MS45MDMyNEw2OTAuMTAyMTAxLDI5MS45MDMyNEw2OTAuMTAyMTAxLDI5MS45MDMyNFpNNzAwLjU2NzQwNiwzMzcuNzMzNTY0TDcwMy42NDU0MzYsMzM2Ljc4MTI4Nkw3MDEuNzA3NDE3LDMzOS40MjczN1pNNjk0LjcxNTM0NywzMTcuMjc1MjAxTDY5NS41NzQxNTYsMzE1LjQwMTg2N0w2OTcuODc2OTc5LDMxNi4yNTI2NzNMNjk3LjQ4MTc3NSwzMTMuNzYyN0w2OTguODgwMTg5LDMxNC4yNTA1NDhMNzAyLjAyNjYyLDMxOC4zMzY3NTdMNzAwLjY0MzQwNiwzMTMuMjI4MDJMNjk4LjQ4NDk4NSwzMTEuODAzNTA2TDY5OS44NDUzOTgsMzA5Ljc0MjgzOUw3MDYuMTM4MjYxLDMxMC4yNjE5MDhMNzA4Ljc1MjY4OCwzMDkuNDg1MjU2TDcxMS41ODc1MTYsMzEwLjQxMDIxNEw3MTMuNDE5MTM0LDMxMy4xMzQzNTNMNzE0LjU4OTU0NiwzMTMuMDY4MDA2TDcxNy44NDIzNzgsMzE1LjE0MDM4MUw3MTkuMzM5NTkzLDMxNi43MzY2MTdMNzE2LjUwNDc2NSwzMTkuNjY3NjA0TDcxMi45NzgzMywzMTkuNzkyNDkzTDcxMS45OTc5MiwzMjIuMDEzMTc0TDcwOC44NTkwODksMzIxLjg4ODI4NUw3MDguMzA0MjgzLDMyMy4yNjU5NjVMNzA2LjQ4MDI2NSwzMjMuNzU3NzE1TDcwNC45NjAyNSwzMjAuODQyMzRMNzAzLjQwMjIzNCwzMjEuNDE2MDQ5TDcwMi43NTYyMjgsMzIzLjM1OTYzMkw3MDQuMjgzODQzLDMyNC40Nzk3MjlMNzAzLjQyNTAzNCwzMjUuOTk0MDA3TDcwNC45NDUwNDksMzI2Ljg0ODcxNkw3MDQuOTA3MDQ5LDMyOS4zMDM1NjNMNzA0LjA2MzQ0MSwzMjkuODYxNjYxTDcwNC42NjM4NDcsMzMyLjQxMDE3NUw3MDMuNDU1NDM1LDMzMi4xMDE4NTVMNzAyLjA1NzAyMSwzMjcuNzUwMjU4TDcwMy4wMDcwMywzMzQuOTYyNTkyTDcwMS4zMjc0MTMsMzMzLjc4Mzk1M0w2OTkuMDE2OTksMzI3LjYzMzE3NEw2OTkuMzA1NzkzLDMyNC42NjMxNkw3MDAuNjUxMDA3LDMyNi40OTM1NjNMNzAwLjUyOTQwNSwzMjQuNzkxOTUyTDY5Ny43NDc3NzcsMzIyLjY4NDQ1MUw2OTcuMjg0MTczLDMyMS4wODgyMTVMNjk1LjU4OTM1NiwzMTkuNjcxNTA3Wk02ODIuODgyMDI5LDI4NC4yNTM3OTRMNjgyLjg4MjAyOSwyODQuMjUzNzk0TDY4Mi44ODIwMjksMjg0LjI1Mzc5NFpNNjgzLjAyNjQzLDI4Ni40MzE1NDVMNjgzLjAyNjQzLDI4Ni40MzE1NDVMNjgzLjAyNjQzLDI4Ni40MzE1NDVaTTY4Mi40NjQwMjUsMjg0LjY2NzQ4OUw2ODIuNDY0MDI1LDI4NC42Njc0ODlMNjgyLjQ2NDAyNSwyODQuNjY3NDg5Wk02ODUuODIzMjU4LDMwNS4xNTMxNzJMNjg1LjgyMzI1OCwzMDUuMTUzMTcyTDY4NS44MjMyNTgsMzA1LjE1MzE3MlpNNjg1LjU0MjA1NSwzMDUuMzkxMjQxTDY4NS41NDIwNTUsMzA1LjM5MTI0MUw2ODUuNTQyMDU1LDMwNS4zOTEyNDFaTTY3OS42MjE1OTYsMjgyLjExODk3NUw2NzkuNjIxNTk2LDI4Mi4xMTg5NzVMNjc5LjYyMTU5NiwyODIuMTE4OTc1Wk02NzguOTYwMzksMjc5LjkyNTYxM0w2NzguOTYwMzksMjc5LjkyNTYxM0w2NzguOTYwMzksMjc5LjkyNTYxM1pNNjc5LjY4OTk5NywyODQuNjQwMTY5TDY4MS45MDkyMTksMjg1LjI3MjQxOUw2ODQuMDY3NjQxLDI4OC41NTQ2NTZMNjg1LjUwNDA1NSwyODcuNzY2Mjk1TDY4OS45NTAxLDI4Ny45OTY1NTlMNjk1LjUyODU1NSwyOTQuMDYxNDc2TDY5Ny4xNTQ5NzIsMjk4LjA4MTMzOEw2OTQuODc0OTQ5LDI5Ni4zMjExODVMNjk0LjI0NDE0MiwyOTQuNzcxNzgyTDY5Mi4xNjE3MjIsMjkzLjEyMDkwNkw2OTEuNTY4OTE2LDI5MS40OTM0NDhMNjg5LjI3MzY5MywyOTAuMjk1Mjk1TDY5MC4zNjA1MDQsMjkyLjc3MzU1OUw2OTMuNTkwNTM2LDI5Ni42MzczMUw2OTYuMTEzNzYxLDI5OC4zNzc5NDlMNjk4LjUzMDU4NSwzMDMuNzQ0MjY5TDY5Ny40NzQxNzUsMzA1LjQ5NjYxNkw2OTUuOTE2MTU5LDMwNC41MDkyMTNMNjk2LjE1MTc2MiwzMDcuMzMwOTIyTDY5Mi43Njk3MjgsMzEyLjc3MTM5NUw2OTEuNDM5NzE0LDMxMy40NTQzODFMNjg5LjcxNDQ5NywzMDkuMTkyNTQ3TDY5MC45Njg1MSwzMDYuODQ2OTc3TDY4OS42NjEyOTcsMzA1LjIwMDAwNUw2OTEuMDY3MzExLDMwNS4wMjQzOEw2ODkuMjI4MDkyLDMwMy41OTk4NjZMNjg2LjA1MTI2MSwyOTguNDU2MDA0TDY4NS43NjI0NTgsMjk1Ljk2MjEyOUw2ODMuMTE3NjMxLDI5MC4xMTk2N0w2ODEuNDgzNjE1LDI4OC4zOTg1NDVaTTY3OC44ODQzODksMjgyLjY1MzY1NUw2NzguODg0Mzg5LDI4Mi42NTM2NTVMNjc4Ljg4NDM4OSwyODIuNjUzNjU1Wk02NzcuOTI2Nzc5LDI4MS4xOTQwMTZMNjc3LjkyNjc3OSwyODEuMTk0MDE2TDY3Ny45MjY3NzksMjgxLjE5NDAxNlpNNjc4Ljg3Njc4OSwyODcuMzEzNTcyTDY3OC44NzY3ODksMjg3LjMxMzU3Mkw2NzguODc2Nzg5LDI4Ny4zMTM1NzJaTTY4MC42NjI4MDcsMjk1LjcxNjI1NEw2ODAuNjYyODA3LDI5NS43MTYyNTRMNjgwLjY2MjgwNywyOTUuNzE2MjU0Wk02ODAuNDgwNDA1LDI5NS42MzgxOThMNjgwLjQ4MDQwNSwyOTUuNjM4MTk4TDY4MC40ODA0MDUsMjk1LjYzODE5OFpNNjg2LjQ0NjQ2NCwzMjMuNzU3NzE1TDY4Ni40NDY0NjQsMzIzLjc1NzcxNUw2ODYuNDQ2NDY0LDMyMy43NTc3MTVaTTY3Ny4yNjU1NzMsMjg5Ljc4NzkzNEw2NzcuMjY1NTczLDI4OS43ODc5MzRMNjc3LjI2NTU3MywyODkuNzg3OTM0Wk02NzIuNTE1NTI1LDI3MC42MzcwMDFMNjcyLjUxNTUyNSwyNzAuNjM3MDAxTDY3Mi41MTU1MjUsMjcwLjYzNzAwMVpNNjcyLjI3MjMyMywyNjkuNjIyMjc5TDY3Mi4yNzIzMjMsMjY5LjYyMjI3OUw2NzIuMjcyMzIzLDI2OS42MjIyNzlaTTY3Mi4yNzk5MjMsMjcwLjExNzkzMkw2NzIuMjc5OTIzLDI3MC4xMTc5MzJMNjcyLjI3OTkyMywyNzAuMTE3OTMyWk02NzcuMjY1NTczLDI5MS41NTU4OTJMNjc3LjI2NTU3MywyOTEuNTU1ODkyTDY3Ny4yNjU1NzMsMjkxLjU1NTg5MlpNNjc2LjYwNDM2NiwyOTEuMTU3ODA5TDY3Ni42MDQzNjYsMjkxLjE1NzgwOUw2NzYuNjA0MzY2LDI5MS4xNTc4MDlaTTY3MS43NjMxMTgsMjcxLjI2NTM0OEw2NzEuNzYzMTE4LDI3MS4yNjUzNDhMNjcxLjc2MzExOCwyNzEuMjY1MzQ4Wk02ODIuMDYxMjIxLDMxNS44MzExNzNMNjgyLjA2MTIyMSwzMTUuODMxMTczTDY4Mi4wNjEyMjEsMzE1LjgzMTE3M1pNNjc4LjgxNTk4OCwzMDMuNDEyNTMzTDY3OC44MTU5ODgsMzAzLjQxMjUzM0w2NzguODE1OTg4LDMwMy40MTI1MzNaTTY3MC41MDE1MDUsMjY4LjM2MTY4MUw2NzAuNTAxNTA1LDI2OC4zNjE2ODFMNjcwLjUwMTUwNSwyNjguMzYxNjgxWk02ODEuMDgwODExLDMxNC44MzU5NjRMNjgxLjA4MDgxMSwzMTQuODM1OTY0TDY4MS4wODA4MTEsMzE0LjgzNTk2NFpNNjgwLjY0NzYwNiwzMTMuODM2ODUzTDY4MC42NDc2MDYsMzEzLjgzNjg1M0w2ODAuNjQ3NjA2LDMxMy44MzY4NTNaTTY4MC45MzY0MDksMzE1LjA3NDAzNEw2ODAuOTM2NDA5LDMxNS4wNzQwMzRMNjgwLjkzNjQwOSwzMTUuMDc0MDM0Wk02ODEuNTY3MjE2LDMxOC4xMTQyOThMNjgxLjU2NzIxNiwzMTguMTE0Mjk4TDY4MS41NjcyMTYsMzE4LjExNDI5OFpNNjgxLjY5NjQxNywzMTkuMTA1NjA0TDY4MS42OTY0MTcsMzE5LjEwNTYwNEw2ODEuNjk2NDE3LDMxOS4xMDU2MDRaTTY3OC4xOTI3ODIsMzA0LjEyNjc0MUw2NzguMTkyNzgyLDMwNC4xMjY3NDFMNjc4LjE5Mjc4MiwzMDQuMTI2NzQxWk02NzQuMDUwNzQxLDI4Ni45Nzc5MzRMNjc0LjA1MDc0MSwyODYuOTc3OTM0TDY3NC4wNTA3NDEsMjg2Ljk3NzkzNFpNNjgwLjUxODQwNSwzMTQuOTY0NzU2TDY4MC41MTg0MDUsMzE0Ljk2NDc1Nkw2ODAuNTE4NDA1LDMxNC45NjQ3NTZaTTY3My42ODU5MzcsMjg2LjcwNDczOUw2NzMuNjg1OTM3LDI4Ni43MDQ3MzlMNjczLjY4NTkzNywyODYuNzA0NzM5Wk02ODAuMTIzMjAxLDMxNC42NDA4MjZMNjgwLjEyMzIwMSwzMTQuNjQwODI2TDY4MC4xMjMyMDEsMzE0LjY0MDgyNlpNNjc0LjU4Mjc0NiwyOTEuMDM2ODIzTDY3NC41ODI3NDYsMjkxLjAzNjgyM0w2NzQuNTgyNzQ2LDI5MS4wMzY4MjNaTTY3NC4zNTQ3NDQsMjkwLjIxMzMzN0w2NzQuMzU0NzQ0LDI5MC4yMTMzMzdMNjc0LjM1NDc0NCwyOTAuMjEzMzM3Wk02NzkuNzQzMTk3LDMxMy41MjA3MjhMNjc5Ljc0MzE5NywzMTMuNTIwNzI4TDY3OS43NDMxOTcsMzEzLjUyMDcyOFpNNjc5LjE4ODM5MiwzMTEuNzc2MTg2TDY3OS4xODgzOTIsMzExLjc3NjE4Nkw2NzkuMTg4MzkyLDMxMS43NzYxODZaTTY3Ny41ODQ3NzYsMzA2LjcxNDI4M0w2NzcuNTg0Nzc2LDMwNi43MTQyODNMNjc3LjU4NDc3NiwzMDYuNzE0MjgzWk02ODAuMzY2NDA0LDMyMC4xMTI1MjFMNjgwLjM2NjQwNCwzMjAuMTEyNTIxTDY4MC4zNjY0MDQsMzIwLjExMjUyMVpNNjc2LjMyMzE2MywzMDkuMjk3OTIyTDY3Ny43OTc1NzgsMzA2Ljg4NjAwNUw2NzguMjkxNTgzLDMwNC4yMDQ3OTdMNjgzLjgyNDQzOCwzMDYuMzk4MTU4TDY4Ni41ODMyNjYsMzA1LjkxMDMxMUw2ODcuMTgzNjcyLDMwOC4zNDk1NDdMNjg2LjA1MTI2MSwzMDcuNDYzNjE2TDY4OC4yNzgwODMsMzExLjE1NTY0NUw2OTIuNzYyMTI4LDMyMC40Mjg2NDZMNjk1LjAxMTc1LDMyOS44MjY1MzZMNjk0LjU5Mzc0NiwzMzEuOTk2NDhMNjkxLjU4NDExNiwzMzAuMjQwMjNMNjg4LjUzNjQ4NSwzMjYuMTY1NzNMNjg4Ljg1NTY4OSwzMjMuNTYyNTc3TDY4Ny4xMDc2NzEsMzI0Ljg1MDQ5M0w2ODYuNzIwMDY3LDMyMi44MzI3NTdMNjg0LjcxMzY0NywzMjMuMDM1NzAxTDY4My45NzY0NCwzMjEuMTU0NTYyTDY4MS42NjYwMTcsMzIxLjYwNzI4NUw2ODIuNjIzNjI2LDMyMC40MzY0NTFMNjgyLjAyMzIyLDMxNS4yMDI4MjZMNjgwLjYwOTYwNiwzMTIuODQ5NDVMNjgxLjE4NzIxMiwzMTAuODcwNzQyTDY3OC41NDIzODUsMzExLjU4NDk1Wk02NzcuOTY0NzgsMzE3LjczOTYzMUw2NzcuOTY0NzgsMzE3LjczOTYzMUw2NzcuOTY0NzgsMzE3LjczOTYzMVpNNjcwLjY2ODcwNywyODYuODQ1MjM5TDY3MC42Njg3MDcsMjg2Ljg0NTIzOUw2NzAuNjY4NzA3LDI4Ni44NDUyMzlaTTY3NC43ODc5NDgsMzEyLjg0OTQ1TDY3NS41MDk5NTUsMzA5LjczODkzNkw2NzcuNjQ1NTc2LDMxMC42Mjg3N0w2NzcuMzQxNTczLDMxMS42NTkxMDNMNjc4Ljk3NTU5LDMxMi43NzEzOTVMNjc4LjgzMTE4OCwzMTcuMDEzNzE1TDY3Ni42NTc1NjcsMzE3Ljk4OTQwOUw2NzUuODY3MTU5LDMxNS43OTYwNDhMNjc2LjUzNTk2NSwzMTMuNzg2MTE3Wk02NzMuNDczMTM1LDMwOC45MDc2NDRMNjczLjQ3MzEzNSwzMDguOTA3NjQ0TDY3My40NzMxMzUsMzA4LjkwNzY0NFpNNjY2LjA0Nzg2LDI4MC45MzY0MzNMNjY2LjA0Nzg2LDI4MC45MzY0MzNMNjY2LjA0Nzg2LDI4MC45MzY0MzNaTTY2Ni40NzM0NjUsMjg0LjM3MDg3OEw2NjYuNDczNDY1LDI4NC4zNzA4NzhMNjY2LjQ3MzQ2NSwyODQuMzcwODc4Wk02NjUuNTQ2MjU1LDI4MS40MDg2NjlMNjY1LjU0NjI1NSwyODEuNDA4NjY5TDY2NS41NDYyNTUsMjgxLjQwODY2OVpNNjY1LjAzNzA1LDI3OS42NjQxMjdMNjY1LjAzNzA1LDI3OS42NjQxMjdMNjY1LjAzNzA1LDI3OS42NjQxMjdaTTY2NS4xOTY2NTIsMjgwLjg0Mjc2Nkw2NjUuMTk2NjUyLDI4MC44NDI3NjZMNjY1LjE5NjY1MiwyODAuODQyNzY2Wk02NjQuNDgyMjQ1LDI3OC4xODEwNzFMNjY0LjQ4MjI0NSwyNzguMTgxMDcxTDY2NC40ODIyNDUsMjc4LjE4MTA3MVpNNjY0LjU3MzQ0NiwyODIuODA1ODY0TDY2NC41NzM0NDYsMjgyLjgwNTg2NEw2NjQuNTczNDQ2LDI4Mi44MDU4NjRaTTY2Ni4wODU4NjEsMjg5LjkxNjcyNkw2NjYuMDg1ODYxLDI4OS45MTY3MjZMNjY2LjA4NTg2MSwyODkuOTE2NzI2Wk02NjMuOTk1ODQsMjgyLjA5NTU1OEw2NjMuOTk1ODQsMjgyLjA5NTU1OEw2NjMuOTk1ODQsMjgyLjA5NTU1OFpNNjY4LjMxMjY4MywzMDIuNTE4Nzk2TDY2OC4zMTI2ODMsMzAyLjUxODc5Nkw2NjguMzEyNjgzLDMwMi41MTg3OTZaTTY2Ny44ODcwNzksMzAyLjUxNDg5NEw2NjcuODg3MDc5LDMwMi41MTQ4OTRMNjY3Ljg4NzA3OSwzMDIuNTE0ODk0Wk02NjUuNDMyMjU0LDI5MS45NDIyNjdMNjY1LjQzMjI1NCwyOTEuOTQyMjY3TDY2NS40MzIyNTQsMjkxLjk0MjI2N1pNNjYzLjEyOTQzMSwyODEuNTI5NjU1TDY2My4xMjk0MzEsMjgxLjUyOTY1NUw2NjMuMTI5NDMxLDI4MS41Mjk2NTVaTTY2Ny4yOTQyNzMsMzAyLjk2MzcxM0w2NjcuMjk0MjczLDMwMi45NjM3MTNMNjY3LjI5NDI3MywzMDIuOTYzNzEzWk02NjEuNjYyNjE3LDI4Mi4zMzM2MjdMNjYxLjY2MjYxNywyODIuMzMzNjI3TDY2MS42NjI2MTcsMjgyLjMzMzYyN1pNNjY1LjU4NDI1NiwzMDEuMjg1NTE4TDY2NS41ODQyNTYsMzAxLjI4NTUxOEw2NjUuNTg0MjU2LDMwMS4yODU1MThaTTY2My4yMDU0MzIsMjkwLjc5NDg1MUw2NjMuMjA1NDMyLDI5MC43OTQ4NTFMNjYzLjIwNTQzMiwyOTAuNzk0ODUxWk02NjMuNTMyMjM1LDI5Mi40NjEzMzdMNjYzLjUzMjIzNSwyOTIuNDYxMzM3TDY2My41MzIyMzUsMjkyLjQ2MTMzN1pNNjYzLjU3MDIzNiwyOTIuOTI5NjdMNjYzLjU3MDIzNiwyOTIuOTI5NjdMNjYzLjU3MDIzNiwyOTIuOTI5NjdaTTY2Mi4zMjM4MjMsMjk2LjYwOTk5TDY2Mi40NjgyMjUsMjk1LjAzNzE3MUw2NjQuMjQ2NjQyLDI5My40MTc1MThMNjY0Ljc0MDY0NywyOTEuNTcxNTA0TDY2NS43OTcwNTgsMjkyLjg5NDU0NUw2NjYuNTQxODY1LDI5MS4xNDIxOThMNjY4LjI4OTg4MywyOTEuNjAyNzI2TDY3MC4wMjI3LDI4OS4wMDM0NzVMNjc0LjUxNDM0NSwyOTAuNTk1ODA5TDY3My42MDk5MzYsMjkzLjY5NDYxNUw2NzQuMjg2MzQzLDI5NC45MzU2OThMNjc1LjU2MzE1NiwyOTEuMDEzNDA2TDY3Ny4zMjYzNzMsMjkxLjg1NjQwNkw2NzkuNDQ2Nzk0LDI5MS4zMjk1MzFMNjgxLjcwNDAxNywyOTIuMDE2NDJMNjgyLjY2MTYyNywyOTQuNTE4MTAxTDY4MS45Mzk2MTksMjk1LjU1MjMzN0w2NzkuMzE3NTkzLDI5NC44MzAzMjNMNjgyLjg1OTIyOSwyOTcuMDUxMDA0TDY4MS4xMDM2MTEsMjk4LjM0NjcyNkw2ODMuNDc0ODM1LDI5OC4yNjA4NjVMNjg2LjE4ODA2MiwzMDQuMTczNTc0TDY4My45Mzg0MzksMzA1LjI5NzU3NUw2NzYuMjc3NTYzLDMwMi4wMTkyNDFMNjc1LjQwMzU1NCwzMDMuMTQzMjQxTDY3Ny4zNDE1NzMsMzAzLjU3MjU0N0w2NzYuMjYyMzYzLDMwNC41Nzk0NjNMNjc3LjU2MTk3NiwzMDYuODY2NDkxTDY3Ni4wMjY3NiwzMDkuMjI3NjcyTDY3NC4yNTU5NDMsMzA4Ljk3Nzg5NEw2NzAuNDU1OTA1LDMwNS45MTgxMTZMNjY4LjY3NzQ4NywzMDUuNjA1ODk0TDY2Ny41MDcwNzUsMzAyLjU0NjExNkw2NjIuODE3ODI4LDI5OC44NDIzNzlaTTY1OC4xNDM3ODEsMjc3LjI3MTcyNEw2NTguMTQzNzgxLDI3Ny4yNzE3MjRMNjU4LjE0Mzc4MSwyNzcuMjcxNzI0Wk02NTguNjQ1Mzg2LDI5MS42ODQ2ODRMNjU4LjY0NTM4NiwyOTEuNjg0Njg0TDY1OC42NDUzODYsMjkxLjY4NDY4NFpNNjU0LjU3MTc0NiwyNzYuOTEyNjY5TDY1NC41NzE3NDYsMjc2LjkxMjY2OUw2NTQuNTcxNzQ2LDI3Ni45MTI2NjlaTTYyMC42NDUwMDYsMjY1LjM2ODI1MUw2MjAuNjQ1MDA2LDI2NS4zNjgyNTFMNjIwLjY0NTAwNiwyNjUuMzY4MjUxWk02MTkuMjMxMzkyLDI1OS4zMTUwNDJMNjE5LjIzMTM5MiwyNTkuMzE1MDQyTDYxOS4yMzEzOTIsMjU5LjMxNTA0MlpNNjE5LjU4ODU5NiwyNjUuMTg4NzIzTDYxOS41ODg1OTYsMjY1LjE4ODcyM0w2MTkuNTg4NTk2LDI2NS4xODg3MjNaTTYxOS4xMzI1OTEsMjY2LjUwMzk1OUw2MTkuMTMyNTkxLDI2Ni41MDM5NTlMNjE5LjEzMjU5MSwyNjYuNTAzOTU5Wk02MTkuMzM3NzkzLDI2OC4xNTA5MzFMNjE5LjMzNzc5MywyNjguMTUwOTMxTDYxOS4zMzc3OTMsMjY4LjE1MDkzMVpNNjE5LjA5NDU5MSwyNjYuOTY4MzlMNjE5LjA5NDU5MSwyNjYuOTY4MzlMNjE5LjA5NDU5MSwyNjYuOTY4MzlaTTYxOS4wNDg5OSwyNjcuNDQwNjI2TDYxOS4wNDg5OSwyNjcuNDQwNjI2TDYxOS4wNDg5OSwyNjcuNDQwNjI2Wk02MTcuNzAzNzc3LDI2OC41NjQ2MjZMNjE3LjcwMzc3NywyNjguNTY0NjI2TDYxNy43MDM3NzcsMjY4LjU2NDYyNlpNNTk4LjUyMTE4NSwyNjIuOTI5MDE0TDU5OC41MjExODUsMjYyLjkyOTAxNEw1OTguNTIxMTg1LDI2Mi45MjkwMTRaTTU2My41MjI4MzUsMjY0LjU1MjU3TDU2My41MjI4MzUsMjY0LjU1MjU3TDU2My41MjI4MzUsMjY0LjU1MjU3Wk01NjIuODY5MjI5LDI2Mi4xODc0ODZMNTYyLjg2OTIyOSwyNjIuMTg3NDg2TDU2Mi44NjkyMjksMjYyLjE4NzQ4NlpNNTYxLjYwMDAxNiwyNzAuNzE4OTZMNTYxLjk1NzIyLDI2OS4yOTQ0NDVMNTY0LjIzNzI0MiwyNjYuMDk0MTY3TDU2NS45NTQ4NiwyNjUuNDk3MDQyWk01MzguOTY2OTksMzUuODIyNDQ3TDUzOC45NjY5OSwzNS44MjI0NDdMNTM4Ljk2Njk5LDM1LjgyMjQ0N1pNNTU1LjAzMzU1LDI1OC45NTk4ODlMNTU1LjAzMzU1LDI1OC45NTk4ODlMNTU1LjAzMzU1LDI1OC45NTk4ODlaTTUzNi4zNjc3NjQsMzQuOTA1Mjk0TDUzNi4zNjc3NjQsMzQuOTA1Mjk0TDUzNi4zNjc3NjQsMzQuOTA1Mjk0Wk01NDguNTIwMjg1LDI1Ny43ODEyNUw1NDguNTIwMjg1LDI1Ny43ODEyNUw1NDguNTIwMjg1LDI1Ny43ODEyNVpNNTQ4LjM2ODI4NCwyNTguNTAzMjY0TDU0OC4zNjgyODQsMjU4LjUwMzI2NEw1NDguMzY4Mjg0LDI1OC41MDMyNjRaTTU0Ny4yODE0NzMsMjUyLjYyOTU4Mkw1NDcuMjgxNDczLDI1Mi42Mjk1ODJMNTQ3LjI4MTQ3MywyNTIuNjI5NTgyWk01NDcuMTM3MDcxLDI1My4yMjI4MDVMNTQ3LjEzNzA3MSwyNTMuMjIyODA1TDU0Ny4xMzcwNzEsMjUzLjIyMjgwNVpNNTQ2LjQzNzg2NCwyNTIuODUyMDQxTDU0Ni40Mzc4NjQsMjUyLjg1MjA0MUw1NDYuNDM3ODY0LDI1Mi44NTIwNDFaTTUzMS4xMjM3MTEsMzIuODEzNDA1TDUzMS4xMjM3MTEsMzIuODEzNDA1TDUzMS4xMjM3MTEsMzIuODEzNDA1Wk01MzAuODUwMTA5LDMyLjYwNjU1OEw1MzAuODUwMTA5LDMyLjYwNjU1OEw1MzAuODUwMTA5LDMyLjYwNjU1OFpNNTQ0LjQ3NzA0NSwyNTEuNDU0ODQ2TDU0NC40NzcwNDUsMjUxLjQ1NDg0Nkw1NDQuNDc3MDQ1LDI1MS40NTQ4NDZaTTU0NC4wNjY2NDEsMjUxLjYyNjU2OEw1NDQuMDY2NjQxLDI1MS42MjY1NjhMNTQ0LjA2NjY0MSwyNTEuNjI2NTY4Wk01NDQuNDQ2NjQ0LDI1OC4wMDc2MTFMNTQ3LjQ0ODY3NCwyNTcuOTg4MDk3TDU0Ni41NjcwNjYsMjU4LjkzMjU2OVpNNTQ0LjIyNjI0MiwyNTYuNDg5NDNMNTQ0LjIyNjI0MiwyNTYuNDg5NDNMNTQ0LjIyNjI0MiwyNTYuNDg5NDNaTTU0NC4xMTIyNDEsMjU3LjQ4ODU0MUw1NDQuMTEyMjQxLDI1Ny40ODg1NDFMNTQ0LjExMjI0MSwyNTcuNDg4NTQxWk01NDAuNjU0MjA3LDI1Ni42Njg5NThMNTQxLjExNzgxMSwyNTUuNDIzOTcyTDU0Ni41ODk4NjYsMjUzLjIyNjcwOEw1NDYuMzIzODYzLDI1NC4yOTIxNjZMNTQyLjA2NzgyMSwyNTYuODUyMzg5Wk01MzUuODU4NTU5LDI0Ny42ODA4Nkw1MzUuODU4NTU5LDI0Ny42ODA4Nkw1MzUuODU4NTU5LDI0Ny42ODA4NlpNNTM2LjI2ODk2MywyNTguODE1NDg2TDUzNy40ODQ5NzUsMjU2LjQwNzQ3Mkw1NDAuNTAyMjA1LDI1Ni41NzkxOTRMNTQwLjQzMzgwNCwyNTcuOTg0MTk0TDU0My4xMDE0MzEsMjU3LjI2OTk4Nkw1NDMuNjk0MjM3LDI1OC43OTU5NzJMNTQwLjc5MTAwOCwyNTkuNTg4MjM2TDUzNy44MzQ1NzgsMjYyLjEwNTUyOEw1MzYuNzQwMTY3LDI2MS4xNzI3NjRaTTUzNS42MDc3NTYsMjQ3LjM0MTMxOEw1MzUuNjA3NzU2LDI0Ny4zNDEzMThMNTM1LjYwNzc1NiwyNDcuMzQxMzE4Wk01MzQuNzcxNzQ4LDI0Ny43MTIwODJMNTM0Ljc3MTc0OCwyNDcuNzEyMDgyTDUzNC43NzE3NDgsMjQ3LjcxMjA4MlpNNTM0LjcwMzM0NywyNDcuMDE3Mzg3TDUzNC43MDMzNDcsMjQ3LjAxNzM4N0w1MzQuNzAzMzQ3LDI0Ny4wMTczODdaTTUzNC43ODY5NDgsMjQ4Ljc5NzA1NEw1MzQuNzg2OTQ4LDI0OC43OTcwNTRMNTM0Ljc4Njk0OCwyNDguNzk3MDU0Wk01MzQuNDQ0OTQ0LDI0OC4xNjg3MDdMNTM0LjQ0NDk0NCwyNDguMTY4NzA3TDUzNC40NDQ5NDQsMjQ4LjE2ODcwN1pNNTMyLjY5NjkyNywyNDUuMDQ2NDg0TDUzMi42OTY5MjcsMjQ1LjA0NjQ4NEw1MzIuNjk2OTI3LDI0NS4wNDY0ODRaTTUzMi43MTIxMjcsMjQ1LjM3MDQxNUw1MzIuNzEyMTI3LDI0NS4zNzA0MTVMNTMyLjcxMjEyNywyNDUuMzcwNDE1Wk01MzAuNjkwNTA3LDI0Ni44MjYxNTFMNTMwLjY5MDUwNywyNDYuODI2MTUxTDUzMC42OTA1MDcsMjQ2LjgyNjE1MVpNNTIwLjM5MjQwNCwzMS44MDI1ODVMNTIwLjM5MjQwNCwzMS44MDI1ODVMNTIwLjM5MjQwNCwzMS44MDI1ODVaTTUyOS42MTEyOTYsMjQ1LjYzOTcwN0w1MjkuNjExMjk2LDI0NS42Mzk3MDdMNTI5LjYxMTI5NiwyNDUuNjM5NzA3Wk01MjkuMDEwODksMjQ3LjcxMjA4Mkw1MzEuNzY5NzE4LDI0Ny4wNTY0MTVMNTMxLjE2OTMxMiwyNDguMTUzMDk2Wk01MjguNDU2MDg1LDI1NS45ODU5NzJMNTI4LjQ1NjA4NSwyNTUuOTg1OTcyTDUyOC40NTYwODUsMjU1Ljk4NTk3MlpNNTI4LjA0NTY4LDI0Ny40NzAxMUw1MjguMDQ1NjgsMjQ3LjQ3MDExTDUyOC4wNDU2OCwyNDcuNDcwMTFaTTUyOC45MzQ4ODksMjcwLjk5OTk2TDUyOC45MzQ4ODksMjcwLjk5OTk2TDUyOC45MzQ4ODksMjcwLjk5OTk2Wk01MjcuOTc3MjgsMjQ3LjQ0NjY5M0w1MjcuOTc3MjgsMjQ3LjQ0NjY5M0w1MjcuOTc3MjgsMjQ3LjQ0NjY5M1pNNTI4LjE0NDQ4MSwyNTEuODAyMTkzTDUyOC4xNDQ0ODEsMjUxLjgwMjE5M0w1MjguMTQ0NDgxLDI1MS44MDIxOTNaTTUyOC4xNTIwODIsMjU1Ljk1ODY1Mkw1MjguMTUyMDgyLDI1NS45NTg2NTJMNTI4LjE1MjA4MiwyNTUuOTU4NjUyWk01MjcuNDkwODc1LDI0Ny43MDQyNzZMNTI3LjQ5MDg3NSwyNDcuNzA0Mjc2TDUyNy40OTA4NzUsMjQ3LjcwNDI3NlpNNTI3LjQzNzY3NCwyNDYuNTE3ODMyTDUyNy40Mzc2NzQsMjQ2LjUxNzgzMkw1MjcuNDM3Njc0LDI0Ni41MTc4MzJaTTUyOC40NDg0ODQsMjcxLjU3NzU3MUw1MjguNDQ4NDg0LDI3MS41Nzc1NzFMNTI4LjQ0ODQ4NCwyNzEuNTc3NTcxWk01MjcuMzY5Mjc0LDI0Ni43MjA3NzZMNTI3LjM2OTI3NCwyNDYuNzIwNzc2TDUyNy4zNjkyNzQsMjQ2LjcyMDc3NlpNNTI3LjQwNzI3NCwyNDguMTYwOTAxTDUyNy40MDcyNzQsMjQ4LjE2MDkwMUw1MjcuNDA3Mjc0LDI0OC4xNjA5MDFaTTUyNy4zOTIwNzQsMjUxLjE3Nzc0OUw1MjcuMzkyMDc0LDI1MS4xNzc3NDlMNTI3LjM5MjA3NCwyNTEuMTc3NzQ5Wk01MjcuMjQwMDcyLDI1Mi45MTA1ODNMNTI3Ljg3MDg3OSwyNTEuODc2MzQ2TDUyOS4wNDEyOSwyNTMuNDQ5MTY2Wk01MjcuNTk3Mjc2LDI2Mi4wNzQzMDZMNTI3LjU5NzI3NiwyNjIuMDc0MzA2TDUyNy41OTcyNzYsMjYyLjA3NDMwNlpNNTI2LjIwNjQ2MiwyNDguMDA4NjkzTDUyNi4yMDY0NjIsMjQ4LjAwODY5M0w1MjYuMjA2NDYyLDI0OC4wMDg2OTNaTTUyNi4xNjA4NjIsMjQ4LjE3NjUxM0w1MjYuMTYwODYyLDI0OC4xNzY1MTNMNTI2LjE2MDg2MiwyNDguMTc2NTEzWk01MjUuNTIyNDU1LDI0OC43MDMzODhMNTI1LjUyMjQ1NSwyNDguNzAzMzg4TDUyNS41MjI0NTUsMjQ4LjcwMzM4OFpNNTI1LjE1MDA1MiwyNDkuNDQ4ODE4TDUyNS4xNTAwNTIsMjQ5LjQ0ODgxOEw1MjUuMTUwMDUyLDI0OS40NDg4MThaTTUyNC41MzQ0NDUsMjQwLjI4NTA5NUw1MjQuNTM0NDQ1LDI0MC4yODUwOTVMNTI0LjUzNDQ0NSwyNDAuMjg1MDk1Wk01MjQuODUzNjQ5LDI0OS41Mzg1ODJMNTI0Ljg1MzY0OSwyNDkuNTM4NTgyTDUyNC44NTM2NDksMjQ5LjUzODU4MlpNNTI0LjYxODA0NiwyNDkuMjMwMjYzTDUyNC42MTgwNDYsMjQ5LjIzMDI2M0w1MjQuNjE4MDQ2LDI0OS4yMzAyNjNaTTUyNC40NTA4NDUsMjQ5Ljg3MDMxOEw1MjQuNDUwODQ1LDI0OS44NzAzMThMNTI0LjQ1MDg0NSwyNDkuODcwMzE4Wk01MjQuMTYyMDQyLDI1Mi44MjQ3MjFMNTI0LjE2MjA0MiwyNTIuODI0NzIxTDUyNC4xNjIwNDIsMjUyLjgyNDcyMVpNNTIzLjYzMDAzNiwyNTAuNjUwODc0TDUyMy42MzAwMzYsMjUwLjY1MDg3NEw1MjMuNjMwMDM2LDI1MC42NTA4NzRaTTUxNS45OTE5NiwzMS4zNjE1NzFMNTE1Ljk5MTk2LDMxLjM2MTU3MUw1MTUuOTkxOTYsMzEuMzYxNTcxWk01MjMuMzEwODMzLDI0OS4yODA5OTlMNTIzLjMxMDgzMywyNDkuMjgwOTk5TDUyMy4zMTA4MzMsMjQ5LjI4MDk5OVpNNTIzLjE3NDAzMiwyNDkuODkzNzM1TDUyMy4xNzQwMzIsMjQ5Ljg5MzczNUw1MjMuMTc0MDMyLDI0OS44OTM3MzVaTTUyMi44ODUyMjksMjQ5LjIzMDI2M0w1MjIuODg1MjI5LDI0OS4yMzAyNjNMNTIyLjg4NTIyOSwyNDkuMjMwMjYzWk01MjMuMDc1MjMxLDI3My4xMjMwNzFMNTI1LjQ5MjA1NSwyNjguNDk4Mjc5TDUyOC41MjQ0ODUsMjY1LjgwMTQ1OUw1MzEuMTY5MzEyLDI2MS42MTM3NzhMNTMwLjg1MDEwOSwyNTkuODQ5NzIyTDUzMy4yMjg5MzIsMjU5LjgyNjMwNkw1MzIuMDM1NzIsMjYxLjc1ODE4MUw1MzMuODM2OTM4LDI2MC41OTEyNUw1MzMuNzUzMzM4LDI2Mi4wMTU3NjRMNTMxLjE3NjkxMiwyNjQuMzgwODQ4TDUyOS40NjY4OTUsMjY2LjkxMzc1MUw1MjkuMzgzMjk0LDI2OS4wNDA3NjVMNTI3Ljk2MjA4LDI2OS40MjMyMzdMNTI4LjczNzI4NywyNzAuOTUzMTI2TDUyNi42NTQ4NjcsMjcxLjUxMTIyM0w1MjUuODY0NDU5LDI3Mi43MTMyNzlaTTUyMi4yOTI0MjMsMjU2LjgxMzM2MUw1MjIuMjkyNDIzLDI1Ni44MTMzNjFMNTIyLjI5MjQyMywyNTYuODEzMzYxWk01MjIuMjY5NjIzLDI2Mi40Mjk0NTlMNTIzLjcyODgzNywyNTguMDE1NDE2TDUyNC44MzA4NDgsMjU3Ljg2MzIwOEw1MjYuNTc4ODY2LDI1NC42MzU2MUw1MjYuMTkxMjYyLDI1OS42MTk0NThMNTI0LjczOTY0NywyNjQuNTQwODYyWk01MTQuNTQwMzQ1LDI5LjYyNDgzNUw1MTQuNTQwMzQ1LDI5LjYyNDgzNUw1MTQuNTQwMzQ1LDI5LjYyNDgzNVpNNTIxLjMyNzIxMywyNTEuNTEzMzg4TDUyMy4zNDEyMzMsMjUyLjE5MjQ3MUw1MjIuMzUzMjI0LDI1My4wNjY2OTRaTTUyMS40NTY0MTUsMjY0LjUxNzQ0NUw1MjEuNDU2NDE1LDI2NC41MTc0NDVMNTIxLjQ1NjQxNSwyNjQuNTE3NDQ1Wk01MjEuNDcxNjE1LDI2OS40MDM3MjNMNTIzLjc1MTYzOCwyNjYuMzQwMDQyTDUyMy4yNzI4MzMsMjY4Ljc0ODA1N1pNNTIxLjEyOTYxMSwyNjkuOTQ2MjA5TDUyMS4xMjk2MTEsMjY5Ljk0NjIwOUw1MjEuMTI5NjExLDI2OS45NDYyMDlaTTUyMC4wOTYwMDEsMjYxLjA1NTY4MUw1MjEuOTczMjIsMjU5LjY1ODQ4Nkw1MjEuNjAwODE2LDI2MS44NTE4NDdaTTUyMC4zMzE2MDMsMjY4LjMyMjY1NEw1MjIuMzA3NjIzLDI2NC41NDA4NjJMNTIzLjI4ODAzMywyNjUuNzg5NzUxWk01MTkuNjc3OTk3LDI2Mi4wNzQzMDZMNTE5LjY3Nzk5NywyNjIuMDc0MzA2TDUxOS42Nzc5OTcsMjYyLjA3NDMwNlpNNTE5LjI1MjM5MywyNjkuNzIzNzUxTDUxOS4yNTIzOTMsMjY5LjcyMzc1MUw1MTkuMjUyMzkzLDI2OS43MjM3NTFaTTUwOS4xMDYyOTEsMjcuMDk5NzM4TDUwOS4xMDYyOTEsMjcuMDk5NzM4TDUwOS4xMDYyOTEsMjcuMDk5NzM4Wk01MDguNTM2Mjg1LDI2Ljg1Mzg2M0w1MDguNTM2Mjg1LDI2Ljg1Mzg2M0w1MDguNTM2Mjg1LDI2Ljg1Mzg2M1pNNTA4LjE3OTA4MiwyNi4yNjA2NEw1MDguMTc5MDgyLDI2LjI2MDY0TDUwOC4xNzkwODIsMjYuMjYwNjRaTTUwNy44NTIyNzksMjYuMDczMzA3TDUwNy44NTIyNzksMjYuMDczMzA3TDUwNy44NTIyNzksMjYuMDczMzA3Wk01MDQuNjM3NDQ2LDI0Ljg2MzQ0Nkw1MDQuNjM3NDQ2LDI0Ljg2MzQ0Nkw1MDQuNjM3NDQ2LDI0Ljg2MzQ0NlpNNTA3LjMyMDI3MywyNzEuNzM3NTg1TDUwNy4zMjAyNzMsMjcxLjczNzU4NUw1MDcuMzIwMjczLDI3MS43Mzc1ODVaTTUwNC4zMTA2NDMsMjQuNzU4MDcxTDUwNC4zMTA2NDMsMjQuNzU4MDcxTDUwNC4zMTA2NDMsMjQuNzU4MDcxWk01MDYuOTQ3ODY5LDI2OS41MzY0MThMNTA2Ljk0Nzg2OSwyNjkuNTM2NDE4TDUwNi45NDc4NjksMjY5LjUzNjQxOFpNNTA2LjM3Nzg2NCwyNzAuNzU3OTg3TDUwNi4zNzc4NjQsMjcwLjc1Nzk4N0w1MDYuMzc3ODY0LDI3MC43NTc5ODdaTTUwNi4xNzI2NjIsMjcxLjIyMjQxOEw1MDYuMTcyNjYyLDI3MS4yMjI0MThMNTA2LjE3MjY2MiwyNzEuMjIyNDE4Wk01MDUuODQ1ODU4LDI3MS45ODczNjJMNTA1Ljg0NTg1OCwyNzEuOTg3MzYyTDUwNS44NDU4NTgsMjcxLjk4NzM2MlpNNTA0LjU0NjI0NSwyNzMuNTUyMzc2TDUwNC41NDYyNDUsMjczLjU1MjM3Nkw1MDQuNTQ2MjQ1LDI3My41NTIzNzZaTTUwNC4wMTQyNCwyNzcuNzgyOTg4TDUwNC4wMTQyNCwyNzcuNzgyOTg4TDUwNC4wMTQyNCwyNzcuNzgyOTg4Wk01MDMuOTkxNDQsMjc1LjQzMzUxNkw1MDMuOTkxNDQsMjc1LjQzMzUxNkw1MDMuOTkxNDQsMjc1LjQzMzUxNlpNNTAzLjc5MzgzOCwyNzcuODM3NjI3TDUwMy43OTM4MzgsMjc3LjgzNzYyN0w1MDMuNzkzODM4LDI3Ny44Mzc2MjdaTTUwMi4xMzcwMjEsMjQuMTQ1MzM1TDUwMi4xMzcwMjEsMjQuMTQ1MzM1TDUwMi4xMzcwMjEsMjQuMTQ1MzM1Wk01MDMuMTE3NDMxLDI3Ny40NjI5Nkw1MDMuMTE3NDMxLDI3Ny40NjI5Nkw1MDMuMTE3NDMxLDI3Ny40NjI5NlpNNTAyLjg5NzAyOSwyNzYuMjcyNjEzTDUwMi44OTcwMjksMjc2LjI3MjYxM0w1MDIuODk3MDI5LDI3Ni4yNzI2MTNaTTc1LjIyNTU1MiwzNDguNDU0NDk2TDc3Ljk2MTU4LDM0OC44NDg2NzdMNzguODI3OTg4LDM1MC42MzYxNDlMNzcuNjcyNzc3LDM1MS42NTA4NzFMNzUuNzQ5OTU3LDM1MS41NzI4MTZMNzQuODIyNzQ4LDM1MC40NDg4MTZaTTYwLjU2NTAwNiwzNDkuNTY2Nzg4TDYzLjkwMTQzOSwzNTEuOTMxODcxTDY1Ljk2ODY2LDM1OC4yMDM2MzZMNjguNTkwNjg2LDM2MC41MzM1OTVMNjUuNzg2MjU4LDM1OS41MzgzODZMNjQuMjEzMDQyLDM1Ni4yMDkzMTZMNjMuNzM0MjM3LDM1My43MTkzNDRMNjEuOTEwMjE5LDM1MS45NzQ4MDJaTTYxLjk3ODYyLDM0MS41MjMxNjJMNjMuNDM3ODM0LDM0My4xNjIzMjlMNjEuODI2NjE4LDM0My40NzQ1NTFaTTU3LjY3Njk3NywzNDMuMDYwODU3TDU3LjY3Njk3NywzNDMuMDYwODU3TDU3LjY3Njk3NywzNDMuMDYwODU3Wk01OC4xMTAxODEsMzM3Ljk4NzI0NUw1OC4xMTAxODEsMzM3Ljk4NzI0NUw1OC4xMTAxODEsMzM3Ljk4NzI0NVpNNTUuNDU3NzU1LDM0MC41MjQwNTFMNTUuNDU3NzU1LDM0MC41MjQwNTFMNTUuNDU3NzU1LDM0MC41MjQwNTFaTTQ5LjgzMzY5OCwzMzEuMDE2ODgzTDQ5LjgzMzY5OCwzMzEuMDE2ODgzTDQ5LjgzMzY5OCwzMzEuMDE2ODgzWk00NS4zNTcyNTQsMzM0LjQxNjIwM0w1MC4xNDUzMDEsMzM0LjU5MTgyOEw1Mi40MDI1MjQsMzMyLjUwNzc0NEw1My40ODkzMzUsMzMzLjg5MzIzTDUwLjQ5NDkwNSwzMzUuMTY5NDM5TDUwLjA4NDUwMSwzMzYuNTY2NjM0TDQ4LjMzNjQ4MywzMzUuMjA4NDY3TDQ2LjQyMTI2NCwzMzYuMzc5M1pNMzQuMjY4NzQzLDMxNS40NzYwMkwzNC4yNjg3NDMsMzE1LjQ3NjAyTDM0LjI2ODc0MywzMTUuNDc2MDJaTTE2LjczNTM2NywyOTQuOTUxMzA5TDE2LjczNTM2NywyOTQuOTUxMzA5TDE2LjczNTM2NywyOTQuOTUxMzA5Wk0xNS41NjQ5NTYsMjkzLjc2MDk2MkwxNS41NjQ5NTYsMjkzLjc2MDk2MkwxNS41NjQ5NTYsMjkzLjc2MDk2MlpNMTQuODIwMTQ4LDI5Mi42NDQ3NjhMMTQuODIwMTQ4LDI5Mi42NDQ3NjhMMTQuODIwMTQ4LDI5Mi42NDQ3NjhaTTQuMTQ5NjQxLDI5NS43NjY5OUw4LjYxMDg4NiwyOTUuOTExMzkzTDEwLjQxOTcwNCwyOTYuOTMzOTIxTDguNjcxNjg3LDI5Ny42MDEyOTZMNy45ODAwOCwyOTkuNTcyMTk5TDYuODc4MDY5LDI5Ny42NjM3NFpNMC4xMTQwMDEsMjc4Ljg2MDE1NUwzLjAxNzIzLDI3OC43NjY0ODhMOC41MTk2ODUsMjgyLjYzODA0NEw5LjkxMDQ5OSwyODUuMzU0Mzc4TDEwLjM4OTMwNCwyODcuODc5NDc1TDguMjQ2MDgyLDI4Ni4xODk1NzJMNi43NDg4NjcsMjg2Ljg2ODY1NkwzLjIyMjQzMiwyODUuNDU5NzUzTDIuMzQ4NDIzLDI4My4xODQ0MzNMMi4xODg4MjIsMjgwLjI5MjQ3NFpNNzQ2LjY5MjI2NywzMzcuNzcyNTkyTDc0Ni42OTIyNjcsMzM3Ljc3MjU5Mkw3NDYuNjkyMjY3LDMzNy43NzI1OTJaTTc0Ni4zNjU0NjQsMzM5LjQ4OTgxNEw3NDYuMzY1NDY0LDMzOS40ODk4MTRMNzQ2LjM2NTQ2NCwzMzkuNDg5ODE0Wk03NDcuNDY3NDc1LDM0My45OTc1MjNMNzQ3LjQ2NzQ3NSwzNDMuOTk3NTIzTDc0Ny40Njc0NzUsMzQzLjk5NzUyM1pNNzQ3LjE3MTA3MiwzNDkuNTA4MjQ2TDc0Ny4xNzEwNzIsMzQ5LjUwODI0Nkw3NDcuMTcxMDcyLDM0OS41MDgyNDZaTTc0NS4zMjQyNTMsMzQ1LjE3MjI2TDc0NS4zMjQyNTMsMzQ1LjE3MjI2TDc0NS4zMjQyNTMsMzQ1LjE3MjI2Wk03NDMuMDk3NDMxLDMzOC45OTgwNjRMNzQzLjA5NzQzMSwzMzguOTk4MDY0TDc0My4wOTc0MzEsMzM4Ljk5ODA2NFpNNzQ1LjE4NzQ1MiwzNDYuNjk0MzQzTDc0NS4xODc0NTIsMzQ2LjY5NDM0M0w3NDUuMTg3NDUyLDM0Ni42OTQzNDNaTTc0NC45NTk0NSwzNDcuMDAyNjYzTDc0NC45NTk0NSwzNDcuMDAyNjYzTDc0NC45NTk0NSwzNDcuMDAyNjYzWk03NDMuNDE2NjM0LDM0My4wMzM1MzdMNzQzLjQxNjYzNCwzNDMuMDMzNTM3TDc0My40MTY2MzQsMzQzLjAzMzUzN1pNNzQyLjM1MjYyNCwzNDEuODU0ODk4TDc0Mi4zNTI2MjQsMzQxLjg1NDg5OEw3NDIuMzUyNjI0LDM0MS44NTQ4OThaTTc0MS4zMzQyMTMsMzQxLjgwMDI1OUw3NDEuMzM0MjEzLDM0MS44MDAyNTlMNzQxLjMzNDIxMywzNDEuODAwMjU5Wk03NDMuMDEzODMsMzQ5LjIxNTUzOEw3NDUuODEwNjU4LDM0Ni43Mjk0NjhMNzQ3LjA3MjI3MSwzNDguNDY2MjA0TDc0NS41MTQyNTUsMzUwLjM0NzM0M1pNNzQwLjY2NTQwNywzNDIuMDIyNzE4TDc0MC42NjU0MDcsMzQyLjAyMjcxOEw3NDAuNjY1NDA3LDM0Mi4wMjI3MThaTTc0Mi4wNDEwMiwzNDcuODg4NTkzTDc0Mi4wNDEwMiwzNDcuODg4NTkzTDc0Mi4wNDEwMiwzNDcuODg4NTkzWk03NDEuMzk1MDE0LDM0OS4zNzk0NTRMNzQxLjM5NTAxNCwzNDkuMzc5NDU0TDc0MS4zOTUwMTQsMzQ5LjM3OTQ1NFpNNzQwLjM2MTQwNCwzNDcuMzM4MzAxTDc0MS4xMjkwMTEsMzQ0LjY1NzA5M0w3MzkuNTkzNzk2LDM0Mi45NzQ5OTVMNzM5Ljc2MDk5OCwzNDEuNzkyNDU0TDc0My42NTIyMzcsMzQzLjQwMDM5OEw3NDQuMTMxMDQxLDM0Ni4zNDMwOTNMNzQxLjIyMDIxMiwzNDguMzM3NDEzWk03MzguMzU0OTg0LDM0MS4xMTMzN0w3MzguMzU0OTg0LDM0MS4xMTMzN0w3MzguMzU0OTg0LDM0MS4xMTMzN1pNNzM5LjA3Njk5MSwzNDYuMDE5MTYyTDczOS4wNzY5OTEsMzQ2LjAxOTE2Mkw3MzkuMDc2OTkxLDM0Ni4wMTkxNjJaTTczNC4yMDUzNDIsMzI5Ljc5NTMxM0w3MzQuODEzMzQ4LDMyOC4yNzcxMzNMNzM1LjgzMTc1OCwzMjkuNDEyODQxWk03MzYuMDUyMTYxLDMzNi42MDU2NjFMNzM2LjA1MjE2MSwzMzYuNjA1NjYxTDczNi4wNTIxNjEsMzM2LjYwNTY2MVpNNzM4LjY1ODk4NywzNDUuOTQ4OTEyTDczOC42NTg5ODcsMzQ1Ljk0ODkxMkw3MzguNjU4OTg3LDM0NS45NDg5MTJaTTczOC43MTIxODcsMzQ2LjI2MTEzNUw3MzguNzEyMTg3LDM0Ni4yNjExMzVMNzM4LjcxMjE4NywzNDYuMjYxMTM1Wk03MzUuNTEyNTU1LDMzOC4zMTUwNzhMNzM1LjUxMjU1NSwzMzguMzE1MDc4TDczNS41MTI1NTUsMzM4LjMxNTA3OFpNNzMyLjY3NzcyNywzMzAuMzUzNDExTDczMi42Nzc3MjcsMzMwLjM1MzQxMUw3MzIuNjc3NzI3LDMzMC4zNTM0MTFaTTczNC42NzY1NDcsMzM3LjU4MTM1Nkw3MzQuNjc2NTQ3LDMzNy41ODEzNTZMNzM0LjY3NjU0NywzMzcuNTgxMzU2Wk03MzUuNTEyNTU1LDM0Ni40MDE2MzVMNzM1LjUxMjU1NSwzNDYuNDAxNjM1TDczNS41MTI1NTUsMzQ2LjQwMTYzNVpNNzM1Ljc0MDU1NywzNDguNDYyMzAyTDczNS43NDA1NTcsMzQ4LjQ2MjMwMkw3MzUuNzQwNTU3LDM0OC40NjIzMDJaTTczNS41MjAxNTUsMzQ4LjI5ODM4NUw3MzUuNTIwMTU1LDM0OC4yOTgzODVMNzM1LjUyMDE1NSwzNDguMjk4Mzg1Wk03MzUuMzMwMTUzLDM0OC45MDMzMTZMNzM1LjMzMDE1MywzNDguOTAzMzE2TDczNS4zMzAxNTMsMzQ4LjkwMzMxNlpNNzI4LjY1NzI4NywzMjcuMTI5NzE2TDcyOC42NTcyODcsMzI3LjEyOTcxNkw3MjguNjU3Mjg3LDMyNy4xMjk3MTZaTTcyOC4wNzk2ODEsMzI1LjY2NjE3NEw3MjguMDc5NjgxLDMyNS42NjYxNzRMNzI4LjA3OTY4MSwzMjUuNjY2MTc0Wk03MzMuMjAyMTMyLDM0My41MjkxOUw3MzMuMjAyMTMyLDM0My41MjkxOUw3MzMuMjAyMTMyLDM0My41MjkxOVpNNzM0LjcyOTc0NywzNDguODM2OTY4TDczNC43Mjk3NDcsMzQ4LjgzNjk2OEw3MzQuNzI5NzQ3LDM0OC44MzY5NjhaTTcyOS4yNzI4OTMsMzMwLjMyMjE4OEw3MjkuMjcyODkzLDMzMC4zMjIxODhMNzI5LjI3Mjg5MywzMzAuMzIyMTg4Wk03MjguMDE4ODgsMzI2LjMzNzQ1Mkw3MjguMDE4ODgsMzI2LjMzNzQ1Mkw3MjguMDE4ODgsMzI2LjMzNzQ1MlpNNzI4LjA3MjA4MSwzMjcuMzc5NDk0TDcyOC4wNzIwODEsMzI3LjM3OTQ5NEw3MjguMDcyMDgxLDMyNy4zNzk0OTRaTTczMy4xNDg5MzEsMzQ1LjE1NjY0OEw3MzMuMTQ4OTMxLDM0NS4xNTY2NDhMNzMzLjE0ODkzMSwzNDUuMTU2NjQ4Wk03MjguNTczNjg2LDMyOS42MzUyOTlMNzI4LjU3MzY4NiwzMjkuNjM1Mjk5TDcyOC41NzM2ODYsMzI5LjYzNTI5OVpNNzI2Ljk1NDg3LDMyNC44ODk1MjFMNzI2Ljk1NDg3LDMyNC44ODk1MjFMNzI2Ljk1NDg3LDMyNC44ODk1MjFaTTczMS40MzEzMTQsMzQwLjQzNDI4N0w3MzEuNDMxMzE0LDM0MC40MzQyODdMNzMxLjQzMTMxNCwzNDAuNDM0Mjg3Wk03MjcuNDg2ODc1LDMyNi44MDk2ODhMNzI3LjQ4Njg3NSwzMjYuODA5Njg4TDcyNy40ODY4NzUsMzI2LjgwOTY4OFpNNzMwLjg2ODkwOSwzNDEuNTk3MzE1TDczMC44Njg5MDksMzQxLjU5NzMxNUw3MzAuODY4OTA5LDM0MS41OTczMTVaTTcyOC4wOTQ4ODEsMzQwLjAwODg4NEw3MjguMDk0ODgxLDM0MC4wMDg4ODRMNzI4LjA5NDg4MSwzNDAuMDA4ODg0Wk03MjcuOTgwODgsMzM5LjcyNzg4NEw3MjcuOTgwODgsMzM5LjcyNzg4NEw3MjcuOTgwODgsMzM5LjcyNzg4NFpNNzI3LjkyMDA3OSwzMzkuOTY5ODU2TDcyNy45MjAwNzksMzM5Ljk2OTg1Nkw3MjcuOTIwMDc5LDMzOS45Njk4NTZaTTcyNS4wNzAwNTEsMzMwLjk1MDUzNkw3MjUuMDcwMDUxLDMzMC45NTA1MzZMNzI1LjA3MDA1MSwzMzAuOTUwNTM2Wk03MjAuNTMyODA1LDMxNy45MzA4NjhMNzIwLjUzMjgwNSwzMTcuOTMwODY4TDcyMC41MzI4MDUsMzE3LjkzMDg2OFpNNzIwLjE1MjgwMiwzMTYuODM0MTg3TDcyMC4xNTI4MDIsMzE2LjgzNDE4N0w3MjAuMTUyODAyLDMxNi44MzQxODdaTTcyMC40OTQ4MDUsMzE4LjM4NzQ5M0w3MjAuNDk0ODA1LDMxOC4zODc0OTNMNzIwLjQ5NDgwNSwzMTguMzg3NDkzWk03MjMuMTI0NDMxLDMyOC4yNzMyM0w3MjMuMTI0NDMxLDMyOC4yNzMyM0w3MjMuMTI0NDMxLDMyOC4yNzMyM1pNNzIwLjI4MjAwMywzMjEuMDEwMTZMNzIwLjcwNzYwNywzMTkuODM1NDIzTDcyMi4yOTYwMjMsMzIwLjcwNTc0M1pNNzE5LjM2OTk5NCwzMTguMDA1MDJMNzE5LjM2OTk5NCwzMTguMDA1MDJMNzE5LjM2OTk5NCwzMTguMDA1MDJaTTcxOC45MDYzODksMzE4LjcxMTQyM0w3MTguOTA2Mzg5LDMxOC43MTE0MjNMNzE4LjkwNjM4OSwzMTguNzExNDIzWk03MTcuMzQwNzczLDMxNC42OTU0NjRMNzE3LjM0MDc3MywzMTQuNjk1NDY0TDcxNy4zNDA3NzMsMzE0LjY5NTQ2NFpNNzE4LjYwMjM4NiwzMTkuMzkwNTA3TDcxOC42MDIzODYsMzE5LjM5MDUwN0w3MTguNjAyMzg2LDMxOS4zOTA1MDdaTTcyNi42MjgwNjYsMzUwLjE5OTAzOEw3MjYuNjI4MDY2LDM1MC4xOTkwMzhMNzI2LjYyODA2NiwzNTAuMTk5MDM4Wk03MjAuMzA0ODAzLDMyOC4xNDgzNDFMNzIwLjMwNDgwMywzMjguMTQ4MzQxTDcyMC4zMDQ4MDMsMzI4LjE0ODM0MVpNNzIwLjAyMzYsMzI3LjY0ODc4NUw3MjAuMDIzNiwzMjcuNjQ4Nzg1TDcyMC4wMjM2LDMyNy42NDg3ODVaTTcyNi43NDk2NjcsMzUyLjc2NzA2Nkw3MjYuNzQ5NjY3LDM1Mi43NjcwNjZMNzI2Ljc0OTY2NywzNTIuNzY3MDY2Wk03MjYuNzg3NjY4LDM1My41MzIwMUw3MjYuNzg3NjY4LDM1My41MzIwMUw3MjYuNzg3NjY4LDM1My41MzIwMVpNNzE3LjA1MTk3MSwzMTkuNTAzNjg3TDcxNy4wNTE5NzEsMzE5LjUwMzY4N0w3MTcuMDUxOTcxLDMxOS41MDM2ODdaTTcyNi4yNDA0NjIsMzU1LjI5NjA2Nkw3MjYuMjQwNDYyLDM1NS4yOTYwNjZMNzI2LjI0MDQ2MiwzNTUuMjk2MDY2Wk03MjUuOTg5NjYsMzU0LjQ1MzA2Nkw3MjcuMTIyMDcxLDM1My42NzY0MTNMNzI4LjkwODA4OSwzNTQuNjM2NDk3TDcyOC4yMzE2ODIsMzU1LjUyNjMzTDcyOS41NTQwOTYsMzU3LjUzNjI2MVpNNzE3LjU2MTE3NiwzMjcuMDA4NzNMNzE3LjU2MTE3NiwzMjcuMDA4NzNMNzE3LjU2MTE3NiwzMjcuMDA4NzNaTTcyNC44ODc2NDksMzUzLjQ4NTE3N0w3MjQuODg3NjQ5LDM1My40ODUxNzdMNzI0Ljg4NzY0OSwzNTMuNDg1MTc3Wk03MTIuODQ5MTI4LDMxMS4yMzc2MDNMNzEyLjg0OTEyOCwzMTEuMjM3NjAzTDcxMi44NDkxMjgsMzExLjIzNzYwM1pNNzE3LjAxMzk3LDMyNi43MDA0MUw3MTcuMDEzOTcsMzI2LjcwMDQxTDcxNy4wMTM5NywzMjYuNzAwNDFaTTcyMy42OTQ0MzcsMzUxLjU3NjcxOUw3MjMuNjk0NDM3LDM1MS41NzY3MTlMNzIzLjY5NDQzNywzNTEuNTc2NzE5Wk03MTcuMjAzOTcyLDMyOC4xNjM5NTJMNzE3LjIwMzk3MiwzMjguMTYzOTUyTDcxNy4yMDM5NzIsMzI4LjE2Mzk1MlpNNzEyLjQ3NjcyNSwzMTEuMTk0NjcyTDcxMi40NzY3MjUsMzExLjE5NDY3Mkw3MTIuNDc2NzI1LDMxMS4xOTQ2NzJaTTcxNi45NTMxNywzMjcuNzAzNDI0TDcxNi45NTMxNywzMjcuNzAzNDI0TDcxNi45NTMxNywzMjcuNzAzNDI0Wk03MTcuMDA2MzcsMzI3LjkwNjM2OUw3MTcuMDA2MzcsMzI3LjkwNjM2OUw3MTcuMDA2MzcsMzI3LjkwNjM2OVpNNzE2LjQ1OTE2NSwzMjcuMjg1ODI3TDcxNi40NTkxNjUsMzI3LjI4NTgyN0w3MTYuNDU5MTY1LDMyNy4yODU4MjdaTTcxNS45OTU1NiwzMjYuODYwNDI0TDcxNS45OTU1NiwzMjYuODYwNDI0TDcxNS45OTU1NiwzMjYuODYwNDI0Wk03MTUuNjE1NTU2LDMyNS41MzczODJMNzE1LjYxNTU1NiwzMjUuNTM3MzgyTDcxNS42MTU1NTYsMzI1LjUzNzM4MlpNNzE1Ljc4Mjc1OCwzMjYuMjgyODEzTDcxNS43ODI3NTgsMzI2LjI4MjgxM0w3MTUuNzgyNzU4LDMyNi4yODI4MTNaTTcxNS44NTExNTksMzI2LjY3Njk5NEw3MTUuODUxMTU5LDMyNi42NzY5OTRMNzE1Ljg1MTE1OSwzMjYuNjc2OTk0Wk03MTUuOTU3NTYsMzI3LjE0OTIzTDcxNS45NTc1NiwzMjcuMTQ5MjNMNzE1Ljk1NzU2LDMyNy4xNDkyM1pNNzIyLjEzNjQyMSwzNDkuNzc3NTM4TDcyMi4xMzY0MjEsMzQ5Ljc3NzUzOEw3MjIuMTM2NDIxLDM0OS43Nzc1MzhaTTcxNS40Nzg3NTUsMzI2LjEyMjc5OUw3MTUuNDc4NzU1LDMyNi4xMjI3OTlMNzE1LjQ3ODc1NSwzMjYuMTIyNzk5Wk03MTUuMzI2NzUzLDMyNi40NzQwNDlMNzE1LjMyNjc1MywzMjYuNDc0MDQ5TDcxNS4zMjY3NTMsMzI2LjQ3NDA0OVpNNzE1LjA5MTE1MSwzMjYuMjI4MTc0TDcxNS4wOTExNTEsMzI2LjIyODE3NEw3MTUuMDkxMTUxLDMyNi4yMjgxNzRaTTcxNC4yMTcxNDIsMzIzLjYwNTUwN0w3MTQuODc4MzQ5LDMyMS4xOTM1OUw3MTcuOTc5MTgsMzIwLjE1MTU0OEw3MTkuMjkzOTkzLDMyMC43MDE4NEw3MTkuODE4Mzk4LDMyMy44OTgyMTVMNzE3LjQyNDM3NCwzMjUuNjU0NDY2Wk03MTUuODgxNTU5LDMzMC4yNzUzNTVMNzE1Ljg4MTU1OSwzMzAuMjc1MzU1TDcxNS44ODE1NTksMzMwLjI3NTM1NVpNNzE1LjY0NTk1NiwzMjkuNDUxODY5TDcxNS42NDU5NTYsMzI5LjQ1MTg2OUw3MTUuNjQ1OTU2LDMyOS40NTE4NjlaTTcxMi44NzE5MjksMzIxLjQyNzc1N0w3MTIuODcxOTI5LDMyMS40Mjc3NTdMNzEyLjg3MTkyOSwzMjEuNDI3NzU3Wk03MTcuODgwMzc5LDM0My41OTk0NEw3MTcuODgwMzc5LDM0My41OTk0NEw3MTcuODgwMzc5LDM0My41OTk0NFpNNzE4LjgxNTE4OCwzNTAuMzY2ODU3TDcxOC44MTUxODgsMzUwLjM2Njg1N0w3MTguODE1MTg4LDM1MC4zNjY4NTdaTTcwNS43OTYyNTgsMzAzLjE2NjY1OEw3MDUuNzk2MjU4LDMwMy4xNjY2NThMNzA1Ljc5NjI1OCwzMDMuMTY2NjU4Wk03MTAuNTk5NTA2LDMyMi4xMDI5MzhMNzEwLjU5OTUwNiwzMjIuMTAyOTM4TDcxMC41OTk1MDYsMzIyLjEwMjkzOFpNNzE2LjY0MTU2NiwzNDUuMjA3Mzg1TDcxNi42NDE1NjYsMzQ1LjIwNzM4NUw3MTYuNjQxNTY2LDM0NS4yMDczODVaTTcxNi4xMzIzNjEsMzQ2Ljg1NDM1N0w3MTYuMTMyMzYxLDM0Ni44NTQzNTdMNzE2LjEzMjM2MSwzNDYuODU0MzU3Wk03MTQuMjkzMTQzLDM0My4wMjk2MzRMNzE1LjEzNjc1MSwzNDEuOTAxNzMxTDcxNi41NzMxNjYsMzQyLjY5MDA5M0w3MTUuOTk1NTYsMzQ0LjY1MzE5Wk03MTEuOTUyMzIsMzM1LjE3MzM0Mkw3MTEuOTUyMzIsMzM1LjE3MzM0Mkw3MTEuOTUyMzIsMzM1LjE3MzM0MlpNNzAxLjE3NTQxMiwyOTQuODc3MTU3TDcwMS4xNzU0MTIsMjk0Ljg3NzE1N0w3MDEuMTc1NDEyLDI5NC44NzcxNTdaTTcxMS41MzQzMTUsMzM0LjgzMzhMNzExLjUzNDMxNSwzMzQuODMzOEw3MTEuNTM0MzE1LDMzNC44MzM4Wk03MTEuMzUxOTE0LDMzNS40OTMzN0w3MTEuMzUxOTE0LDMzNS40OTMzN0w3MTEuMzUxOTE0LDMzNS40OTMzN1pcIjtcblxuICB2YXIgc3BlY2llcyA9IHtcbiAgICBCOiBcIkhhbGlidXRcIixcbiAgICBDOiBcIlNhYmxlZmlzaFwiLFxuICAgIEQ6IFwiRHVuZ2VuZXNzIGNyYWJcIixcbiAgICBFOiBcIkhhaXIgQ3JhYlwiLFxuICAgIEY6IFwiRnJlc2h3YXRlciBmaXNoXCIsXG4gICAgRzogXCJIZXJyaW5nIHJvZVwiLFxuICAgIEg6IFwiSGVycmluZyAoZm9vZC9iYWl0KVwiLFxuICAgIEk6IFwiTGluZyBjb2RcIixcbiAgICBKOiBcIkdlb2R1Y2sgY2xhbXNcIixcbiAgICBLOiBcIktpbmcgY3JhYlwiLFxuICAgIEw6IFwiSGVycmluZyBzcGF3biBvbiBrZWxwXCIsXG4gICAgTTogXCJNaXNjLiBzYWx0d2F0ZXIgZmluZmlzaFwiLFxuICAgIE46IFwiU25haWxzXCIsXG4gICAgTzogXCJPY3RvcHVzL3NxdWlkXCIsXG4gICAgUDogXCJTaHJpbXBcIixcbiAgICBROiBcIlNlYSBjdWN1bWJlclwiLFxuICAgIFI6IFwiQ2xhbXNcIixcbiAgICBTOiBcIlNhbG1vblwiLFxuICAgIFQ6IFwiVGFubmVyIGNyYWJcIixcbiAgICBUQjogXCJUYW5uZXIgQmFpcmRpIGNyYWJcIixcbiAgICBVOiBcIlNlYSB1cmNoaW5cIixcbiAgICBXOiBcIlNjYWxsb3BzXCIsXG4gICAgWTogXCJSb2NrZmlzaFwiXG4gIH07XG5cbiAgY29uc3Qgc2NhbGVGYWN0b3IgPSAxMDAgLyA3NjA7XG5cbiAgdmFyIGdlYXIgPSB7XCIxXCI6XCJQVVJTRSBTRUlORVwiLFwiMlwiOlwiQmVhY2ggc2VpbmVcIixcIjNcIjpcIkRyaWZ0IGdpbGxuZXRcIixcIjRcIjpcIlNFVCBHSUxMTkVUXCIsXCI1XCI6XCJIQU5EIFRST0xMXCIsXCI2XCI6XCJMT05HTElORSBWRVNTRUwgVU5ERVIgNjAnXCIsXCI3XCI6XCJPVFRFUiBUUkFXTFwiLFwiOFwiOlwiRklTSCBXSEVFTFwiLFwiOVwiOlwiUE9UIEdFQVIgVkVTU0VMIFVOREVSIDYwJ1wiLFwiMTBcIjpcIlJJTkcgTkVUXCIsXCIxMVwiOlwiRElWSU5HIEdFQVJcIixcIjEyXCI6XCJESVZFL0hBTkQgUElDS1wiLFwiMTdcIjpcIkJFQU0gVFJBV0xcIixcIjE4XCI6XCJTSE9WRUxcIixcIjIxXCI6XCJQT1VORFwiLFwiMjNcIjpcIk1FQ0hBTklDQUwgRElHR0VSXCIsXCIyNVwiOlwiRElOR0xFQkFSIFRST0xMXCIsXCIyNlwiOlwiTUVDSEFOSUNBTCBKSUdcIixcIjM0XCI6XCJHSUxMTkVUXCIsXCIzN1wiOlwiUEFJUiBUUkFXTFwiLFwiMTlcIjpcIlBvdCBnZWFyXCIsXCIyOVwiOlwiUG90IGdlYXJcIixcIjM5XCI6XCJQb3QgZ2VhclwiLFwiNDlcIjpcIlBvdCBnZWFyXCIsXCI1OVwiOlwiUG90IGdlYXJcIixcIjY5XCI6XCJQb3QgZ2VhclwiLFwiNjFcIjpcIkxPTkdMSU5FIFZFU1NFTCA2MCcgT1IgT1ZFUlwiLFwiNzdcIjpcIkdJTExORVRcIixcIjkxXCI6XCJQT1QgR0VBUiBWRVNTRUwgNjAnIE9SIE9WRVJcIn07XG5cbiAgdmFyIHJlZ2lvbnMgPSB7XCJBXCI6XCJTT1VUSEVBU1RcIixcIkJcIjpcIlNUQVRFV0lERVwiLFwiQ1wiOlwiU291dGhlcm4gc291dGhlYXN0XCIsXCJEXCI6XCJZQUtVVEFUXCIsXCJFXCI6XCJQUklOQ0UgV0lMTElBTSBTT1VORFwiLFwiSlwiOlwiV0VTVFdBUkRcIixcIkxcIjpcIkNISUdOSUtcIixcIk1cIjpcIkFMQVNLQSBQRU5JTlNVTEFcIixcIlBcIjpcIlVwcGVyIFl1a29uXCIsXCJRXCI6XCJCRVJJTkcgU0VBXCIsXCJUXCI6XCJCUklTVE9MIEJBWVwiLFwiVVwiOlwiTnVuaXZhayBJc2xhbmRcIixcIldcIjpcIkdvb2RuZXdzIEJheVwiLFwiWFwiOlwiS09UWkVCVUVcIixcIllcIjpcIkNhcGUgUm9tYW56b2ZcIixcIkhcIjpcIkNPT0sgSU5MRVRcIixcIlNcIjpcIlNFQ1VSSVRZIENPVkVcIixcIlZcIjpcIkNBUEUgQVZJTk9GXCIsXCJaXCI6XCJOT1JUT04gU09VTkRcIixcIktcIjpcIktPRElBS1wiLFwiT1wiOlwiRFVUQ0ggSEFSQk9SXCIsXCJPQVwiOlwiQUxFVVRJQU4gQ0RRQVBJQ0RBXCIsXCJPQlwiOlwiQUxFVVRJQU4gQ0RRQkJFRENcIixcIk9DXCI6XCJBTEVVVElBTiBDRFFDQlNGQVwiLFwiT0RcIjpcIkFMRVVUSUFOIENEUUNWUkZcIixcIk9FXCI6XCJBTEVVVElBTiBDRFFOU0VEQ1wiLFwiT0ZcIjpcIkFMRVVUSUFOIENEUVlERkRBXCIsXCJPR1wiOlwiQUxFVVRJQU4gSVNMQU5EUyBBQ0FBQ0RDXCIsXCJRQVwiOlwiQkVSSU5HIFNFQSBDRFFBUElDREFcIixcIlFCXCI6XCJCRVJJTkcgU0VBIENEUUJCRURDXCIsXCJRQ1wiOlwiQkVSSU5HIFNFQSBDRFFDQlNGQVwiLFwiUURcIjpcIkJFUklORyBTRUEgQ0RRQ1ZSRlwiLFwiUUVcIjpcIkJFUklORyBTRUEgQ0RRTlNFRENcIixcIlFGXCI6XCJCRVJJTkcgU0VBIENEUVlERkRBXCIsXCJUQVwiOlwiQlJJU1RPTCBCQVkgQ0RRQVBJQ0RBXCIsXCJUQlwiOlwiQlJJU1RPTCBCQVkgQ0RRQkJFRENcIixcIlRDXCI6XCJCUklTVE9MIEJBWSBDRFFDQlNGQVwiLFwiVERcIjpcIkJSSVNUT0wgQkFZIENEUUNWUkZcIixcIlRFXCI6XCJCUklTVE9MIEJBWSBDRFFOU0VEQ1wiLFwiVEZcIjpcIkJSSVNUT0wgQkFZIENEUVlERkRBXCIsXCJaRVwiOlwiTk9SVE9OIFNPVU5EIENEUU5TRURDXCIsXCJaRlwiOlwiTk9SVE9OIFNPVU5EIENEUVlERkRBXCIsXCJHXCI6XCJHT0FcIixcIkFCXCI6XCJTVEFURVdJREVcIixcIkFHXCI6XCJHT0FcIixcIkJCXCI6XCJTVEFURVdJREVcIixcIkJHXCI6XCJHT0FcIixcIkZCXCI6XCJTVEFURVdJREVcIixcIkZHXCI6XCJHT0FcIixcIkdCXCI6XCJTVEFURVdJREVcIixcIkdHXCI6XCJHT0FcIixcIkhCXCI6XCJTVEFURVdJREVcIixcIkhHXCI6XCJHT0FcIixcIklCXCI6XCJTVEFURVdJREVcIixcIklHXCI6XCJHT0FcIixcIkZcIjpcIkFUS0EvQU1MSUEgSVNMQU5EU1wiLFwiUlwiOlwiQURBS1wiLFwiQUZXXCI6XCJGRURFUkFMIFdBVEVSU1wiLFwiQVNXXCI6XCJTVEFURSBXQVRFUlNcIixcIkJGV1wiOlwiRkVERVJBTCBXQVRFUlNcIixcIkJTV1wiOlwiU1RBVEUgV0FURVJTXCJ9O1xuXG4gIHZhciBmaXNoTm9kZXMgPSBudWxsLFxuICAgICAgZmlzaExpbmtzID0gbnVsbCxcbiAgICAgIG1hcmdpbiA9IHsgLy8gZXhwcmVzc2VkIGFzIHBlcmNlbnRhZ2VzXG4gICAgICAgIHRvcDowLFxuICAgICAgICByaWdodDowLFxuICAgICAgICBib3R0b206MCxcbiAgICAgICAgbGVmdDowXG4gICAgICB9LFxuICAgIC8vICB3aWR0aCA9IDEwMCAtIG1hcmdpbi5yaWdodCAtIG1hcmdpbi5sZWZ0LFxuICAgIC8vICBoZWlnaHQgPSA1MiAtIG1hcmdpbi50b3AgLSBtYXJnaW4uYm90dG9tLFxuICAgICAgdGhyZXNob2xkID0gMTA7XG5cbiAgdmFyIGNvbG9ycyA9IFsnIzMwNjUzYScsJyM3ZDRmMDAnLCcjNGU1OTdkJywnIzJhNjE2ZScsJyNhMzMwMWUnLCcjODE0NDdmJywnIzAwNWZhOSddO1xuXG4gIHZhciByU2NhbGUgPSBkMy5zY2FsZVNxcnQoKS5yYW5nZShbNSwxMF0pOyAvLyBwZXJjZW50YWdlc1xuICAvL3ZhciBzdHJlbmd0aFNjYWxlID0gZDMuc2NhbGVMaW5lYXIoKS5yYW5nZShbMSwxMF0pO1xuICB2YXIgc2ltdWxhdGlvbiA9IGQzLmZvcmNlU2ltdWxhdGlvbigpXG4gICAgXG4gICAgLmZvcmNlKFwibGlua1wiLCBkMy5mb3JjZUxpbmsoKS5zdHJlbmd0aCgwKSk7XG4gICAgLyouZm9yY2UoXCJjaGFyZ2VcIiwgZDMuZm9yY2VNYW55Qm9keSgpLnN0cmVuZ3RoKDEuNSkpXG4gICAgLmZvcmNlKFwiY2VudGVyXCIsIGQzLmZvcmNlQ2VudGVyKHdpZHRoIC8gMiwgaGVpZ2h0IC8gMikpXG4gICAgLmZvcmNlKFwiY29sbGlkZVwiLCBkMy5mb3JjZUNvbGxpZGUoKS5yYWRpdXMoMikuaXRlcmF0aW9ucygyKSk7Ly8ucmFkaXVzKGZ1bmN0aW9uKGQpIHsgcmV0dXJuIHJTY2FsZShkLmNvdW50KTsgfSkuaXRlcmF0aW9ucygyKSk7Ki9cblxuICAgIHdpbmRvdy5zaW11bGF0aW9uID0gc2ltdWxhdGlvbjtcblxuICBkMy5jc3YoJ2FkamFjZW5jeS1jeC5jc3YnLCBmdW5jdGlvbihkYXRhKXtcbiAgICBjb25zb2xlLmxvZyhkYXRhKTtcbiAgICBmaXNoTGlua3MgPSBkYXRhO1xuICAgIGdvR2F0ZSgpO1xuICB9KTtcbiAgZDMuY3N2KCdmaXNoZXJpZXMtbm9kZXMtd2l0aC1jb29yZHMuY3N2JywgZnVuY3Rpb24oZGF0YSl7XG4gICAgY29uc29sZS5sb2coZGF0YSk7XG4gICAgZGF0YS5mb3JFYWNoKGZ1bmN0aW9uKGVhY2gpe1xuICAgICAgZm9yICh2YXIga2V5IGluIGVhY2gpe1xuICAgICAgICBpZiAoIGVhY2guaGFzT3duUHJvcGVydHkoa2V5KSApe1xuICAgICAgICAgIGlmICggIWlzTmFOKCtlYWNoW2tleV0pICl7XG4gICAgICAgICAgICBlYWNoW2tleV0gPSArZWFjaFtrZXldO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIGZpc2hOb2RlcyA9IGRhdGE7XG4gICAgZ29HYXRlKCk7XG4gIH0pO1xuXG4gIGZ1bmN0aW9uIGdvR2F0ZSgpe1xuICAgIGlmICggZmlzaE5vZGVzICE9PSBudWxsICYmIGZpc2hMaW5rcyAhPT0gbnVsbCApe1xuICAgICAgZ28oKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuXG4gIHZhciBuZXdMaW5rcyA9IFtdLFxuICBuZXR3b3JrID0ge307XG4gIFxuICBmdW5jdGlvbiBnbygpe1xuICAgIGZ1bmN0aW9uIGlzTWF0Y2goa2V5KXtcbiAgICAgIHJldHVybiBmaXNoTm9kZXMuZmluZChmdW5jdGlvbihvYmope1xuICAgICAgICByZXR1cm4gb2JqLmlkID09PSBrZXk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgZmlzaExpbmtzLmZvckVhY2goZnVuY3Rpb24oZWFjaCxpKXtcbiAgICAgIGZvciAodmFyIGtleSBpbiBlYWNoKXtcbiAgICAgICAgaWYgKCBlYWNoLmhhc093blByb3BlcnR5KGtleSkgKXtcbiAgICAgICAgICBsZXQgbWF0Y2ggPSBpc01hdGNoKGtleSk7XG4gICAgICAgICAgbGV0IGluZGV4ID0gZmlzaE5vZGVzLmluZGV4T2YobWF0Y2gpO1xuICAgICAgICAgIC8vaWYgKGluZGV4ICE9PSBpICYmIGVhY2hba2V5XSAhPT0gXCIwXCIgKXsgLy8gaWYgc291cmNlIGFuZCB0YXJnZXQgYXJlIG5vdCB0aGUgc2FtZSBhbmQgbm9cbiAgICAgICAgICAgIG5ld0xpbmtzLnB1c2goe1xuICAgICAgICAgICAgICBzb3VyY2U6IGksXG4gICAgICAgICAgICAgIHRhcmdldDogaW5kZXgsIFxuICAgICAgICAgICAgICB2YWx1ZTogK2VhY2hba2V5XVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAvLyB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTsgLy8gZW5kIGZvckVhY2hcbiAgICBuZXR3b3JrLm5vZGVzID0gZmlzaE5vZGVzO1xuICAgIG5ldHdvcmsubGlua3MgPSBuZXdMaW5rcztcbiAgICBjb25zb2xlLmxvZyhuZXR3b3JrKTtcbiAgICByZW5kZXIobmV0d29yayk7IC8vIFRPIERPIDogZm9yIHRoZSBmb3JjZSBkaXJlY3RlZCBncmFwaCwgZmlsdGVyXG4gIH0gLy8gZW5kIGdvKClcblxuICBmdW5jdGlvbiByZW5kZXIobmV0d29yaykge1xuICAgLyogaWYgKHRydWUpe1xuICAgICAgcmV0dXJuO1xuICAgIH0qL1xuICAgIG5ldHdvcmsubGlua3MuZm9yRWFjaChmdW5jdGlvbihsaW5rKSB7XG4gICAgICBpZiAoIGxpbmsudGFyZ2V0ID09PSBsaW5rLnNvdXJjZSApIHtcbiAgICAgICAgbmV0d29yay5ub2Rlc1tsaW5rLnRhcmdldF0uY291bnQgPSBsaW5rLnZhbHVlO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHNpbXVsYXRpb25cbiAgICAgICAgLm5vZGVzKG5ldHdvcmsubm9kZXMpXG4gICAgICAgIC5vbihcInRpY2tcIiwgdGlja2VkKTtcblxuICAgIHZhciBsaW5rRm9yY2UgPSBzaW11bGF0aW9uLmZvcmNlKFwibGlua1wiKVxuICAgICAgICAubGlua3MobmV0d29yay5saW5rcy5maWx0ZXIoZCA9PiBkLnZhbHVlICE9PSAwKSk7XG5cbiAgICByU2NhbGUuZG9tYWluKGQzLmV4dGVudChuZXR3b3JrLm5vZGVzLCBkID0+IGQuY291bnQpKTtcbiAgICAvL29wdGlvbnMgMeKAkzNcbiAgICAvL3N0cmVuZ3RoU2NhbGUuZG9tYWluKFswLCBkMy5tZWFuKG5ldHdvcmsubGlua3MsIGQgPT4gZC52YWx1ZSkgKyBkMy5kZXZpYXRpb24obmV0d29yay5saW5rcywgZCA9PiBkLnZhbHVlKSBdKTtcbiAgICAvL29wdGlvbiA0XG4gICAgLy9zdHJlbmd0aFNjYWxlLmRvbWFpbihbMCwxXSk7XG5cbiAgICBcbiAgIC8qIGZ1bmN0aW9uIGNvdW50KG5vZGUpe1xuICAgICAgdmFyIGkgPSAwO1xuICAgICAgbmV0d29yay5saW5rcy5mb3JFYWNoKGxpbmsgPT4ge1xuICAgICAgICBpZiAoIGxpbmsuc291cmNlID09PSBub2RlIHx8IGxpbmsudGFyZ2V0ID09PSBub2RlICl7XG4gICAgICAgICAgaSsrO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBpO1xuICAgIH0qL1xuICAgIFxuXG4gICAgICAgIGxpbmtGb3JjZVxuICAgICAgICAuc3RyZW5ndGgoMCk7LypkID0+IHtcbiAgICAgICAgICAvKiBkMydzIGRlZmF1bHQgbGluayBzdHJlbmd0aCBpczpcblxuICAgICAgICAgICAgZnVuY3Rpb24gc3RyZW5ndGgobGluaykge1xuICAgICAgICAgICAgICByZXR1cm4gMSAvIE1hdGgubWluKGNvdW50KGxpbmsuc291cmNlKSwgY291bnQobGluay50YXJnZXQpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIFwiVGhpcyBkZWZhdWx0IHdhcyBjaG9zZW4gYmVjYXVzZSBpdCBhdXRvbWF0aWNhbGx5IHJlZHVjZXMgdGhlXG4gICAgICAgICAgc3RyZW5ndGggb2YgbGlua3MgY29ubmVjdGVkIHRvIGhlYXZpbHktY29ubmVjdGVkIG5vZGVzLCBpbXByb3Zpbmcgc3RhYmlsaXR5LlwiXG4gICAgICAgICAgaHR0cHM6Ly9naXRodWIuY29tL2QzL2QzLWZvcmNlXG5cbiAgICAgICAgICBUaGUgcmV0dXJuIHZhbHVlcyBiZWxvdyByZXByb2R1Y2UgdGhhdCBkZWZhdWx0IGJ1dCB3aXRoIGEgZmFjdG9yIGJhc2VkIG9uIHRoZSB2YWx1ZSAoZC52YWx1ZSlcbiAgICAgICAgICBvZiB0aGUgbGluaywgaGVyZSByZXByZXNlbnRpbmcgdGhlIG51bWJlciBvZiBwZXJtaXRzIHNoYXJlZCBiZXR3ZWVuIGZpc2hlcmllcy5cblxuICAgICAgICAgIEZvciBvcHRpb25zIDHigJMzOiB0aGUgZG9tYWluIG9mIHRoZSBzY2FsZSBmdW5jdGlvbiBpcyBiZXR3ZWVuIDAgYW5kIDEgc3RkZXYgYWJvdmUgdGhlIG1lYW4gdmFsdWUsIHdpdGhcbiAgICAgICAgICB0aGUgcmFuZ2UgYmVpbmcgMeKAkzEwLlxuXG4gICAgICAgICAgRm9yIG9wdGlvbiA0IHRoZSBkb21haW4gaW4gMCB0byAxIGFuZCB0aGUgcmFuZ2UgaXMgMCB0byAxMC5cblxuICAgICAgICAgIE9wdGlvbiAxOiBCYXNlZCBvbiBhYnNvbHV0ZSB2YWx1ZSBvZiBzaGFyZWQgcGVybWl0czsgdHJlYXRzIGFsbCBub2RlcyB0aGUgc2FtZSwgd2hldGhlciB0aGV5IGJlbG9uZyB0b1xuICAgICAgICAgIHRoZSBzYW1lIGNsdXN0ZXIgb3Igbm90LlxuXG4gICAgICAgICAgT3B0aW9uIDI6IHNhbWUgYXMgb3B0aW9uIG9uZSBidXQgYXBwbGllcyB0aGUgdmFsdWUgb25seSB0byBub2RlcyBvZiB0aGUgc2FtZSBjbHVzdGVyLiBOb2RlcyBvZiBkaWZmZXJlbnRcbiAgICAgICAgICBjbHVzdGVycyBnZXQgdGhlIGRlZmF1bHQgc3RyZW5ndGgsIHVuaW5mb3JtZWQgYnkgZC52YWx1ZS5cblxuICAgICAgICAgIE9wdGlvbiAzOiBzYW1lIGFzIG9wdGlvbiB0d28gYnV0IHdlYWtlbnMgdGhlIGZvcmNlIGJldHdlZW4gbm9kZXMgb2YgZGlmZmVyZW50IGNsdXN0ZXIgYnkgYSBmYWN0b3Igb2YgMS8xMHRoLlxuICAgICAgICAgIFRoYXQgc2VwYXJhdGVzIG91dCB0aGUgY2x1c3RlcnMgbW9yZS5cblxuICAgICAgICAgIE9wdGlvbiA0OiBTY2FsZXMgYnkgdGhlIHJlbGF0aXZlIHZhbHVlLCBudW1iZXIgb2Ygc2hhcmVkIHBlcm1pdHMgZGl2aWRlZCBieSB0aGUgbnVtYmVyIG9mIHBlcm1pdHMgaW4gdGhlIHNtYWxsZXJcbiAgICAgICAgICBvZiB0aGUgdHdvIG5vZGVzLiBTdGlsbCBkaXZpZGVkIGJ5IGNvdW50IG9mIGxpbmtzLiBUcmVhdHMgbm9kZXMgdGhlIHNhbWUgcmVnYXJkbGVzcyBvZiBjbHVzdGVyLlxuXG4gICAgICAgICAgKi9cbiAgICAgICAgICAvLyAxXG4gICAgICAgICAgLy9yZXR1cm4gc3RyZW5ndGhTY2FsZShkLnZhbHVlKSAvIE1hdGgubWluKGNvdW50KGQuc291cmNlKSwgY291bnQoZC50YXJnZXQpKTsgXG4gICAgICAgICAgLy8gMlxuICAgICAgICAgIC8vcmV0dXJuIGQudGFyZ2V0LmNsdXN0ZXIgPT09IGQuc291cmNlLmNsdXN0ZXIgPyAgc3RyZW5ndGhTY2FsZShkLnZhbHVlKSAvIE1hdGgubWluKGNvdW50KGQuc291cmNlKSwgY291bnQoZC50YXJnZXQpKSA6ICggMSAvIE1hdGgubWluKGNvdW50KGQuc291cmNlKSwgY291bnQoZC50YXJnZXQpKSApOyBcbiAgICAgICAgICAvLyAzXG4gICAgICAgICAgLy8gcmV0dXJuIGQudGFyZ2V0LmNsdXN0ZXIgPT09IGQuc291cmNlLmNsdXN0ZXIgPyAgc3RyZW5ndGhTY2FsZShkLnZhbHVlKSAvIE1hdGgubWluKGNvdW50KGQuc291cmNlKSwgY291bnQoZC50YXJnZXQpKSA6ICggMSAvIE1hdGgubWluKGNvdW50KGQuc291cmNlKSwgY291bnQoZC50YXJnZXQpKSApIC8gMTA7IFxuICAgICAgICAgIC8vNFxuICAgICAgICAgLyogcmV0dXJuIGQudGFyZ2V0LmNsdXN0ZXIgPT09IGQuc291cmNlLmNsdXN0ZXIgPyBzdHJlbmd0aFNjYWxlKGQudmFsdWUgLyBNYXRoLm1pbihkLnNvdXJjZS5jb3VudCwgZC50YXJnZXQuY291bnQpKSAvIE1hdGgubWluKGNvdW50KGQuc291cmNlKSwgY291bnQoZC50YXJnZXQpKSA6ICggc3RyZW5ndGhTY2FsZShkLnZhbHVlIC8gTWF0aC5taW4oZC5zb3VyY2UuY291bnQsIGQudGFyZ2V0LmNvdW50KSkgLyBNYXRoLm1pbihjb3VudChkLnNvdXJjZSksIGNvdW50KGQudGFyZ2V0KSkgKSAvIDIwOyBcbiAgICAgICAgICBcbiAgICAgICAgfSk7Ki9cbiAgICB2YXIgc3ZnID0gZDMuc2VsZWN0KCdib2R5JylcbiAgICAgIC5hcHBlbmQoJ3N2ZycpXG4gICAgICAuYXR0cignd2lkdGgnLCAnMTAwJScpXG4gICAgICAuYXR0cigneG1sbnMnLCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycpXG4gICAgICAuYXR0cigndmVyc2lvbicsJzEuMScpXG4gICAgICAuYXR0cigndmlld0JveCcsICcwIDAgMTAwIDUzJyk7XG5cbiAgICAgIHN2Z1xuICAgICAgICAuYXBwZW5kKCdnJylcbiAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsICdzY2FsZSgnICsgc2NhbGVGYWN0b3IgKyAnKScpXG4gICAgICAgIC5hcHBlbmQoJ3BhdGgnKVxuICAgICAgICAuYXR0cignZCcsIGFsYXNrYVBhdGgpXG4gICAgICAgIC5hdHRyKCdjbGFzcycsICdhbGFza2EnKTtcbiAgICAgIHN2Z1xuICAgICAgLmFwcGVuZCgnZycpXG4gICAgICAuYXR0cigndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZSgnICsgbWFyZ2luLmxlZnQgKyAnLCcgKyBtYXJnaW4udG9wICsgJyknKTtcblxuXG4gICAgdmFyIGxpbmsgPSBzdmcuYXBwZW5kKFwiZ1wiKVxuICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImxpbmtzXCIpXG4gICAgICAuc2VsZWN0QWxsKFwibGluZVwiKVxuICAgICAgLmRhdGEobmV0d29yay5saW5rcy5maWx0ZXIoZCA9PiB7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gZC52YWx1ZSAhPT0gMCAmJiBkLnNvdXJjZS5hcmVhICE9PSAnQicgJiYgZC50YXJnZXQuYXJlYSAhPT0gJ0InO1xuICAgICAgfSkpXG4gICAgICAuZW50ZXIoKS5hcHBlbmQoXCJsaW5lXCIpXG4gICAgICAuYXR0cignc3Ryb2tlJywgZCA9PiB7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gZC5zb3VyY2UuY2x1c3RlciA9PT0gZC50YXJnZXQuY2x1c3RlciA/IGNvbG9yc1tkLnRhcmdldC5jbHVzdGVyIC0gMV0gOiAnIzVhNWE1YSc7XG4gICAgICB9KVxuICAgICAgLmF0dHIoXCJzdHJva2Utd2lkdGhcIiwgZnVuY3Rpb24oZCkgeyBcbiAgICAgICAgaWYgKCBkLnZhbHVlID4gdGhyZXNob2xkIHx8IGQuc291cmNlLmNsdXN0ZXIgPT09IGQudGFyZ2V0LmNsdXN0ZXIgKSB7XG4gICAgICAgICAgcmV0dXJuIHJTY2FsZShkLnZhbHVlKSAqIHNjYWxlRmFjdG9yIC8gMjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICAgIFxuXG4gICAgdmFyIG5vZGVUb29sdGlwID0gZDMudGlwKClcbiAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJkMy10aXAgbGFiZWwtdGlwXCIpXG4gICAgICAuZGlyZWN0aW9uKCduJylcbiAgICAgIC5vZmZzZXQoWzQsIDBdKVxuICAgICAgLmh0bWwoZCA9PiBgXG4gICAgICAgICAgJHtkLmlkfTxiciAvPlxuICAgICAgICAgIDxiciAvPlxuICAgICAgICAgIFNwZWNpZXM6ICR7c3BlY2llc1tkLnNwZWNpZXNdfTxiciAvPlxuICAgICAgICAgIEdlYXI6ICR7Z2VhcltkLmdlYXIudG9TdHJpbmcoKV19PGJyIC8+XG4gICAgICAgICAgQXJlYTogJHtyZWdpb25zW2QuYXJlYV19PGJyIC8+XG4gICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgQ2x1c3RlcjogJHtkLmNsdXN0ZXJ9XG5cbiAgICAgICAgICBgKTsgXG5cbiAgICB2YXIgbm9kZSA9IHN2Zy5hcHBlbmQoXCJnXCIpXG4gICAgICAuYXR0cihcImNsYXNzXCIsIFwibm9kZXNcIilcbiAgICAgIC5zZWxlY3RBbGwoXCJjaXJjbGVcIilcbiAgICAgIC5kYXRhKG5ldHdvcmsubm9kZXMuZmlsdGVyKGQgPT4gZC5hcmVhICE9PSAnQicgJiYgZC5jbHVzdGVyICE9PSA2ICYmIGQuY2x1c3RlciAhPT0gNykpXG4gICAgICAuZW50ZXIoKS5hcHBlbmQoXCJnXCIpXG4gICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGQgPT4gJ3RyYW5zbGF0ZSgnICsgZC54ICsgJywnICsgZC55ICsgJyknKTtcblxuICAgIG5vZGUuYXBwZW5kKCdjaXJjbGUnKVxuICAgICAgICAuYXR0cihcInJcIiwgZCA9PiBzY2FsZUZhY3RvciAqIHJTY2FsZShkLmNvdW50KSlcbiAgICAgICAgLmF0dHIoXCJmaWxsXCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGNvbG9yc1tkLmNsdXN0ZXIgLTFdOyB9KVxuICAgICAgICAuY2FsbChub2RlVG9vbHRpcCk7XG5cbiAgICBub2RlLmFwcGVuZCgndGV4dCcpXG4gICAgICAudGV4dChkID0+IGQuaWQpXG4gICAgICAuYXR0cigndHJhbnNmb3JtJywgZCA9PiAndHJhbnNsYXRlKDAsJyArICggLTAuMSAtIHJTY2FsZShkLmNvdW50KSAqIHNjYWxlRmFjdG9yKSArICcpJyk7XG4gICAgXG4gICAgbm9kZVxuICAgICAgICAub24oJ21vdXNlZW50ZXInLCBmdW5jdGlvbihlKXtcbiAgICAgICAgICBub2RlVG9vbHRpcC5zaG93KGUpO1xuICAgICAgICB9KVxuICAgICAgICAub24oJ21vdXNlbGVhdmUnLCBub2RlVG9vbHRpcC5oaWRlKVxuICAgICAgICAuY2FsbChkMy5kcmFnKClcbiAgICAgICAgICAgIC5vbihcInN0YXJ0XCIsIGRyYWdzdGFydGVkKVxuICAgICAgICAgICAgLm9uKFwiZHJhZ1wiLCBkcmFnZ2VkKVxuICAgICAgICAgICAgLm9uKFwiZW5kXCIsIGRyYWdlbmRlZCkpO1xuXG4gIG5vZGUuYXBwZW5kKFwidGl0bGVcIilcbiAgICAgIC50ZXh0KGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQuaWQ7IH0pO1xuXG5cbiAgZnVuY3Rpb24gdGlja2VkKCkge1xuICAgIGxpbmtcbiAgICAgICAgLmF0dHIoXCJ4MVwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBkLnNvdXJjZS54OyB9KVxuICAgICAgICAuYXR0cihcInkxXCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQuc291cmNlLnk7IH0pXG4gICAgICAgIC5hdHRyKFwieDJcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gZC50YXJnZXQueDsgfSlcbiAgICAgICAgLmF0dHIoXCJ5MlwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBkLnRhcmdldC55OyB9KTtcblxuICAgIG5vZGVcbiAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgZnVuY3Rpb24oZCkge1xuICAgICAgICAgIC8vZC54ID0gTWF0aC5tYXgoclNjYWxlKGQuY291bnQpLCBNYXRoLm1pbih3aWR0aCAtIHJTY2FsZShkLmNvdW50KSwgZC54KSk7XG4gICAgICAgICAgcmV0dXJuICd0cmFuc2xhdGUoJyArIGQueCArICcsJyArIGQueSArICcpJztcbiAgICAgICAgfSk7XG4gIH1cblxuICAgIFxuICB9IC8vIGVuZCByZW5kZXIoKVxuZnVuY3Rpb24gZHJhZ3N0YXJ0ZWQoZCkge1xuICBpZiAoIWQzLmV2ZW50LmFjdGl2ZSkge1xuICAgIHNpbXVsYXRpb24uYWxwaGFUYXJnZXQoMC4zKS5yZXN0YXJ0KCk7XG4gIH1cbiAgZC5meCA9IGQueDtcbiAgZC5meSA9IGQueTtcbn1cblxuZnVuY3Rpb24gZHJhZ2dlZChkKSB7XG4gIGQuZnggPSBkMy5ldmVudC54O1xuICBkLmZ5ID0gZDMuZXZlbnQueTtcbn1cblxuZnVuY3Rpb24gZHJhZ2VuZGVkKGQpIHtcbiAgaWYgKCFkMy5ldmVudC5hY3RpdmUpIHtcbiAgICBzaW11bGF0aW9uLmFscGhhVGFyZ2V0KDApO1xuICB9XG4gIGQuZnggPSBudWxsO1xuICBkLmZ5ID0gbnVsbDtcbn1cbn0pKCk7IiwiLyoqXG4gKiBTVkcgZm9jdXMgXG4gKiBDb3B5cmlnaHQoYykgMjAxNywgSm9obiBPc3Rlcm1hblxuICpcbiAqIE1JVCBMaWNlbnNlXG4gKlxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBcbiAqIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyBcbiAqIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgXG4gKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBcbiAqIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIFxuICogTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIFxuICogRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIFxuICogSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgXG4gKiBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuICovXG5cbiAvLyBJRS9FZGdlIChwZXJoYXBzIG90aGVycykgZG9lcyBub3QgYWxsb3cgcHJvZ3JhbW1hdGljIGZvY3VzaW5nIG9mIFNWRyBFbGVtZW50cyAodmlhIGBmb2N1cygpYCkuIFNhbWUgZm9yIGBibHVyKClgLlxuXG4gZXhwb3J0IGNvbnN0IFNWR0ZvY3VzID0gKGZ1bmN0aW9uKCl7XG4gICAgaWYgKCAnZm9jdXMnIGluIFNWR0VsZW1lbnQucHJvdG90eXBlID09PSBmYWxzZSApIHtcbiAgICAgIFNWR0VsZW1lbnQucHJvdG90eXBlLmZvY3VzID0gSFRNTEVsZW1lbnQucHJvdG90eXBlLmZvY3VzO1xuICAgIH1cbiAgICBpZiAoICdibHVyJyBpbiBTVkdFbGVtZW50LnByb3RvdHlwZSA9PT0gZmFsc2UgKSB7XG4gICAgICBTVkdFbGVtZW50LnByb3RvdHlwZS5ibHVyID0gSFRNTEVsZW1lbnQucHJvdG90eXBlLmJsdXI7XG4gICAgfVxuIH0pKCk7XG5cblxuXG5cbi8qKlxuICogaW5uZXJIVE1MIHByb3BlcnR5IGZvciBTVkdFbGVtZW50XG4gKiBDb3B5cmlnaHQoYykgMjAxMCwgSmVmZiBTY2hpbGxlclxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyXG4gKlxuICogV29ya3MgaW4gYSBTVkcgZG9jdW1lbnQgaW4gQ2hyb21lIDYrLCBTYWZhcmkgNSssIEZpcmVmb3ggNCsgYW5kIElFOSsuXG4gKiBXb3JrcyBpbiBhIEhUTUw1IGRvY3VtZW50IGluIENocm9tZSA3KywgRmlyZWZveCA0KyBhbmQgSUU5Ky5cbiAqIERvZXMgbm90IHdvcmsgaW4gT3BlcmEgc2luY2UgaXQgZG9lc24ndCBzdXBwb3J0IHRoZSBTVkdFbGVtZW50IGludGVyZmFjZSB5ZXQuXG4gKlxuICogSSBoYXZlbid0IGRlY2lkZWQgb24gdGhlIGJlc3QgbmFtZSBmb3IgdGhpcyBwcm9wZXJ0eSAtIHRodXMgdGhlIGR1cGxpY2F0aW9uLlxuICovXG4vLyBlZGl0ZWQgYnkgSm9obiBPc3Rlcm1hbiB0byBkZWNsYXJlIHRoZSB2YXJpYWJsZSBgc1hNTGAsIHdoaWNoIHdhcyByZWZlcmVuY2VkIHdpdGhvdXQgYmVpbmcgZGVjbGFyZWRcbi8vIHdoaWNoIGZhaWxlZCBzaWxlbnRseSBpbiBpbXBsaWNpdCBzdHJpY3QgbW9kZSBvZiBhbiBleHBvcnRcblxuLy8gbW9zdCBicm93c2VycyBhbGxvdyBzZXR0aW5nIGlubmVySFRNTCBvZiBzdmcgZWxlbWVudHMgYnV0IElFIGRvZXMgbm90IChub3QgYW4gSFRNTCBlbGVtZW50KVxuLy8gdGhpcyBwb2x5ZmlsbCBwcm92aWRlcyB0aGF0LiBuZWNlc3NhcnkgZm9yIGQzIG1ldGhvZCBgLmh0bWwoKWAgb24gc3ZnIGVsZW1lbnRzXG5cbmV4cG9ydCBjb25zdCBTVkdJbm5lckhUTUwgPSAoZnVuY3Rpb24oKSB7XG4gIHZhciBzZXJpYWxpemVYTUwgPSBmdW5jdGlvbihub2RlLCBvdXRwdXQpIHtcbiAgICB2YXIgbm9kZVR5cGUgPSBub2RlLm5vZGVUeXBlO1xuICAgIGlmIChub2RlVHlwZSA9PSAzKSB7IC8vIFRFWFQgbm9kZXMuXG4gICAgICAvLyBSZXBsYWNlIHNwZWNpYWwgWE1MIGNoYXJhY3RlcnMgd2l0aCB0aGVpciBlbnRpdGllcy5cbiAgICAgIG91dHB1dC5wdXNoKG5vZGUudGV4dENvbnRlbnQucmVwbGFjZSgvJi8sICcmYW1wOycpLnJlcGxhY2UoLzwvLCAnJmx0OycpLnJlcGxhY2UoJz4nLCAnJmd0OycpKTtcbiAgICB9IGVsc2UgaWYgKG5vZGVUeXBlID09IDEpIHsgLy8gRUxFTUVOVCBub2Rlcy5cbiAgICAgIC8vIFNlcmlhbGl6ZSBFbGVtZW50IG5vZGVzLlxuICAgICAgb3V0cHV0LnB1c2goJzwnLCBub2RlLnRhZ05hbWUpO1xuICAgICAgaWYgKG5vZGUuaGFzQXR0cmlidXRlcygpKSB7XG4gICAgICAgIHZhciBhdHRyTWFwID0gbm9kZS5hdHRyaWJ1dGVzO1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gYXR0ck1hcC5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICAgICAgICAgIHZhciBhdHRyTm9kZSA9IGF0dHJNYXAuaXRlbShpKTtcbiAgICAgICAgICBvdXRwdXQucHVzaCgnICcsIGF0dHJOb2RlLm5hbWUsICc9XFwnJywgYXR0ck5vZGUudmFsdWUsICdcXCcnKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKG5vZGUuaGFzQ2hpbGROb2RlcygpKSB7XG4gICAgICAgIG91dHB1dC5wdXNoKCc+Jyk7XG4gICAgICAgIHZhciBjaGlsZE5vZGVzID0gbm9kZS5jaGlsZE5vZGVzO1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gY2hpbGROb2Rlcy5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICAgICAgICAgIHNlcmlhbGl6ZVhNTChjaGlsZE5vZGVzLml0ZW0oaSksIG91dHB1dCk7XG4gICAgICAgIH1cbiAgICAgICAgb3V0cHV0LnB1c2goJzwvJywgbm9kZS50YWdOYW1lLCAnPicpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3V0cHV0LnB1c2goJy8+Jyk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChub2RlVHlwZSA9PSA4KSB7XG4gICAgICAvLyBUT0RPKGNvZGVkcmVhZCk6IFJlcGxhY2Ugc3BlY2lhbCBjaGFyYWN0ZXJzIHdpdGggWE1MIGVudGl0aWVzP1xuICAgICAgb3V0cHV0LnB1c2goJzwhLS0nLCBub2RlLm5vZGVWYWx1ZSwgJy0tPicpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBUT0RPOiBIYW5kbGUgQ0RBVEEgbm9kZXMuXG4gICAgICAvLyBUT0RPOiBIYW5kbGUgRU5USVRZIG5vZGVzLlxuICAgICAgLy8gVE9ETzogSGFuZGxlIERPQ1VNRU5UIG5vZGVzLlxuICAgICAgdGhyb3cgJ0Vycm9yIHNlcmlhbGl6aW5nIFhNTC4gVW5oYW5kbGVkIG5vZGUgb2YgdHlwZTogJyArIG5vZGVUeXBlO1xuICAgIH1cbiAgfVxuICAvLyBUaGUgaW5uZXJIVE1MIERPTSBwcm9wZXJ0eSBmb3IgU1ZHRWxlbWVudC5cbiAgaWYgKCAnaW5uZXJIVE1MJyBpbiBTVkdFbGVtZW50LnByb3RvdHlwZSA9PT0gZmFsc2UgKXtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU1ZHRWxlbWVudC5wcm90b3R5cGUsICdpbm5lckhUTUwnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgb3V0cHV0ID0gW107XG4gICAgICAgIHZhciBjaGlsZE5vZGUgPSB0aGlzLmZpcnN0Q2hpbGQ7XG4gICAgICAgIHdoaWxlIChjaGlsZE5vZGUpIHtcbiAgICAgICAgICBzZXJpYWxpemVYTUwoY2hpbGROb2RlLCBvdXRwdXQpO1xuICAgICAgICAgIGNoaWxkTm9kZSA9IGNoaWxkTm9kZS5uZXh0U2libGluZztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3V0cHV0LmpvaW4oJycpO1xuICAgICAgfSxcbiAgICAgIHNldDogZnVuY3Rpb24obWFya3VwVGV4dCkge1xuICAgICAgICBjb25zb2xlLmxvZyh0aGlzKTtcbiAgICAgICAgLy8gV2lwZSBvdXQgdGhlIGN1cnJlbnQgY29udGVudHMgb2YgdGhlIGVsZW1lbnQuXG4gICAgICAgIHdoaWxlICh0aGlzLmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgICB0aGlzLnJlbW92ZUNoaWxkKHRoaXMuZmlyc3RDaGlsZCk7XG4gICAgICAgIH1cblxuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIFBhcnNlIHRoZSBtYXJrdXAgaW50byB2YWxpZCBub2Rlcy5cbiAgICAgICAgICB2YXIgZFhNTCA9IG5ldyBET01QYXJzZXIoKTtcbiAgICAgICAgICBkWE1MLmFzeW5jID0gZmFsc2U7XG4gICAgICAgICAgLy8gV3JhcCB0aGUgbWFya3VwIGludG8gYSBTVkcgbm9kZSB0byBlbnN1cmUgcGFyc2luZyB3b3Jrcy5cbiAgICAgICAgICBjb25zb2xlLmxvZyhtYXJrdXBUZXh0KTtcbiAgICAgICAgICB2YXIgc1hNTCA9ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj4nICsgbWFya3VwVGV4dCArICc8L3N2Zz4nO1xuICAgICAgICAgIGNvbnNvbGUubG9nKHNYTUwpO1xuICAgICAgICAgIHZhciBzdmdEb2NFbGVtZW50ID0gZFhNTC5wYXJzZUZyb21TdHJpbmcoc1hNTCwgJ3RleHQveG1sJykuZG9jdW1lbnRFbGVtZW50O1xuXG4gICAgICAgICAgLy8gTm93IHRha2UgZWFjaCBub2RlLCBpbXBvcnQgaXQgYW5kIGFwcGVuZCB0byB0aGlzIGVsZW1lbnQuXG4gICAgICAgICAgdmFyIGNoaWxkTm9kZSA9IHN2Z0RvY0VsZW1lbnQuZmlyc3RDaGlsZDtcbiAgICAgICAgICB3aGlsZShjaGlsZE5vZGUpIHtcbiAgICAgICAgICAgIHRoaXMuYXBwZW5kQ2hpbGQodGhpcy5vd25lckRvY3VtZW50LmltcG9ydE5vZGUoY2hpbGROb2RlLCB0cnVlKSk7XG4gICAgICAgICAgICBjaGlsZE5vZGUgPSBjaGlsZE5vZGUubmV4dFNpYmxpbmc7XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoKGUpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Vycm9yIHBhcnNpbmcgWE1MIHN0cmluZycpO1xuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gVGhlIGlubmVyU1ZHIERPTSBwcm9wZXJ0eSBmb3IgU1ZHRWxlbWVudC5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU1ZHRWxlbWVudC5wcm90b3R5cGUsICdpbm5lclNWRycsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlubmVySFRNTDtcbiAgICAgIH0sXG4gICAgICBzZXQ6IGZ1bmN0aW9uKG1hcmt1cFRleHQpIHtcbiAgICAgICAgdGhpcy5pbm5lckhUTUwgPSBtYXJrdXBUZXh0O1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59KSgpO1xuXG5cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5maW5kXG5leHBvcnQgY29uc3QgYXJyYXlGaW5kID0gKGZ1bmN0aW9uKCl7XG4gIGlmICghQXJyYXkucHJvdG90eXBlLmZpbmQpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQXJyYXkucHJvdG90eXBlLCAnZmluZCcsIHtcbiAgICAgIHZhbHVlOiBmdW5jdGlvbihwcmVkaWNhdGUpIHtcbiAgICAgICAvLyAxLiBMZXQgTyBiZSA/IFRvT2JqZWN0KHRoaXMgdmFsdWUpLlxuICAgICAgICBpZiAodGhpcyA9PSBudWxsKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJ0aGlzXCIgaXMgbnVsbCBvciBub3QgZGVmaW5lZCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG8gPSBPYmplY3QodGhpcyk7XG5cbiAgICAgICAgLy8gMi4gTGV0IGxlbiBiZSA/IFRvTGVuZ3RoKD8gR2V0KE8sIFwibGVuZ3RoXCIpKS5cbiAgICAgICAgdmFyIGxlbiA9IG8ubGVuZ3RoID4+PiAwO1xuXG4gICAgICAgIC8vIDMuIElmIElzQ2FsbGFibGUocHJlZGljYXRlKSBpcyBmYWxzZSwgdGhyb3cgYSBUeXBlRXJyb3IgZXhjZXB0aW9uLlxuICAgICAgICBpZiAodHlwZW9mIHByZWRpY2F0ZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3ByZWRpY2F0ZSBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIDQuIElmIHRoaXNBcmcgd2FzIHN1cHBsaWVkLCBsZXQgVCBiZSB0aGlzQXJnOyBlbHNlIGxldCBUIGJlIHVuZGVmaW5lZC5cbiAgICAgICAgdmFyIHRoaXNBcmcgPSBhcmd1bWVudHNbMV07XG5cbiAgICAgICAgLy8gNS4gTGV0IGsgYmUgMC5cbiAgICAgICAgdmFyIGsgPSAwO1xuXG4gICAgICAgIC8vIDYuIFJlcGVhdCwgd2hpbGUgayA8IGxlblxuICAgICAgICB3aGlsZSAoayA8IGxlbikge1xuICAgICAgICAgIC8vIGEuIExldCBQayBiZSAhIFRvU3RyaW5nKGspLlxuICAgICAgICAgIC8vIGIuIExldCBrVmFsdWUgYmUgPyBHZXQoTywgUGspLlxuICAgICAgICAgIC8vIGMuIExldCB0ZXN0UmVzdWx0IGJlIFRvQm9vbGVhbig/IENhbGwocHJlZGljYXRlLCBULCDCqyBrVmFsdWUsIGssIE8gwrspKS5cbiAgICAgICAgICAvLyBkLiBJZiB0ZXN0UmVzdWx0IGlzIHRydWUsIHJldHVybiBrVmFsdWUuXG4gICAgICAgICAgdmFyIGtWYWx1ZSA9IG9ba107XG4gICAgICAgICAgaWYgKHByZWRpY2F0ZS5jYWxsKHRoaXNBcmcsIGtWYWx1ZSwgaywgbykpIHtcbiAgICAgICAgICAgIHJldHVybiBrVmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIGUuIEluY3JlYXNlIGsgYnkgMS5cbiAgICAgICAgICBrKys7XG4gICAgICAgIH1cblxuICAgICAgICAvLyA3LiBSZXR1cm4gdW5kZWZpbmVkLlxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59KSgpOyBcblxuLy8gQ29weXJpZ2h0IChDKSAyMDExLTIwMTIgU29mdHdhcmUgTGFuZ3VhZ2VzIExhYiwgVnJpamUgVW5pdmVyc2l0ZWl0IEJydXNzZWxcbi8vIFRoaXMgY29kZSBpcyBkdWFsLWxpY2Vuc2VkIHVuZGVyIGJvdGggdGhlIEFwYWNoZSBMaWNlbnNlIGFuZCB0aGUgTVBMXG5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG4vKiBWZXJzaW9uOiBNUEwgMS4xXG4gKlxuICogVGhlIGNvbnRlbnRzIG9mIHRoaXMgZmlsZSBhcmUgc3ViamVjdCB0byB0aGUgTW96aWxsYSBQdWJsaWMgTGljZW5zZSBWZXJzaW9uXG4gKiAxLjEgKHRoZSBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aFxuICogdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICogaHR0cDovL3d3dy5tb3ppbGxhLm9yZy9NUEwvXG4gKlxuICogU29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIGJhc2lzLFxuICogV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlXG4gKiBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyByaWdodHMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZVxuICogTGljZW5zZS5cbiAqXG4gKiBUaGUgT3JpZ2luYWwgQ29kZSBpcyBhIHNoaW0gZm9yIHRoZSBFUy1IYXJtb255IHJlZmxlY3Rpb24gbW9kdWxlXG4gKlxuICogVGhlIEluaXRpYWwgRGV2ZWxvcGVyIG9mIHRoZSBPcmlnaW5hbCBDb2RlIGlzXG4gKiBUb20gVmFuIEN1dHNlbSwgVnJpamUgVW5pdmVyc2l0ZWl0IEJydXNzZWwuXG4gKiBQb3J0aW9ucyBjcmVhdGVkIGJ5IHRoZSBJbml0aWFsIERldmVsb3BlciBhcmUgQ29weXJpZ2h0IChDKSAyMDExLTIwMTJcbiAqIHRoZSBJbml0aWFsIERldmVsb3Blci4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBDb250cmlidXRvcihzKTpcbiAqXG4gKi9cblxuIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuIC8vIFRoaXMgZmlsZSBpcyBhIHBvbHlmaWxsIGZvciB0aGUgdXBjb21pbmcgRUNNQVNjcmlwdCBSZWZsZWN0IEFQSSxcbiAvLyBpbmNsdWRpbmcgc3VwcG9ydCBmb3IgUHJveGllcy4gU2VlIHRoZSBkcmFmdCBzcGVjaWZpY2F0aW9uIGF0OlxuIC8vIGh0dHA6Ly93aWtpLmVjbWFzY3JpcHQub3JnL2Rva3UucGhwP2lkPWhhcm1vbnk6cmVmbGVjdF9hcGlcbiAvLyBodHRwOi8vd2lraS5lY21hc2NyaXB0Lm9yZy9kb2t1LnBocD9pZD1oYXJtb255OmRpcmVjdF9wcm94aWVzXG5cbiAvLyBGb3IgYW4gaW1wbGVtZW50YXRpb24gb2YgdGhlIEhhbmRsZXIgQVBJLCBzZWUgaGFuZGxlcnMuanMsIHdoaWNoIGltcGxlbWVudHM6XG4gLy8gaHR0cDovL3dpa2kuZWNtYXNjcmlwdC5vcmcvZG9rdS5waHA/aWQ9aGFybW9ueTp2aXJ0dWFsX29iamVjdF9hcGlcblxuIC8vIFRoaXMgaW1wbGVtZW50YXRpb24gc3VwZXJzZWRlcyB0aGUgZWFybGllciBwb2x5ZmlsbCBhdDpcbiAvLyBjb2RlLmdvb2dsZS5jb20vcC9lcy1sYWIvc291cmNlL2Jyb3dzZS90cnVuay9zcmMvcHJveGllcy9EaXJlY3RQcm94aWVzLmpzXG5cbiAvLyBUaGlzIGNvZGUgd2FzIHRlc3RlZCBvbiB0cmFjZW1vbmtleSAvIEZpcmVmb3ggMTJcbi8vICAoYW5kIHNob3VsZCBydW4gZmluZSBvbiBvbGRlciBGaXJlZm94IHZlcnNpb25zIHN0YXJ0aW5nIHdpdGggRkY0KVxuIC8vIFRoZSBjb2RlIGFsc28gd29ya3MgY29ycmVjdGx5IG9uXG4gLy8gICB2OCAtLWhhcm1vbnlfcHJveGllcyAtLWhhcm1vbnlfd2Vha21hcHMgKHYzLjYuNS4xKVxuXG4gLy8gTGFuZ3VhZ2UgRGVwZW5kZW5jaWVzOlxuIC8vICAtIEVDTUFTY3JpcHQgNS9zdHJpY3RcbiAvLyAgLSBcIm9sZFwiIChpLmUuIG5vbi1kaXJlY3QpIEhhcm1vbnkgUHJveGllc1xuIC8vICAtIEhhcm1vbnkgV2Vha01hcHNcbiAvLyBQYXRjaGVzOlxuIC8vICAtIE9iamVjdC57ZnJlZXplLHNlYWwscHJldmVudEV4dGVuc2lvbnN9XG4gLy8gIC0gT2JqZWN0Lntpc0Zyb3plbixpc1NlYWxlZCxpc0V4dGVuc2libGV9XG4gLy8gIC0gT2JqZWN0LmdldFByb3RvdHlwZU9mXG4gLy8gIC0gT2JqZWN0LmtleXNcbiAvLyAgLSBPYmplY3QucHJvdG90eXBlLnZhbHVlT2ZcbiAvLyAgLSBPYmplY3QucHJvdG90eXBlLmlzUHJvdG90eXBlT2ZcbiAvLyAgLSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nXG4gLy8gIC0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eVxuIC8vICAtIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JcbiAvLyAgLSBPYmplY3QuZGVmaW5lUHJvcGVydHlcbiAvLyAgLSBPYmplY3QuZGVmaW5lUHJvcGVydGllc1xuIC8vICAtIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzXG4gLy8gIC0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9sc1xuIC8vICAtIE9iamVjdC5nZXRQcm90b3R5cGVPZlxuIC8vICAtIE9iamVjdC5zZXRQcm90b3R5cGVPZlxuIC8vICAtIE9iamVjdC5hc3NpZ25cbiAvLyAgLSBGdW5jdGlvbi5wcm90b3R5cGUudG9TdHJpbmdcbiAvLyAgLSBEYXRlLnByb3RvdHlwZS50b1N0cmluZ1xuIC8vICAtIEFycmF5LmlzQXJyYXlcbiAvLyAgLSBBcnJheS5wcm90b3R5cGUuY29uY2F0XG4gLy8gIC0gUHJveHlcbiAvLyBBZGRzIG5ldyBnbG9iYWxzOlxuIC8vICAtIFJlZmxlY3RcblxuIC8vIERpcmVjdCBwcm94aWVzIGNhbiBiZSBjcmVhdGVkIHZpYSBQcm94eSh0YXJnZXQsIGhhbmRsZXIpXG5cbiAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmV4cG9ydCBjb25zdCByZWZsZWN0ID0gKGZ1bmN0aW9uKGdsb2JhbCl7IC8vIGZ1bmN0aW9uLWFzLW1vZHVsZSBwYXR0ZXJuXG5cInVzZSBzdHJpY3RcIjtcbiBcbi8vID09PSBEaXJlY3QgUHJveGllczogSW52YXJpYW50IEVuZm9yY2VtZW50ID09PVxuXG4vLyBEaXJlY3QgcHJveGllcyBidWlsZCBvbiBub24tZGlyZWN0IHByb3hpZXMgYnkgYXV0b21hdGljYWxseSB3cmFwcGluZ1xuLy8gYWxsIHVzZXItZGVmaW5lZCBwcm94eSBoYW5kbGVycyBpbiBhIFZhbGlkYXRvciBoYW5kbGVyIHRoYXQgY2hlY2tzIGFuZFxuLy8gZW5mb3JjZXMgRVM1IGludmFyaWFudHMuXG5cbi8vIEEgZGlyZWN0IHByb3h5IGlzIGEgcHJveHkgZm9yIGFuIGV4aXN0aW5nIG9iamVjdCBjYWxsZWQgdGhlIHRhcmdldCBvYmplY3QuXG5cbi8vIEEgVmFsaWRhdG9yIGhhbmRsZXIgaXMgYSB3cmFwcGVyIGZvciBhIHRhcmdldCBwcm94eSBoYW5kbGVyIEguXG4vLyBUaGUgVmFsaWRhdG9yIGZvcndhcmRzIGFsbCBvcGVyYXRpb25zIHRvIEgsIGJ1dCBhZGRpdGlvbmFsbHlcbi8vIHBlcmZvcm1zIGEgbnVtYmVyIG9mIGludGVncml0eSBjaGVja3Mgb24gdGhlIHJlc3VsdHMgb2Ygc29tZSB0cmFwcyxcbi8vIHRvIG1ha2Ugc3VyZSBIIGRvZXMgbm90IHZpb2xhdGUgdGhlIEVTNSBpbnZhcmlhbnRzIHcuci50LiBub24tY29uZmlndXJhYmxlXG4vLyBwcm9wZXJ0aWVzIGFuZCBub24tZXh0ZW5zaWJsZSwgc2VhbGVkIG9yIGZyb3plbiBvYmplY3RzLlxuXG4vLyBGb3IgZWFjaCBwcm9wZXJ0eSB0aGF0IEggZXhwb3NlcyBhcyBvd24sIG5vbi1jb25maWd1cmFibGVcbi8vIChlLmcuIGJ5IHJldHVybmluZyBhIGRlc2NyaXB0b3IgZnJvbSBhIGNhbGwgdG8gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKVxuLy8gdGhlIFZhbGlkYXRvciBoYW5kbGVyIGRlZmluZXMgdGhvc2UgcHJvcGVydGllcyBvbiB0aGUgdGFyZ2V0IG9iamVjdC5cbi8vIFdoZW4gdGhlIHByb3h5IGJlY29tZXMgbm9uLWV4dGVuc2libGUsIGFsc28gY29uZmlndXJhYmxlIG93biBwcm9wZXJ0aWVzXG4vLyBhcmUgY2hlY2tlZCBhZ2FpbnN0IHRoZSB0YXJnZXQuXG4vLyBXZSB3aWxsIGNhbGwgcHJvcGVydGllcyB0aGF0IGFyZSBkZWZpbmVkIG9uIHRoZSB0YXJnZXQgb2JqZWN0XG4vLyBcImZpeGVkIHByb3BlcnRpZXNcIi5cblxuLy8gV2Ugd2lsbCBuYW1lIGZpeGVkIG5vbi1jb25maWd1cmFibGUgcHJvcGVydGllcyBcInNlYWxlZCBwcm9wZXJ0aWVzXCIuXG4vLyBXZSB3aWxsIG5hbWUgZml4ZWQgbm9uLWNvbmZpZ3VyYWJsZSBub24td3JpdGFibGUgcHJvcGVydGllcyBcImZyb3plblxuLy8gcHJvcGVydGllc1wiLlxuXG4vLyBUaGUgVmFsaWRhdG9yIGhhbmRsZXIgdXBob2xkcyB0aGUgZm9sbG93aW5nIGludmFyaWFudHMgdy5yLnQuIG5vbi1jb25maWd1cmFiaWxpdHk6XG4vLyAtIGdldE93blByb3BlcnR5RGVzY3JpcHRvciBjYW5ub3QgcmVwb3J0IHNlYWxlZCBwcm9wZXJ0aWVzIGFzIG5vbi1leGlzdGVudFxuLy8gLSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgY2Fubm90IHJlcG9ydCBpbmNvbXBhdGlibGUgY2hhbmdlcyB0byB0aGVcbi8vICAgYXR0cmlidXRlcyBvZiBhIHNlYWxlZCBwcm9wZXJ0eSAoZS5nLiByZXBvcnRpbmcgYSBub24tY29uZmlndXJhYmxlXG4vLyAgIHByb3BlcnR5IGFzIGNvbmZpZ3VyYWJsZSwgb3IgcmVwb3J0aW5nIGEgbm9uLWNvbmZpZ3VyYWJsZSwgbm9uLXdyaXRhYmxlXG4vLyAgIHByb3BlcnR5IGFzIHdyaXRhYmxlKVxuLy8gLSBnZXRQcm9wZXJ0eURlc2NyaXB0b3IgY2Fubm90IHJlcG9ydCBzZWFsZWQgcHJvcGVydGllcyBhcyBub24tZXhpc3RlbnRcbi8vIC0gZ2V0UHJvcGVydHlEZXNjcmlwdG9yIGNhbm5vdCByZXBvcnQgaW5jb21wYXRpYmxlIGNoYW5nZXMgdG8gdGhlXG4vLyAgIGF0dHJpYnV0ZXMgb2YgYSBzZWFsZWQgcHJvcGVydHkuIEl0IF9jYW5fIHJlcG9ydCBpbmNvbXBhdGlibGUgY2hhbmdlc1xuLy8gICB0byB0aGUgYXR0cmlidXRlcyBvZiBub24tb3duLCBpbmhlcml0ZWQgcHJvcGVydGllcy5cbi8vIC0gZGVmaW5lUHJvcGVydHkgY2Fubm90IG1ha2UgaW5jb21wYXRpYmxlIGNoYW5nZXMgdG8gdGhlIGF0dHJpYnV0ZXMgb2Zcbi8vICAgc2VhbGVkIHByb3BlcnRpZXNcbi8vIC0gZGVsZXRlUHJvcGVydHkgY2Fubm90IHJlcG9ydCBhIHN1Y2Nlc3NmdWwgZGVsZXRpb24gb2YgYSBzZWFsZWQgcHJvcGVydHlcbi8vIC0gaGFzT3duIGNhbm5vdCByZXBvcnQgYSBzZWFsZWQgcHJvcGVydHkgYXMgbm9uLWV4aXN0ZW50XG4vLyAtIGhhcyBjYW5ub3QgcmVwb3J0IGEgc2VhbGVkIHByb3BlcnR5IGFzIG5vbi1leGlzdGVudFxuLy8gLSBnZXQgY2Fubm90IHJlcG9ydCBpbmNvbnNpc3RlbnQgdmFsdWVzIGZvciBmcm96ZW4gZGF0YVxuLy8gICBwcm9wZXJ0aWVzLCBhbmQgbXVzdCByZXBvcnQgdW5kZWZpbmVkIGZvciBzZWFsZWQgYWNjZXNzb3JzIHdpdGggYW5cbi8vICAgdW5kZWZpbmVkIGdldHRlclxuLy8gLSBzZXQgY2Fubm90IHJlcG9ydCBhIHN1Y2Nlc3NmdWwgYXNzaWdubWVudCBmb3IgZnJvemVuIGRhdGFcbi8vICAgcHJvcGVydGllcyBvciBzZWFsZWQgYWNjZXNzb3JzIHdpdGggYW4gdW5kZWZpbmVkIHNldHRlci5cbi8vIC0gZ2V0e093bn1Qcm9wZXJ0eU5hbWVzIGxpc3RzIGFsbCBzZWFsZWQgcHJvcGVydGllcyBvZiB0aGUgdGFyZ2V0LlxuLy8gLSBrZXlzIGxpc3RzIGFsbCBlbnVtZXJhYmxlIHNlYWxlZCBwcm9wZXJ0aWVzIG9mIHRoZSB0YXJnZXQuXG4vLyAtIGVudW1lcmF0ZSBsaXN0cyBhbGwgZW51bWVyYWJsZSBzZWFsZWQgcHJvcGVydGllcyBvZiB0aGUgdGFyZ2V0LlxuLy8gLSBpZiBhIHByb3BlcnR5IG9mIGEgbm9uLWV4dGVuc2libGUgcHJveHkgaXMgcmVwb3J0ZWQgYXMgbm9uLWV4aXN0ZW50LFxuLy8gICB0aGVuIGl0IG11c3QgZm9yZXZlciBiZSByZXBvcnRlZCBhcyBub24tZXhpc3RlbnQuIFRoaXMgYXBwbGllcyB0b1xuLy8gICBvd24gYW5kIGluaGVyaXRlZCBwcm9wZXJ0aWVzIGFuZCBpcyBlbmZvcmNlZCBpbiB0aGVcbi8vICAgZGVsZXRlUHJvcGVydHksIGdldHtPd259UHJvcGVydHlEZXNjcmlwdG9yLCBoYXN7T3dufSxcbi8vICAgZ2V0e093bn1Qcm9wZXJ0eU5hbWVzLCBrZXlzIGFuZCBlbnVtZXJhdGUgdHJhcHNcblxuLy8gVmlvbGF0aW9uIG9mIGFueSBvZiB0aGVzZSBpbnZhcmlhbnRzIGJ5IEggd2lsbCByZXN1bHQgaW4gVHlwZUVycm9yIGJlaW5nXG4vLyB0aHJvd24uXG5cbi8vIEFkZGl0aW9uYWxseSwgb25jZSBPYmplY3QucHJldmVudEV4dGVuc2lvbnMsIE9iamVjdC5zZWFsIG9yIE9iamVjdC5mcmVlemVcbi8vIGlzIGludm9rZWQgb24gdGhlIHByb3h5LCB0aGUgc2V0IG9mIG93biBwcm9wZXJ0eSBuYW1lcyBmb3IgdGhlIHByb3h5IGlzXG4vLyBmaXhlZC4gQW55IHByb3BlcnR5IG5hbWUgdGhhdCBpcyBub3QgZml4ZWQgaXMgY2FsbGVkIGEgJ25ldycgcHJvcGVydHkuXG5cbi8vIFRoZSBWYWxpZGF0b3IgdXBob2xkcyB0aGUgZm9sbG93aW5nIGludmFyaWFudHMgcmVnYXJkaW5nIGV4dGVuc2liaWxpdHk6XG4vLyAtIGdldE93blByb3BlcnR5RGVzY3JpcHRvciBjYW5ub3QgcmVwb3J0IG5ldyBwcm9wZXJ0aWVzIGFzIGV4aXN0ZW50XG4vLyAgIChpdCBtdXN0IHJlcG9ydCB0aGVtIGFzIG5vbi1leGlzdGVudCBieSByZXR1cm5pbmcgdW5kZWZpbmVkKVxuLy8gLSBkZWZpbmVQcm9wZXJ0eSBjYW5ub3Qgc3VjY2Vzc2Z1bGx5IGFkZCBhIG5ldyBwcm9wZXJ0eSAoaXQgbXVzdCByZWplY3QpXG4vLyAtIGdldE93blByb3BlcnR5TmFtZXMgY2Fubm90IGxpc3QgbmV3IHByb3BlcnRpZXNcbi8vIC0gaGFzT3duIGNhbm5vdCByZXBvcnQgdHJ1ZSBmb3IgbmV3IHByb3BlcnRpZXMgKGl0IG11c3QgcmVwb3J0IGZhbHNlKVxuLy8gLSBrZXlzIGNhbm5vdCBsaXN0IG5ldyBwcm9wZXJ0aWVzXG5cbi8vIEludmFyaWFudHMgY3VycmVudGx5IG5vdCBlbmZvcmNlZDpcbi8vIC0gZ2V0T3duUHJvcGVydHlOYW1lcyBsaXN0cyBvbmx5IG93biBwcm9wZXJ0eSBuYW1lc1xuLy8gLSBrZXlzIGxpc3RzIG9ubHkgZW51bWVyYWJsZSBvd24gcHJvcGVydHkgbmFtZXNcbi8vIEJvdGggdHJhcHMgbWF5IGxpc3QgbW9yZSBwcm9wZXJ0eSBuYW1lcyB0aGFuIGFyZSBhY3R1YWxseSBkZWZpbmVkIG9uIHRoZVxuLy8gdGFyZ2V0LlxuXG4vLyBJbnZhcmlhbnRzIHdpdGggcmVnYXJkIHRvIGluaGVyaXRhbmNlIGFyZSBjdXJyZW50bHkgbm90IGVuZm9yY2VkLlxuLy8gLSBhIG5vbi1jb25maWd1cmFibGUgcG90ZW50aWFsbHkgaW5oZXJpdGVkIHByb3BlcnR5IG9uIGEgcHJveHkgd2l0aFxuLy8gICBub24tbXV0YWJsZSBhbmNlc3RyeSBjYW5ub3QgYmUgcmVwb3J0ZWQgYXMgbm9uLWV4aXN0ZW50XG4vLyAoQW4gb2JqZWN0IHdpdGggbm9uLW11dGFibGUgYW5jZXN0cnkgaXMgYSBub24tZXh0ZW5zaWJsZSBvYmplY3Qgd2hvc2Vcbi8vIFtbUHJvdG90eXBlXV0gaXMgZWl0aGVyIG51bGwgb3IgYW4gb2JqZWN0IHdpdGggbm9uLW11dGFibGUgYW5jZXN0cnkuKVxuXG4vLyBDaGFuZ2VzIGluIEhhbmRsZXIgQVBJIGNvbXBhcmVkIHRvIHByZXZpb3VzIGhhcm1vbnk6cHJveGllcywgc2VlOlxuLy8gaHR0cDovL3dpa2kuZWNtYXNjcmlwdC5vcmcvZG9rdS5waHA/aWQ9c3RyYXdtYW46ZGlyZWN0X3Byb3hpZXNcbi8vIGh0dHA6Ly93aWtpLmVjbWFzY3JpcHQub3JnL2Rva3UucGhwP2lkPWhhcm1vbnk6ZGlyZWN0X3Byb3hpZXNcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4vLyAtLS0tIFdlYWtNYXAgcG9seWZpbGwgLS0tLVxuXG4vLyBUT0RPOiBmaW5kIGEgcHJvcGVyIFdlYWtNYXAgcG9seWZpbGxcblxuLy8gZGVmaW5lIGFuIGVtcHR5IFdlYWtNYXAgc28gdGhhdCBhdCBsZWFzdCB0aGUgUmVmbGVjdCBtb2R1bGUgY29kZVxuLy8gd2lsbCB3b3JrIGluIHRoZSBhYnNlbmNlIG9mIFdlYWtNYXBzLiBQcm94eSBlbXVsYXRpb24gZGVwZW5kcyBvblxuLy8gYWN0dWFsIFdlYWtNYXBzLCBzbyB3aWxsIG5vdCB3b3JrIHdpdGggdGhpcyBsaXR0bGUgc2hpbS5cbmlmICh0eXBlb2YgV2Vha01hcCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICBnbG9iYWwuV2Vha01hcCA9IGZ1bmN0aW9uKCl7fTtcbiAgZ2xvYmFsLldlYWtNYXAucHJvdG90eXBlID0ge1xuICAgIGdldDogZnVuY3Rpb24oaykgeyByZXR1cm4gdW5kZWZpbmVkOyB9LFxuICAgIHNldDogZnVuY3Rpb24oayx2KSB7IHRocm93IG5ldyBFcnJvcihcIldlYWtNYXAgbm90IHN1cHBvcnRlZFwiKTsgfVxuICB9O1xufVxuXG4vLyAtLS0tIE5vcm1hbGl6YXRpb24gZnVuY3Rpb25zIGZvciBwcm9wZXJ0eSBkZXNjcmlwdG9ycyAtLS0tXG5cbmZ1bmN0aW9uIGlzU3RhbmRhcmRBdHRyaWJ1dGUobmFtZSkge1xuICByZXR1cm4gL14oZ2V0fHNldHx2YWx1ZXx3cml0YWJsZXxlbnVtZXJhYmxlfGNvbmZpZ3VyYWJsZSkkLy50ZXN0KG5hbWUpO1xufVxuXG4vLyBBZGFwdGVkIGZyb20gRVM1IHNlY3Rpb24gOC4xMC41XG5mdW5jdGlvbiB0b1Byb3BlcnR5RGVzY3JpcHRvcihvYmopIHtcbiAgaWYgKE9iamVjdChvYmopICE9PSBvYmopIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwicHJvcGVydHkgZGVzY3JpcHRvciBzaG91bGQgYmUgYW4gT2JqZWN0LCBnaXZlbjogXCIrXG4gICAgICAgICAgICAgICAgICAgICAgICBvYmopO1xuICB9XG4gIHZhciBkZXNjID0ge307XG4gIGlmICgnZW51bWVyYWJsZScgaW4gb2JqKSB7IGRlc2MuZW51bWVyYWJsZSA9ICEhb2JqLmVudW1lcmFibGU7IH1cbiAgaWYgKCdjb25maWd1cmFibGUnIGluIG9iaikgeyBkZXNjLmNvbmZpZ3VyYWJsZSA9ICEhb2JqLmNvbmZpZ3VyYWJsZTsgfVxuICBpZiAoJ3ZhbHVlJyBpbiBvYmopIHsgZGVzYy52YWx1ZSA9IG9iai52YWx1ZTsgfVxuICBpZiAoJ3dyaXRhYmxlJyBpbiBvYmopIHsgZGVzYy53cml0YWJsZSA9ICEhb2JqLndyaXRhYmxlOyB9XG4gIGlmICgnZ2V0JyBpbiBvYmopIHtcbiAgICB2YXIgZ2V0dGVyID0gb2JqLmdldDtcbiAgICBpZiAoZ2V0dGVyICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIGdldHRlciAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwicHJvcGVydHkgZGVzY3JpcHRvciAnZ2V0JyBhdHRyaWJ1dGUgbXVzdCBiZSBcIitcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJjYWxsYWJsZSBvciB1bmRlZmluZWQsIGdpdmVuOiBcIitnZXR0ZXIpO1xuICAgIH1cbiAgICBkZXNjLmdldCA9IGdldHRlcjtcbiAgfVxuICBpZiAoJ3NldCcgaW4gb2JqKSB7XG4gICAgdmFyIHNldHRlciA9IG9iai5zZXQ7XG4gICAgaWYgKHNldHRlciAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBzZXR0ZXIgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcInByb3BlcnR5IGRlc2NyaXB0b3IgJ3NldCcgYXR0cmlidXRlIG11c3QgYmUgXCIrXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwiY2FsbGFibGUgb3IgdW5kZWZpbmVkLCBnaXZlbjogXCIrc2V0dGVyKTtcbiAgICB9XG4gICAgZGVzYy5zZXQgPSBzZXR0ZXI7XG4gIH1cbiAgaWYgKCdnZXQnIGluIGRlc2MgfHwgJ3NldCcgaW4gZGVzYykge1xuICAgIGlmICgndmFsdWUnIGluIGRlc2MgfHwgJ3dyaXRhYmxlJyBpbiBkZXNjKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwicHJvcGVydHkgZGVzY3JpcHRvciBjYW5ub3QgYmUgYm90aCBhIGRhdGEgYW5kIGFuIFwiK1xuICAgICAgICAgICAgICAgICAgICAgICAgICBcImFjY2Vzc29yIGRlc2NyaXB0b3I6IFwiK29iaik7XG4gICAgfVxuICB9XG4gIHJldHVybiBkZXNjO1xufVxuXG5mdW5jdGlvbiBpc0FjY2Vzc29yRGVzY3JpcHRvcihkZXNjKSB7XG4gIGlmIChkZXNjID09PSB1bmRlZmluZWQpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuICgnZ2V0JyBpbiBkZXNjIHx8ICdzZXQnIGluIGRlc2MpO1xufVxuZnVuY3Rpb24gaXNEYXRhRGVzY3JpcHRvcihkZXNjKSB7XG4gIGlmIChkZXNjID09PSB1bmRlZmluZWQpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuICgndmFsdWUnIGluIGRlc2MgfHwgJ3dyaXRhYmxlJyBpbiBkZXNjKTtcbn1cbmZ1bmN0aW9uIGlzR2VuZXJpY0Rlc2NyaXB0b3IoZGVzYykge1xuICBpZiAoZGVzYyA9PT0gdW5kZWZpbmVkKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiAhaXNBY2Nlc3NvckRlc2NyaXB0b3IoZGVzYykgJiYgIWlzRGF0YURlc2NyaXB0b3IoZGVzYyk7XG59XG5cbmZ1bmN0aW9uIHRvQ29tcGxldGVQcm9wZXJ0eURlc2NyaXB0b3IoZGVzYykge1xuICB2YXIgaW50ZXJuYWxEZXNjID0gdG9Qcm9wZXJ0eURlc2NyaXB0b3IoZGVzYyk7XG4gIGlmIChpc0dlbmVyaWNEZXNjcmlwdG9yKGludGVybmFsRGVzYykgfHwgaXNEYXRhRGVzY3JpcHRvcihpbnRlcm5hbERlc2MpKSB7XG4gICAgaWYgKCEoJ3ZhbHVlJyBpbiBpbnRlcm5hbERlc2MpKSB7IGludGVybmFsRGVzYy52YWx1ZSA9IHVuZGVmaW5lZDsgfVxuICAgIGlmICghKCd3cml0YWJsZScgaW4gaW50ZXJuYWxEZXNjKSkgeyBpbnRlcm5hbERlc2Mud3JpdGFibGUgPSBmYWxzZTsgfVxuICB9IGVsc2Uge1xuICAgIGlmICghKCdnZXQnIGluIGludGVybmFsRGVzYykpIHsgaW50ZXJuYWxEZXNjLmdldCA9IHVuZGVmaW5lZDsgfVxuICAgIGlmICghKCdzZXQnIGluIGludGVybmFsRGVzYykpIHsgaW50ZXJuYWxEZXNjLnNldCA9IHVuZGVmaW5lZDsgfVxuICB9XG4gIGlmICghKCdlbnVtZXJhYmxlJyBpbiBpbnRlcm5hbERlc2MpKSB7IGludGVybmFsRGVzYy5lbnVtZXJhYmxlID0gZmFsc2U7IH1cbiAgaWYgKCEoJ2NvbmZpZ3VyYWJsZScgaW4gaW50ZXJuYWxEZXNjKSkgeyBpbnRlcm5hbERlc2MuY29uZmlndXJhYmxlID0gZmFsc2U7IH1cbiAgcmV0dXJuIGludGVybmFsRGVzYztcbn1cblxuZnVuY3Rpb24gaXNFbXB0eURlc2NyaXB0b3IoZGVzYykge1xuICByZXR1cm4gISgnZ2V0JyBpbiBkZXNjKSAmJlxuICAgICAgICAgISgnc2V0JyBpbiBkZXNjKSAmJlxuICAgICAgICAgISgndmFsdWUnIGluIGRlc2MpICYmXG4gICAgICAgICAhKCd3cml0YWJsZScgaW4gZGVzYykgJiZcbiAgICAgICAgICEoJ2VudW1lcmFibGUnIGluIGRlc2MpICYmXG4gICAgICAgICAhKCdjb25maWd1cmFibGUnIGluIGRlc2MpO1xufVxuXG5mdW5jdGlvbiBpc0VxdWl2YWxlbnREZXNjcmlwdG9yKGRlc2MxLCBkZXNjMikge1xuICByZXR1cm4gc2FtZVZhbHVlKGRlc2MxLmdldCwgZGVzYzIuZ2V0KSAmJlxuICAgICAgICAgc2FtZVZhbHVlKGRlc2MxLnNldCwgZGVzYzIuc2V0KSAmJlxuICAgICAgICAgc2FtZVZhbHVlKGRlc2MxLnZhbHVlLCBkZXNjMi52YWx1ZSkgJiZcbiAgICAgICAgIHNhbWVWYWx1ZShkZXNjMS53cml0YWJsZSwgZGVzYzIud3JpdGFibGUpICYmXG4gICAgICAgICBzYW1lVmFsdWUoZGVzYzEuZW51bWVyYWJsZSwgZGVzYzIuZW51bWVyYWJsZSkgJiZcbiAgICAgICAgIHNhbWVWYWx1ZShkZXNjMS5jb25maWd1cmFibGUsIGRlc2MyLmNvbmZpZ3VyYWJsZSk7XG59XG5cbi8vIGNvcGllZCBmcm9tIGh0dHA6Ly93aWtpLmVjbWFzY3JpcHQub3JnL2Rva3UucGhwP2lkPWhhcm1vbnk6ZWdhbFxuZnVuY3Rpb24gc2FtZVZhbHVlKHgsIHkpIHtcbiAgaWYgKHggPT09IHkpIHtcbiAgICAvLyAwID09PSAtMCwgYnV0IHRoZXkgYXJlIG5vdCBpZGVudGljYWxcbiAgICByZXR1cm4geCAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHk7XG4gIH1cblxuICAvLyBOYU4gIT09IE5hTiwgYnV0IHRoZXkgYXJlIGlkZW50aWNhbC5cbiAgLy8gTmFOcyBhcmUgdGhlIG9ubHkgbm9uLXJlZmxleGl2ZSB2YWx1ZSwgaS5lLiwgaWYgeCAhPT0geCxcbiAgLy8gdGhlbiB4IGlzIGEgTmFOLlxuICAvLyBpc05hTiBpcyBicm9rZW46IGl0IGNvbnZlcnRzIGl0cyBhcmd1bWVudCB0byBudW1iZXIsIHNvXG4gIC8vIGlzTmFOKFwiZm9vXCIpID0+IHRydWVcbiAgcmV0dXJuIHggIT09IHggJiYgeSAhPT0geTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnJlc2ggcHJvcGVydHkgZGVzY3JpcHRvciB0aGF0IGlzIGd1YXJhbnRlZWRcbiAqIHRvIGJlIGNvbXBsZXRlIChpLmUuIGNvbnRhaW4gYWxsIHRoZSBzdGFuZGFyZCBhdHRyaWJ1dGVzKS5cbiAqIEFkZGl0aW9uYWxseSwgYW55IG5vbi1zdGFuZGFyZCBlbnVtZXJhYmxlIHByb3BlcnRpZXMgb2ZcbiAqIGF0dHJpYnV0ZXMgYXJlIGNvcGllZCBvdmVyIHRvIHRoZSBmcmVzaCBkZXNjcmlwdG9yLlxuICpcbiAqIElmIGF0dHJpYnV0ZXMgaXMgdW5kZWZpbmVkLCByZXR1cm5zIHVuZGVmaW5lZC5cbiAqXG4gKiBTZWUgYWxzbzogaHR0cDovL3dpa2kuZWNtYXNjcmlwdC5vcmcvZG9rdS5waHA/aWQ9aGFybW9ueTpwcm94aWVzX3NlbWFudGljc1xuICovXG5mdW5jdGlvbiBub3JtYWxpemVBbmRDb21wbGV0ZVByb3BlcnR5RGVzY3JpcHRvcihhdHRyaWJ1dGVzKSB7XG4gIGlmIChhdHRyaWJ1dGVzID09PSB1bmRlZmluZWQpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfVxuICB2YXIgZGVzYyA9IHRvQ29tcGxldGVQcm9wZXJ0eURlc2NyaXB0b3IoYXR0cmlidXRlcyk7XG4gIC8vIE5vdGU6IG5vIG5lZWQgdG8gY2FsbCBGcm9tUHJvcGVydHlEZXNjcmlwdG9yKGRlc2MpLCBhcyB3ZSByZXByZXNlbnRcbiAgLy8gXCJpbnRlcm5hbFwiIHByb3BlcnR5IGRlc2NyaXB0b3JzIGFzIHByb3BlciBPYmplY3RzIGZyb20gdGhlIHN0YXJ0XG4gIGZvciAodmFyIG5hbWUgaW4gYXR0cmlidXRlcykge1xuICAgIGlmICghaXNTdGFuZGFyZEF0dHJpYnV0ZShuYW1lKSkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGRlc2MsIG5hbWUsXG4gICAgICAgIHsgdmFsdWU6IGF0dHJpYnV0ZXNbbmFtZV0sXG4gICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUgfSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBkZXNjO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmcmVzaCBwcm9wZXJ0eSBkZXNjcmlwdG9yIHdob3NlIHN0YW5kYXJkXG4gKiBhdHRyaWJ1dGVzIGFyZSBndWFyYW50ZWVkIHRvIGJlIGRhdGEgcHJvcGVydGllcyBvZiB0aGUgcmlnaHQgdHlwZS5cbiAqIEFkZGl0aW9uYWxseSwgYW55IG5vbi1zdGFuZGFyZCBlbnVtZXJhYmxlIHByb3BlcnRpZXMgb2ZcbiAqIGF0dHJpYnV0ZXMgYXJlIGNvcGllZCBvdmVyIHRvIHRoZSBmcmVzaCBkZXNjcmlwdG9yLlxuICpcbiAqIElmIGF0dHJpYnV0ZXMgaXMgdW5kZWZpbmVkLCB3aWxsIHRocm93IGEgVHlwZUVycm9yLlxuICpcbiAqIFNlZSBhbHNvOiBodHRwOi8vd2lraS5lY21hc2NyaXB0Lm9yZy9kb2t1LnBocD9pZD1oYXJtb255OnByb3hpZXNfc2VtYW50aWNzXG4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZVByb3BlcnR5RGVzY3JpcHRvcihhdHRyaWJ1dGVzKSB7XG4gIHZhciBkZXNjID0gdG9Qcm9wZXJ0eURlc2NyaXB0b3IoYXR0cmlidXRlcyk7XG4gIC8vIE5vdGU6IG5vIG5lZWQgdG8gY2FsbCBGcm9tR2VuZXJpY1Byb3BlcnR5RGVzY3JpcHRvcihkZXNjKSwgYXMgd2UgcmVwcmVzZW50XG4gIC8vIFwiaW50ZXJuYWxcIiBwcm9wZXJ0eSBkZXNjcmlwdG9ycyBhcyBwcm9wZXIgT2JqZWN0cyBmcm9tIHRoZSBzdGFydFxuICBmb3IgKHZhciBuYW1lIGluIGF0dHJpYnV0ZXMpIHtcbiAgICBpZiAoIWlzU3RhbmRhcmRBdHRyaWJ1dGUobmFtZSkpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShkZXNjLCBuYW1lLFxuICAgICAgICB7IHZhbHVlOiBhdHRyaWJ1dGVzW25hbWVdLFxuICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlIH0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZGVzYztcbn1cblxuLy8gc3RvcmUgYSByZWZlcmVuY2UgdG8gdGhlIHJlYWwgRVM1IHByaW1pdGl2ZXMgYmVmb3JlIHBhdGNoaW5nIHRoZW0gbGF0ZXJcbnZhciBwcmltX3ByZXZlbnRFeHRlbnNpb25zID0gICAgICAgIE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyxcbiAgICBwcmltX3NlYWwgPSAgICAgICAgICAgICAgICAgICAgIE9iamVjdC5zZWFsLFxuICAgIHByaW1fZnJlZXplID0gICAgICAgICAgICAgICAgICAgT2JqZWN0LmZyZWV6ZSxcbiAgICBwcmltX2lzRXh0ZW5zaWJsZSA9ICAgICAgICAgICAgIE9iamVjdC5pc0V4dGVuc2libGUsXG4gICAgcHJpbV9pc1NlYWxlZCA9ICAgICAgICAgICAgICAgICBPYmplY3QuaXNTZWFsZWQsXG4gICAgcHJpbV9pc0Zyb3plbiA9ICAgICAgICAgICAgICAgICBPYmplY3QuaXNGcm96ZW4sXG4gICAgcHJpbV9nZXRQcm90b3R5cGVPZiA9ICAgICAgICAgICBPYmplY3QuZ2V0UHJvdG90eXBlT2YsXG4gICAgcHJpbV9nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yLFxuICAgIHByaW1fZGVmaW5lUHJvcGVydHkgPSAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5LFxuICAgIHByaW1fZGVmaW5lUHJvcGVydGllcyA9ICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMsXG4gICAgcHJpbV9rZXlzID0gICAgICAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyxcbiAgICBwcmltX2dldE93blByb3BlcnR5TmFtZXMgPSAgICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzLFxuICAgIHByaW1fZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gICAgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyxcbiAgICBwcmltX2Fzc2lnbiA9ICAgICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24sXG4gICAgcHJpbV9pc0FycmF5ID0gICAgICAgICAgICAgICAgICBBcnJheS5pc0FycmF5LFxuICAgIHByaW1fY29uY2F0ID0gICAgICAgICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLmNvbmNhdCxcbiAgICBwcmltX2lzUHJvdG90eXBlT2YgPSAgICAgICAgICAgIE9iamVjdC5wcm90b3R5cGUuaXNQcm90b3R5cGVPZixcbiAgICBwcmltX2hhc093blByb3BlcnR5ID0gICAgICAgICAgIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbi8vIHRoZXNlIHdpbGwgcG9pbnQgdG8gdGhlIHBhdGNoZWQgdmVyc2lvbnMgb2YgdGhlIHJlc3BlY3RpdmUgbWV0aG9kcyBvblxuLy8gT2JqZWN0LiBUaGV5IGFyZSB1c2VkIHdpdGhpbiB0aGlzIG1vZHVsZSBhcyB0aGUgXCJpbnRyaW5zaWNcIiBiaW5kaW5nc1xuLy8gb2YgdGhlc2UgbWV0aG9kcyAoaS5lLiB0aGUgXCJvcmlnaW5hbFwiIGJpbmRpbmdzIGFzIGRlZmluZWQgaW4gdGhlIHNwZWMpXG52YXIgT2JqZWN0X2lzRnJvemVuLFxuICAgIE9iamVjdF9pc1NlYWxlZCxcbiAgICBPYmplY3RfaXNFeHRlbnNpYmxlLFxuICAgIE9iamVjdF9nZXRQcm90b3R5cGVPZixcbiAgICBPYmplY3RfZ2V0T3duUHJvcGVydHlOYW1lcztcblxuLyoqXG4gKiBBIHByb3BlcnR5ICduYW1lJyBpcyBmaXhlZCBpZiBpdCBpcyBhbiBvd24gcHJvcGVydHkgb2YgdGhlIHRhcmdldC5cbiAqL1xuZnVuY3Rpb24gaXNGaXhlZChuYW1lLCB0YXJnZXQpIHtcbiAgcmV0dXJuICh7fSkuaGFzT3duUHJvcGVydHkuY2FsbCh0YXJnZXQsIG5hbWUpO1xufVxuZnVuY3Rpb24gaXNTZWFsZWQobmFtZSwgdGFyZ2V0KSB7XG4gIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIG5hbWUpO1xuICBpZiAoZGVzYyA9PT0gdW5kZWZpbmVkKSB7IHJldHVybiBmYWxzZTsgfVxuICByZXR1cm4gZGVzYy5jb25maWd1cmFibGUgPT09IGZhbHNlO1xufVxuZnVuY3Rpb24gaXNTZWFsZWREZXNjKGRlc2MpIHtcbiAgcmV0dXJuIGRlc2MgIT09IHVuZGVmaW5lZCAmJiBkZXNjLmNvbmZpZ3VyYWJsZSA9PT0gZmFsc2U7XG59XG5cbi8qKlxuICogUGVyZm9ybXMgYWxsIHZhbGlkYXRpb24gdGhhdCBPYmplY3QuZGVmaW5lUHJvcGVydHkgcGVyZm9ybXMsXG4gKiB3aXRob3V0IGFjdHVhbGx5IGRlZmluaW5nIHRoZSBwcm9wZXJ0eS4gUmV0dXJucyBhIGJvb2xlYW5cbiAqIGluZGljYXRpbmcgd2hldGhlciB2YWxpZGF0aW9uIHN1Y2NlZWRlZC5cbiAqXG4gKiBJbXBsZW1lbnRhdGlvbiB0cmFuc2xpdGVyYXRlZCBmcm9tIEVTNS4xIHNlY3Rpb24gOC4xMi45XG4gKi9cbmZ1bmN0aW9uIGlzQ29tcGF0aWJsZURlc2NyaXB0b3IoZXh0ZW5zaWJsZSwgY3VycmVudCwgZGVzYykge1xuICBpZiAoY3VycmVudCA9PT0gdW5kZWZpbmVkICYmIGV4dGVuc2libGUgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmIChjdXJyZW50ID09PSB1bmRlZmluZWQgJiYgZXh0ZW5zaWJsZSA9PT0gdHJ1ZSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmIChpc0VtcHR5RGVzY3JpcHRvcihkZXNjKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmIChpc0VxdWl2YWxlbnREZXNjcmlwdG9yKGN1cnJlbnQsIGRlc2MpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKGN1cnJlbnQuY29uZmlndXJhYmxlID09PSBmYWxzZSkge1xuICAgIGlmIChkZXNjLmNvbmZpZ3VyYWJsZSA9PT0gdHJ1ZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoJ2VudW1lcmFibGUnIGluIGRlc2MgJiYgZGVzYy5lbnVtZXJhYmxlICE9PSBjdXJyZW50LmVudW1lcmFibGUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgaWYgKGlzR2VuZXJpY0Rlc2NyaXB0b3IoZGVzYykpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpZiAoaXNEYXRhRGVzY3JpcHRvcihjdXJyZW50KSAhPT0gaXNEYXRhRGVzY3JpcHRvcihkZXNjKSkge1xuICAgIGlmIChjdXJyZW50LmNvbmZpZ3VyYWJsZSA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKGlzRGF0YURlc2NyaXB0b3IoY3VycmVudCkgJiYgaXNEYXRhRGVzY3JpcHRvcihkZXNjKSkge1xuICAgIGlmIChjdXJyZW50LmNvbmZpZ3VyYWJsZSA9PT0gZmFsc2UpIHtcbiAgICAgIGlmIChjdXJyZW50LndyaXRhYmxlID09PSBmYWxzZSAmJiBkZXNjLndyaXRhYmxlID09PSB0cnVlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChjdXJyZW50LndyaXRhYmxlID09PSBmYWxzZSkge1xuICAgICAgICBpZiAoJ3ZhbHVlJyBpbiBkZXNjICYmICFzYW1lVmFsdWUoZGVzYy52YWx1ZSwgY3VycmVudC52YWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKGlzQWNjZXNzb3JEZXNjcmlwdG9yKGN1cnJlbnQpICYmIGlzQWNjZXNzb3JEZXNjcmlwdG9yKGRlc2MpKSB7XG4gICAgaWYgKGN1cnJlbnQuY29uZmlndXJhYmxlID09PSBmYWxzZSkge1xuICAgICAgaWYgKCdzZXQnIGluIGRlc2MgJiYgIXNhbWVWYWx1ZShkZXNjLnNldCwgY3VycmVudC5zZXQpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmICgnZ2V0JyBpbiBkZXNjICYmICFzYW1lVmFsdWUoZGVzYy5nZXQsIGN1cnJlbnQuZ2V0KSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG4vLyBFUzYgNy4zLjExIFNldEludGVncml0eUxldmVsXG4vLyBsZXZlbCBpcyBvbmUgb2YgXCJzZWFsZWRcIiBvciBcImZyb3plblwiXG5mdW5jdGlvbiBzZXRJbnRlZ3JpdHlMZXZlbCh0YXJnZXQsIGxldmVsKSB7XG4gIHZhciBvd25Qcm9wcyA9IE9iamVjdF9nZXRPd25Qcm9wZXJ0eU5hbWVzKHRhcmdldCk7XG4gIHZhciBwZW5kaW5nRXhjZXB0aW9uID0gdW5kZWZpbmVkO1xuICBpZiAobGV2ZWwgPT09IFwic2VhbGVkXCIpIHtcbiAgICB2YXIgbCA9ICtvd25Qcm9wcy5sZW5ndGg7XG4gICAgdmFyIGs7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgIGsgPSBTdHJpbmcob3duUHJvcHNbaV0pO1xuICAgICAgdHJ5IHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgaywgeyBjb25maWd1cmFibGU6IGZhbHNlIH0pO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAocGVuZGluZ0V4Y2VwdGlvbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgcGVuZGluZ0V4Y2VwdGlvbiA9IGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gbGV2ZWwgPT09IFwiZnJvemVuXCJcbiAgICB2YXIgbCA9ICtvd25Qcm9wcy5sZW5ndGg7XG4gICAgdmFyIGs7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgIGsgPSBTdHJpbmcob3duUHJvcHNbaV0pO1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIGN1cnJlbnREZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGspO1xuICAgICAgICBpZiAoY3VycmVudERlc2MgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHZhciBkZXNjO1xuICAgICAgICAgIGlmIChpc0FjY2Vzc29yRGVzY3JpcHRvcihjdXJyZW50RGVzYykpIHtcbiAgICAgICAgICAgIGRlc2MgPSB7IGNvbmZpZ3VyYWJsZTogZmFsc2UgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkZXNjID0geyBjb25maWd1cmFibGU6IGZhbHNlLCB3cml0YWJsZTogZmFsc2UgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrLCBkZXNjKTtcbiAgICAgICAgfSAgICAgICAgXG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGlmIChwZW5kaW5nRXhjZXB0aW9uID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBwZW5kaW5nRXhjZXB0aW9uID0gZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAocGVuZGluZ0V4Y2VwdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgdGhyb3cgcGVuZGluZ0V4Y2VwdGlvbjtcbiAgfVxuICByZXR1cm4gUmVmbGVjdC5wcmV2ZW50RXh0ZW5zaW9ucyh0YXJnZXQpO1xufVxuXG4vLyBFUzYgNy4zLjEyIFRlc3RJbnRlZ3JpdHlMZXZlbFxuLy8gbGV2ZWwgaXMgb25lIG9mIFwic2VhbGVkXCIgb3IgXCJmcm96ZW5cIlxuZnVuY3Rpb24gdGVzdEludGVncml0eUxldmVsKHRhcmdldCwgbGV2ZWwpIHtcbiAgdmFyIGlzRXh0ZW5zaWJsZSA9IE9iamVjdF9pc0V4dGVuc2libGUodGFyZ2V0KTtcbiAgaWYgKGlzRXh0ZW5zaWJsZSkgcmV0dXJuIGZhbHNlO1xuICBcbiAgdmFyIG93blByb3BzID0gT2JqZWN0X2dldE93blByb3BlcnR5TmFtZXModGFyZ2V0KTtcbiAgdmFyIHBlbmRpbmdFeGNlcHRpb24gPSB1bmRlZmluZWQ7XG4gIHZhciBjb25maWd1cmFibGUgPSBmYWxzZTtcbiAgdmFyIHdyaXRhYmxlID0gZmFsc2U7XG4gIFxuICB2YXIgbCA9ICtvd25Qcm9wcy5sZW5ndGg7XG4gIHZhciBrO1xuICB2YXIgY3VycmVudERlc2M7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgayA9IFN0cmluZyhvd25Qcm9wc1tpXSk7XG4gICAgdHJ5IHtcbiAgICAgIGN1cnJlbnREZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGspO1xuICAgICAgY29uZmlndXJhYmxlID0gY29uZmlndXJhYmxlIHx8IGN1cnJlbnREZXNjLmNvbmZpZ3VyYWJsZTtcbiAgICAgIGlmIChpc0RhdGFEZXNjcmlwdG9yKGN1cnJlbnREZXNjKSkge1xuICAgICAgICB3cml0YWJsZSA9IHdyaXRhYmxlIHx8IGN1cnJlbnREZXNjLndyaXRhYmxlO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGlmIChwZW5kaW5nRXhjZXB0aW9uID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcGVuZGluZ0V4Y2VwdGlvbiA9IGU7XG4gICAgICAgIGNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmIChwZW5kaW5nRXhjZXB0aW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICB0aHJvdyBwZW5kaW5nRXhjZXB0aW9uO1xuICB9XG4gIGlmIChsZXZlbCA9PT0gXCJmcm96ZW5cIiAmJiB3cml0YWJsZSA9PT0gdHJ1ZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoY29uZmlndXJhYmxlID09PSB0cnVlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG4vLyAtLS0tIFRoZSBWYWxpZGF0b3IgaGFuZGxlciB3cmFwcGVyIGFyb3VuZCB1c2VyIGhhbmRsZXJzIC0tLS1cblxuLyoqXG4gKiBAcGFyYW0gdGFyZ2V0IHRoZSBvYmplY3Qgd3JhcHBlZCBieSB0aGlzIHByb3h5LlxuICogQXMgbG9uZyBhcyB0aGUgcHJveHkgaXMgZXh0ZW5zaWJsZSwgb25seSBub24tY29uZmlndXJhYmxlIHByb3BlcnRpZXNcbiAqIGFyZSBjaGVja2VkIGFnYWluc3QgdGhlIHRhcmdldC4gT25jZSB0aGUgcHJveHkgYmVjb21lcyBub24tZXh0ZW5zaWJsZSxcbiAqIGludmFyaWFudHMgdy5yLnQuIG5vbi1leHRlbnNpYmlsaXR5IGFyZSBhbHNvIGVuZm9yY2VkLlxuICpcbiAqIEBwYXJhbSBoYW5kbGVyIHRoZSBoYW5kbGVyIG9mIHRoZSBkaXJlY3QgcHJveHkuIFRoZSBvYmplY3QgZW11bGF0ZWQgYnlcbiAqIHRoaXMgaGFuZGxlciBpcyB2YWxpZGF0ZWQgYWdhaW5zdCB0aGUgdGFyZ2V0IG9iamVjdCBvZiB0aGUgZGlyZWN0IHByb3h5LlxuICogQW55IHZpb2xhdGlvbnMgdGhhdCB0aGUgaGFuZGxlciBtYWtlcyBhZ2FpbnN0IHRoZSBpbnZhcmlhbnRzXG4gKiBvZiB0aGUgdGFyZ2V0IHdpbGwgY2F1c2UgYSBUeXBlRXJyb3IgdG8gYmUgdGhyb3duLlxuICpcbiAqIEJvdGggdGFyZ2V0IGFuZCBoYW5kbGVyIG11c3QgYmUgcHJvcGVyIE9iamVjdHMgYXQgaW5pdGlhbGl6YXRpb24gdGltZS5cbiAqL1xuZnVuY3Rpb24gVmFsaWRhdG9yKHRhcmdldCwgaGFuZGxlcikge1xuICAvLyBmb3Igbm9uLXJldm9rYWJsZSBwcm94aWVzLCB0aGVzZSBhcmUgY29uc3QgcmVmZXJlbmNlc1xuICAvLyBmb3IgcmV2b2thYmxlIHByb3hpZXMsIG9uIHJldm9jYXRpb246XG4gIC8vIC0gdGhpcy50YXJnZXQgaXMgc2V0IHRvIG51bGxcbiAgLy8gLSB0aGlzLmhhbmRsZXIgaXMgc2V0IHRvIGEgaGFuZGxlciB0aGF0IHRocm93cyBvbiBhbGwgdHJhcHNcbiAgdGhpcy50YXJnZXQgID0gdGFyZ2V0O1xuICB0aGlzLmhhbmRsZXIgPSBoYW5kbGVyO1xufVxuXG5WYWxpZGF0b3IucHJvdG90eXBlID0ge1xuXG4gIC8qKlxuICAgKiBJZiBnZXRUcmFwIHJldHVybnMgdW5kZWZpbmVkLCB0aGUgY2FsbGVyIHNob3VsZCBwZXJmb3JtIHRoZVxuICAgKiBkZWZhdWx0IGZvcndhcmRpbmcgYmVoYXZpb3IuXG4gICAqIElmIGdldFRyYXAgcmV0dXJucyBub3JtYWxseSBvdGhlcndpc2UsIHRoZSByZXR1cm4gdmFsdWVcbiAgICogd2lsbCBiZSBhIGNhbGxhYmxlIHRyYXAgZnVuY3Rpb24uIFdoZW4gY2FsbGluZyB0aGUgdHJhcCBmdW5jdGlvbixcbiAgICogdGhlIGNhbGxlciBpcyByZXNwb25zaWJsZSBmb3IgYmluZGluZyBpdHMgfHRoaXN8IHRvIHx0aGlzLmhhbmRsZXJ8LlxuICAgKi9cbiAgZ2V0VHJhcDogZnVuY3Rpb24odHJhcE5hbWUpIHtcbiAgICB2YXIgdHJhcCA9IHRoaXMuaGFuZGxlclt0cmFwTmFtZV07XG4gICAgaWYgKHRyYXAgPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gdGhlIHRyYXAgd2FzIG5vdCBkZWZpbmVkLFxuICAgICAgLy8gcGVyZm9ybSB0aGUgZGVmYXVsdCBmb3J3YXJkaW5nIGJlaGF2aW9yXG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgdHJhcCAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHRyYXBOYW1lICsgXCIgdHJhcCBpcyBub3QgY2FsbGFibGU6IFwiK3RyYXApO1xuICAgIH1cblxuICAgIHJldHVybiB0cmFwO1xuICB9LFxuXG4gIC8vID09PSBmdW5kYW1lbnRhbCB0cmFwcyA9PT1cblxuICAvKipcbiAgICogSWYgbmFtZSBkZW5vdGVzIGEgZml4ZWQgcHJvcGVydHksIGNoZWNrOlxuICAgKiAgIC0gd2hldGhlciB0YXJnZXRIYW5kbGVyIHJlcG9ydHMgaXQgYXMgZXhpc3RlbnRcbiAgICogICAtIHdoZXRoZXIgdGhlIHJldHVybmVkIGRlc2NyaXB0b3IgaXMgY29tcGF0aWJsZSB3aXRoIHRoZSBmaXhlZCBwcm9wZXJ0eVxuICAgKiBJZiB0aGUgcHJveHkgaXMgbm9uLWV4dGVuc2libGUsIGNoZWNrOlxuICAgKiAgIC0gd2hldGhlciBuYW1lIGlzIG5vdCBhIG5ldyBwcm9wZXJ0eVxuICAgKiBBZGRpdGlvbmFsbHksIHRoZSByZXR1cm5lZCBkZXNjcmlwdG9yIGlzIG5vcm1hbGl6ZWQgYW5kIGNvbXBsZXRlZC5cbiAgICovXG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogZnVuY3Rpb24obmFtZSkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuXG4gICAgdmFyIHRyYXAgPSB0aGlzLmdldFRyYXAoXCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JcIik7XG4gICAgaWYgKHRyYXAgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIFJlZmxlY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRoaXMudGFyZ2V0LCBuYW1lKTtcbiAgICB9XG5cbiAgICBuYW1lID0gU3RyaW5nKG5hbWUpO1xuICAgIHZhciBkZXNjID0gdHJhcC5jYWxsKHRoaXMuaGFuZGxlciwgdGhpcy50YXJnZXQsIG5hbWUpO1xuICAgIGRlc2MgPSBub3JtYWxpemVBbmRDb21wbGV0ZVByb3BlcnR5RGVzY3JpcHRvcihkZXNjKTtcblxuICAgIHZhciB0YXJnZXREZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0aGlzLnRhcmdldCwgbmFtZSk7XG4gICAgdmFyIGV4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlKHRoaXMudGFyZ2V0KTtcblxuICAgIGlmIChkZXNjID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmIChpc1NlYWxlZERlc2ModGFyZ2V0RGVzYykpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImNhbm5vdCByZXBvcnQgbm9uLWNvbmZpZ3VyYWJsZSBwcm9wZXJ0eSAnXCIrbmFtZStcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIicgYXMgbm9uLWV4aXN0ZW50XCIpO1xuICAgICAgfVxuICAgICAgaWYgKCFleHRlbnNpYmxlICYmIHRhcmdldERlc2MgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIC8vIGlmIGhhbmRsZXIgaXMgYWxsb3dlZCB0byByZXR1cm4gdW5kZWZpbmVkLCB3ZSBjYW5ub3QgZ3VhcmFudGVlXG4gICAgICAgICAgLy8gdGhhdCBpdCB3aWxsIG5vdCByZXR1cm4gYSBkZXNjcmlwdG9yIGZvciB0aGlzIHByb3BlcnR5IGxhdGVyLlxuICAgICAgICAgIC8vIE9uY2UgYSBwcm9wZXJ0eSBoYXMgYmVlbiByZXBvcnRlZCBhcyBub24tZXhpc3RlbnQgb24gYSBub24tZXh0ZW5zaWJsZVxuICAgICAgICAgIC8vIG9iamVjdCwgaXQgc2hvdWxkIGZvcmV2ZXIgYmUgcmVwb3J0ZWQgYXMgbm9uLWV4aXN0ZW50XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImNhbm5vdCByZXBvcnQgZXhpc3Rpbmcgb3duIHByb3BlcnR5ICdcIituYW1lK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCInIGFzIG5vbi1leGlzdGVudCBvbiBhIG5vbi1leHRlbnNpYmxlIG9iamVjdFwiKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLy8gYXQgdGhpcyBwb2ludCwgd2Uga25vdyAoZGVzYyAhPT0gdW5kZWZpbmVkKSwgaS5lLlxuICAgIC8vIHRhcmdldEhhbmRsZXIgcmVwb3J0cyAnbmFtZScgYXMgYW4gZXhpc3RpbmcgcHJvcGVydHlcblxuICAgIC8vIE5vdGU6IHdlIGNvdWxkIGNvbGxhcHNlIHRoZSBmb2xsb3dpbmcgdHdvIGlmLXRlc3RzIGludG8gYSBzaW5nbGVcbiAgICAvLyB0ZXN0LiBTZXBhcmF0aW5nIG91dCB0aGUgY2FzZXMgdG8gaW1wcm92ZSBlcnJvciByZXBvcnRpbmcuXG5cbiAgICBpZiAoIWV4dGVuc2libGUpIHtcbiAgICAgIGlmICh0YXJnZXREZXNjID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImNhbm5vdCByZXBvcnQgYSBuZXcgb3duIHByb3BlcnR5ICdcIitcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lICsgXCInIG9uIGEgbm9uLWV4dGVuc2libGUgb2JqZWN0XCIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChuYW1lICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmICghaXNDb21wYXRpYmxlRGVzY3JpcHRvcihleHRlbnNpYmxlLCB0YXJnZXREZXNjLCBkZXNjKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiY2Fubm90IHJlcG9ydCBpbmNvbXBhdGlibGUgcHJvcGVydHkgZGVzY3JpcHRvciBcIitcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImZvciBwcm9wZXJ0eSAnXCIrbmFtZStcIidcIik7XG4gICAgICB9XG4gICAgfVxuICAgIFxuICAgIGlmIChkZXNjLmNvbmZpZ3VyYWJsZSA9PT0gZmFsc2UpIHtcbiAgICAgIGlmICh0YXJnZXREZXNjID09PSB1bmRlZmluZWQgfHwgdGFyZ2V0RGVzYy5jb25maWd1cmFibGUgPT09IHRydWUpIHtcbiAgICAgICAgLy8gaWYgdGhlIHByb3BlcnR5IGlzIGNvbmZpZ3VyYWJsZSBvciBub24tZXhpc3RlbnQgb24gdGhlIHRhcmdldCxcbiAgICAgICAgLy8gYnV0IGlzIHJlcG9ydGVkIGFzIGEgbm9uLWNvbmZpZ3VyYWJsZSBwcm9wZXJ0eSwgaXQgbWF5IGxhdGVyIGJlXG4gICAgICAgIC8vIHJlcG9ydGVkIGFzIGNvbmZpZ3VyYWJsZSBvciBub24tZXhpc3RlbnQsIHdoaWNoIHZpb2xhdGVzIHRoZVxuICAgICAgICAvLyBpbnZhcmlhbnQgdGhhdCBpZiB0aGUgcHJvcGVydHkgbWlnaHQgY2hhbmdlIG9yIGRpc2FwcGVhciwgdGhlXG4gICAgICAgIC8vIGNvbmZpZ3VyYWJsZSBhdHRyaWJ1dGUgbXVzdCBiZSB0cnVlLlxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgIFwiY2Fubm90IHJlcG9ydCBhIG5vbi1jb25maWd1cmFibGUgZGVzY3JpcHRvciBcIiArXG4gICAgICAgICAgXCJmb3IgY29uZmlndXJhYmxlIG9yIG5vbi1leGlzdGVudCBwcm9wZXJ0eSAnXCIgKyBuYW1lICsgXCInXCIpO1xuICAgICAgfVxuICAgICAgaWYgKCd3cml0YWJsZScgaW4gZGVzYyAmJiBkZXNjLndyaXRhYmxlID09PSBmYWxzZSkge1xuICAgICAgICBpZiAodGFyZ2V0RGVzYy53cml0YWJsZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgIC8vIGlmIHRoZSBwcm9wZXJ0eSBpcyBub24tY29uZmlndXJhYmxlLCB3cml0YWJsZSBvbiB0aGUgdGFyZ2V0LFxuICAgICAgICAgIC8vIGJ1dCBpcyByZXBvcnRlZCBhcyBub24tY29uZmlndXJhYmxlLCBub24td3JpdGFibGUsIGl0IG1heSBsYXRlclxuICAgICAgICAgIC8vIGJlIHJlcG9ydGVkIGFzIG5vbi1jb25maWd1cmFibGUsIHdyaXRhYmxlIGFnYWluLCB3aGljaCB2aW9sYXRlc1xuICAgICAgICAgIC8vIHRoZSBpbnZhcmlhbnQgdGhhdCBhIG5vbi1jb25maWd1cmFibGUsIG5vbi13cml0YWJsZSBwcm9wZXJ0eVxuICAgICAgICAgIC8vIG1heSBub3QgY2hhbmdlIHN0YXRlLlxuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICAgICBcImNhbm5vdCByZXBvcnQgbm9uLWNvbmZpZ3VyYWJsZSwgd3JpdGFibGUgcHJvcGVydHkgJ1wiICsgbmFtZSArXG4gICAgICAgICAgICBcIicgYXMgbm9uLWNvbmZpZ3VyYWJsZSwgbm9uLXdyaXRhYmxlXCIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGRlc2M7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEluIHRoZSBkaXJlY3QgcHJveGllcyBkZXNpZ24gd2l0aCByZWZhY3RvcmVkIHByb3RvdHlwZSBjbGltYmluZyxcbiAgICogdGhpcyB0cmFwIGlzIGRlcHJlY2F0ZWQuIEZvciBwcm94aWVzLWFzLXByb3RvdHlwZXMsIGluc3RlYWRcbiAgICogb2YgY2FsbGluZyB0aGlzIHRyYXAsIHRoZSBnZXQsIHNldCwgaGFzIG9yIGVudW1lcmF0ZSB0cmFwcyBhcmVcbiAgICogY2FsbGVkIGluc3RlYWQuXG4gICAqXG4gICAqIEluIHRoaXMgaW1wbGVtZW50YXRpb24sIHdlIFwiYWJ1c2VcIiBnZXRQcm9wZXJ0eURlc2NyaXB0b3IgdG9cbiAgICogc3VwcG9ydCB0cmFwcGluZyB0aGUgZ2V0IG9yIHNldCB0cmFwcyBmb3IgcHJveGllcy1hcy1wcm90b3R5cGVzLlxuICAgKiBXZSBkbyB0aGlzIGJ5IHJldHVybmluZyBhIGdldHRlci9zZXR0ZXIgcGFpciB0aGF0IGludm9rZXNcbiAgICogdGhlIGNvcnJlc3BvbmRpbmcgdHJhcHMuXG4gICAqXG4gICAqIFdoaWxlIHRoaXMgaGFjayB3b3JrcyBmb3IgaW5oZXJpdGVkIHByb3BlcnR5IGFjY2VzcywgaXQgaGFzIHNvbWVcbiAgICogcXVpcmtzOlxuICAgKlxuICAgKiBJbiBGaXJlZm94LCB0aGlzIHRyYXAgaXMgb25seSBjYWxsZWQgYWZ0ZXIgYSBwcmlvciBpbnZvY2F0aW9uXG4gICAqIG9mIHRoZSAnaGFzJyB0cmFwIGhhcyByZXR1cm5lZCB0cnVlLiBIZW5jZSwgZXhwZWN0IHRoZSBmb2xsb3dpbmdcbiAgICogYmVoYXZpb3I6XG4gICAqIDxjb2RlPlxuICAgKiB2YXIgY2hpbGQgPSBPYmplY3QuY3JlYXRlKFByb3h5KHRhcmdldCwgaGFuZGxlcikpO1xuICAgKiBjaGlsZFtuYW1lXSAvLyB0cmlnZ2VycyBoYW5kbGVyLmhhcyh0YXJnZXQsIG5hbWUpXG4gICAqIC8vIGlmIHRoYXQgcmV0dXJucyB0cnVlLCB0cmlnZ2VycyBoYW5kbGVyLmdldCh0YXJnZXQsIG5hbWUsIGNoaWxkKVxuICAgKiA8L2NvZGU+XG4gICAqXG4gICAqIE9uIHY4LCB0aGUgJ2luJyBvcGVyYXRvciwgd2hlbiBhcHBsaWVkIHRvIGFuIG9iamVjdCB0aGF0IGluaGVyaXRzXG4gICAqIGZyb20gYSBwcm94eSwgd2lsbCBjYWxsIGdldFByb3BlcnR5RGVzY3JpcHRvciBhbmQgd2FsayB0aGUgcHJvdG8tY2hhaW4uXG4gICAqIFRoYXQgY2FsbHMgdGhlIGJlbG93IGdldFByb3BlcnR5RGVzY3JpcHRvciB0cmFwIG9uIHRoZSBwcm94eS4gVGhlXG4gICAqIHJlc3VsdCBvZiB0aGUgJ2luJy1vcGVyYXRvciBpcyB0aGVuIGRldGVybWluZWQgYnkgd2hldGhlciB0aGlzIHRyYXBcbiAgICogcmV0dXJucyB1bmRlZmluZWQgb3IgYSBwcm9wZXJ0eSBkZXNjcmlwdG9yIG9iamVjdC4gVGhhdCBpcyB3aHlcbiAgICogd2UgZmlyc3QgZXhwbGljaXRseSB0cmlnZ2VyIHRoZSAnaGFzJyB0cmFwIHRvIGRldGVybWluZSB3aGV0aGVyXG4gICAqIHRoZSBwcm9wZXJ0eSBleGlzdHMuXG4gICAqXG4gICAqIFRoaXMgaGFzIHRoZSBzaWRlLWVmZmVjdCB0aGF0IHdoZW4gZW51bWVyYXRpbmcgcHJvcGVydGllcyBvblxuICAgKiBhbiBvYmplY3QgdGhhdCBpbmhlcml0cyBmcm9tIGEgcHJveHkgaW4gdjgsIG9ubHkgcHJvcGVydGllc1xuICAgKiBmb3Igd2hpY2ggJ2hhcycgcmV0dXJucyB0cnVlIGFyZSByZXR1cm5lZDpcbiAgICpcbiAgICogPGNvZGU+XG4gICAqIHZhciBjaGlsZCA9IE9iamVjdC5jcmVhdGUoUHJveHkodGFyZ2V0LCBoYW5kbGVyKSk7XG4gICAqIGZvciAodmFyIHByb3AgaW4gY2hpbGQpIHtcbiAgICogICAvLyBvbmx5IGVudW1lcmF0ZXMgcHJvcCBpZiAocHJvcCBpbiBjaGlsZCkgcmV0dXJucyB0cnVlXG4gICAqIH1cbiAgICogPC9jb2RlPlxuICAgKi9cbiAgZ2V0UHJvcGVydHlEZXNjcmlwdG9yOiBmdW5jdGlvbihuYW1lKSB7XG4gICAgdmFyIGhhbmRsZXIgPSB0aGlzO1xuXG4gICAgaWYgKCFoYW5kbGVyLmhhcyhuYW1lKSkgcmV0dXJuIHVuZGVmaW5lZDtcblxuICAgIHJldHVybiB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gaGFuZGxlci5nZXQodGhpcywgbmFtZSk7XG4gICAgICB9LFxuICAgICAgc2V0OiBmdW5jdGlvbih2YWwpIHtcbiAgICAgICAgaWYgKGhhbmRsZXIuc2V0KHRoaXMsIG5hbWUsIHZhbCkpIHtcbiAgICAgICAgICByZXR1cm4gdmFsO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJmYWlsZWQgYXNzaWdubWVudCB0byBcIituYW1lKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9O1xuICB9LFxuXG4gIC8qKlxuICAgKiBJZiBuYW1lIGRlbm90ZXMgYSBmaXhlZCBwcm9wZXJ0eSwgY2hlY2sgZm9yIGluY29tcGF0aWJsZSBjaGFuZ2VzLlxuICAgKiBJZiB0aGUgcHJveHkgaXMgbm9uLWV4dGVuc2libGUsIGNoZWNrIHRoYXQgbmV3IHByb3BlcnRpZXMgYXJlIHJlamVjdGVkLlxuICAgKi9cbiAgZGVmaW5lUHJvcGVydHk6IGZ1bmN0aW9uKG5hbWUsIGRlc2MpIHtcbiAgICAvLyBUT0RPKHR2Y3V0c2VtKTogdGhlIGN1cnJlbnQgdHJhY2Vtb25rZXkgaW1wbGVtZW50YXRpb24gb2YgcHJveGllc1xuICAgIC8vIGF1dG8tY29tcGxldGVzICdkZXNjJywgd2hpY2ggaXMgbm90IGNvcnJlY3QuICdkZXNjJyBzaG91bGQgYmVcbiAgICAvLyBub3JtYWxpemVkLCBidXQgbm90IGNvbXBsZXRlZC4gQ29uc2lkZXI6XG4gICAgLy8gT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb3h5LCAnZm9vJywge2VudW1lcmFibGU6ZmFsc2V9KVxuICAgIC8vIFRoaXMgdHJhcCB3aWxsIHJlY2VpdmUgZGVzYyA9XG4gICAgLy8gIHt2YWx1ZTp1bmRlZmluZWQsd3JpdGFibGU6ZmFsc2UsZW51bWVyYWJsZTpmYWxzZSxjb25maWd1cmFibGU6ZmFsc2V9XG4gICAgLy8gVGhpcyB3aWxsIGFsc28gc2V0IGFsbCBvdGhlciBhdHRyaWJ1dGVzIHRvIHRoZWlyIGRlZmF1bHQgdmFsdWUsXG4gICAgLy8gd2hpY2ggaXMgdW5leHBlY3RlZCBhbmQgZGlmZmVyZW50IGZyb20gW1tEZWZpbmVPd25Qcm9wZXJ0eV1dLlxuICAgIC8vIEJ1ZyBmaWxlZDogaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NjAxMzI5XG5cbiAgICB2YXIgdHJhcCA9IHRoaXMuZ2V0VHJhcChcImRlZmluZVByb3BlcnR5XCIpO1xuICAgIGlmICh0cmFwID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIGRlZmF1bHQgZm9yd2FyZGluZyBiZWhhdmlvclxuICAgICAgcmV0dXJuIFJlZmxlY3QuZGVmaW5lUHJvcGVydHkodGhpcy50YXJnZXQsIG5hbWUsIGRlc2MpO1xuICAgIH1cblxuICAgIG5hbWUgPSBTdHJpbmcobmFtZSk7XG4gICAgdmFyIGRlc2NPYmogPSBub3JtYWxpemVQcm9wZXJ0eURlc2NyaXB0b3IoZGVzYyk7XG4gICAgdmFyIHN1Y2Nlc3MgPSB0cmFwLmNhbGwodGhpcy5oYW5kbGVyLCB0aGlzLnRhcmdldCwgbmFtZSwgZGVzY09iaik7XG4gICAgc3VjY2VzcyA9ICEhc3VjY2VzczsgLy8gY29lcmNlIHRvIEJvb2xlYW5cblxuICAgIGlmIChzdWNjZXNzID09PSB0cnVlKSB7XG5cbiAgICAgIHZhciB0YXJnZXREZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0aGlzLnRhcmdldCwgbmFtZSk7XG4gICAgICB2YXIgZXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGUodGhpcy50YXJnZXQpO1xuXG4gICAgICAvLyBOb3RlOiB3ZSBjb3VsZCBjb2xsYXBzZSB0aGUgZm9sbG93aW5nIHR3byBpZi10ZXN0cyBpbnRvIGEgc2luZ2xlXG4gICAgICAvLyB0ZXN0LiBTZXBhcmF0aW5nIG91dCB0aGUgY2FzZXMgdG8gaW1wcm92ZSBlcnJvciByZXBvcnRpbmcuXG5cbiAgICAgIGlmICghZXh0ZW5zaWJsZSkge1xuICAgICAgICBpZiAodGFyZ2V0RGVzYyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImNhbm5vdCBzdWNjZXNzZnVsbHkgYWRkIGEgbmV3IHByb3BlcnR5ICdcIitcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWUgKyBcIicgdG8gYSBub24tZXh0ZW5zaWJsZSBvYmplY3RcIik7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHRhcmdldERlc2MgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAoIWlzQ29tcGF0aWJsZURlc2NyaXB0b3IoZXh0ZW5zaWJsZSwgdGFyZ2V0RGVzYywgZGVzYykpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiY2Fubm90IGRlZmluZSBpbmNvbXBhdGlibGUgcHJvcGVydHkgXCIrXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImRlc2NyaXB0b3IgZm9yIHByb3BlcnR5ICdcIituYW1lK1wiJ1wiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNEYXRhRGVzY3JpcHRvcih0YXJnZXREZXNjKSAmJlxuICAgICAgICAgICAgdGFyZ2V0RGVzYy5jb25maWd1cmFibGUgPT09IGZhbHNlICYmXG4gICAgICAgICAgICB0YXJnZXREZXNjLndyaXRhYmxlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBpZiAoZGVzYy5jb25maWd1cmFibGUgPT09IGZhbHNlICYmIGRlc2Mud3JpdGFibGUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgIC8vIGlmIHRoZSBwcm9wZXJ0eSBpcyBub24tY29uZmlndXJhYmxlLCB3cml0YWJsZSBvbiB0aGUgdGFyZ2V0XG4gICAgICAgICAgICAgIC8vIGJ1dCB3YXMgc3VjY2Vzc2Z1bGx5IHJlcG9ydGVkIHRvIGJlIHVwZGF0ZWQgdG9cbiAgICAgICAgICAgICAgLy8gbm9uLWNvbmZpZ3VyYWJsZSwgbm9uLXdyaXRhYmxlLCBpdCBjYW4gbGF0ZXIgYmUgcmVwb3J0ZWRcbiAgICAgICAgICAgICAgLy8gYWdhaW4gYXMgbm9uLWNvbmZpZ3VyYWJsZSwgd3JpdGFibGUsIHdoaWNoIHZpb2xhdGVzXG4gICAgICAgICAgICAgIC8vIHRoZSBpbnZhcmlhbnQgdGhhdCBub24tY29uZmlndXJhYmxlLCBub24td3JpdGFibGUgcHJvcGVydGllc1xuICAgICAgICAgICAgICAvLyBjYW5ub3QgY2hhbmdlIHN0YXRlXG4gICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICAgICAgICAgXCJjYW5ub3Qgc3VjY2Vzc2Z1bGx5IGRlZmluZSBub24tY29uZmlndXJhYmxlLCB3cml0YWJsZSBcIiArXG4gICAgICAgICAgICAgICAgXCIgcHJvcGVydHkgJ1wiICsgbmFtZSArIFwiJyBhcyBub24tY29uZmlndXJhYmxlLCBub24td3JpdGFibGVcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZGVzYy5jb25maWd1cmFibGUgPT09IGZhbHNlICYmICFpc1NlYWxlZERlc2ModGFyZ2V0RGVzYykpIHtcbiAgICAgICAgLy8gaWYgdGhlIHByb3BlcnR5IGlzIGNvbmZpZ3VyYWJsZSBvciBub24tZXhpc3RlbnQgb24gdGhlIHRhcmdldCxcbiAgICAgICAgLy8gYnV0IGlzIHN1Y2Nlc3NmdWxseSBiZWluZyByZWRlZmluZWQgYXMgYSBub24tY29uZmlndXJhYmxlIHByb3BlcnR5LFxuICAgICAgICAvLyBpdCBtYXkgbGF0ZXIgYmUgcmVwb3J0ZWQgYXMgY29uZmlndXJhYmxlIG9yIG5vbi1leGlzdGVudCwgd2hpY2ggdmlvbGF0ZXNcbiAgICAgICAgLy8gdGhlIGludmFyaWFudCB0aGF0IGlmIHRoZSBwcm9wZXJ0eSBtaWdodCBjaGFuZ2Ugb3IgZGlzYXBwZWFyLCB0aGVcbiAgICAgICAgLy8gY29uZmlndXJhYmxlIGF0dHJpYnV0ZSBtdXN0IGJlIHRydWUuXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICAgXCJjYW5ub3Qgc3VjY2Vzc2Z1bGx5IGRlZmluZSBhIG5vbi1jb25maWd1cmFibGUgXCIgK1xuICAgICAgICAgIFwiZGVzY3JpcHRvciBmb3IgY29uZmlndXJhYmxlIG9yIG5vbi1leGlzdGVudCBwcm9wZXJ0eSAnXCIgK1xuICAgICAgICAgIG5hbWUgKyBcIidcIik7XG4gICAgICB9XG5cbiAgICB9XG5cbiAgICByZXR1cm4gc3VjY2VzcztcbiAgfSxcblxuICAvKipcbiAgICogT24gc3VjY2VzcywgY2hlY2sgd2hldGhlciB0aGUgdGFyZ2V0IG9iamVjdCBpcyBpbmRlZWQgbm9uLWV4dGVuc2libGUuXG4gICAqL1xuICBwcmV2ZW50RXh0ZW5zaW9uczogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHRyYXAgPSB0aGlzLmdldFRyYXAoXCJwcmV2ZW50RXh0ZW5zaW9uc1wiKTtcbiAgICBpZiAodHJhcCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBkZWZhdWx0IGZvcndhcmRpbmcgYmVoYXZpb3JcbiAgICAgIHJldHVybiBSZWZsZWN0LnByZXZlbnRFeHRlbnNpb25zKHRoaXMudGFyZ2V0KTtcbiAgICB9XG5cbiAgICB2YXIgc3VjY2VzcyA9IHRyYXAuY2FsbCh0aGlzLmhhbmRsZXIsIHRoaXMudGFyZ2V0KTtcbiAgICBzdWNjZXNzID0gISFzdWNjZXNzOyAvLyBjb2VyY2UgdG8gQm9vbGVhblxuICAgIGlmIChzdWNjZXNzKSB7XG4gICAgICBpZiAoT2JqZWN0X2lzRXh0ZW5zaWJsZSh0aGlzLnRhcmdldCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImNhbid0IHJlcG9ydCBleHRlbnNpYmxlIG9iamVjdCBhcyBub24tZXh0ZW5zaWJsZTogXCIrXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50YXJnZXQpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc3VjY2VzcztcbiAgfSxcblxuICAvKipcbiAgICogSWYgbmFtZSBkZW5vdGVzIGEgc2VhbGVkIHByb3BlcnR5LCBjaGVjayB3aGV0aGVyIGhhbmRsZXIgcmVqZWN0cy5cbiAgICovXG4gIGRlbGV0ZTogZnVuY3Rpb24obmFtZSkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuICAgIHZhciB0cmFwID0gdGhpcy5nZXRUcmFwKFwiZGVsZXRlUHJvcGVydHlcIik7XG4gICAgaWYgKHRyYXAgPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gZGVmYXVsdCBmb3J3YXJkaW5nIGJlaGF2aW9yXG4gICAgICByZXR1cm4gUmVmbGVjdC5kZWxldGVQcm9wZXJ0eSh0aGlzLnRhcmdldCwgbmFtZSk7XG4gICAgfVxuXG4gICAgbmFtZSA9IFN0cmluZyhuYW1lKTtcbiAgICB2YXIgcmVzID0gdHJhcC5jYWxsKHRoaXMuaGFuZGxlciwgdGhpcy50YXJnZXQsIG5hbWUpO1xuICAgIHJlcyA9ICEhcmVzOyAvLyBjb2VyY2UgdG8gQm9vbGVhblxuXG4gICAgdmFyIHRhcmdldERlc2M7XG4gICAgaWYgKHJlcyA9PT0gdHJ1ZSkge1xuICAgICAgdGFyZ2V0RGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGhpcy50YXJnZXQsIG5hbWUpO1xuICAgICAgaWYgKHRhcmdldERlc2MgIT09IHVuZGVmaW5lZCAmJiB0YXJnZXREZXNjLmNvbmZpZ3VyYWJsZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcInByb3BlcnR5ICdcIiArIG5hbWUgKyBcIicgaXMgbm9uLWNvbmZpZ3VyYWJsZSBcIitcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImFuZCBjYW4ndCBiZSBkZWxldGVkXCIpO1xuICAgICAgfVxuICAgICAgaWYgKHRhcmdldERlc2MgIT09IHVuZGVmaW5lZCAmJiAhT2JqZWN0X2lzRXh0ZW5zaWJsZSh0aGlzLnRhcmdldCkpIHtcbiAgICAgICAgLy8gaWYgdGhlIHByb3BlcnR5IHN0aWxsIGV4aXN0cyBvbiBhIG5vbi1leHRlbnNpYmxlIHRhcmdldCBidXRcbiAgICAgICAgLy8gaXMgcmVwb3J0ZWQgYXMgc3VjY2Vzc2Z1bGx5IGRlbGV0ZWQsIGl0IG1heSBsYXRlciBiZSByZXBvcnRlZFxuICAgICAgICAvLyBhcyBwcmVzZW50LCB3aGljaCB2aW9sYXRlcyB0aGUgaW52YXJpYW50IHRoYXQgYW4gb3duIHByb3BlcnR5LFxuICAgICAgICAvLyBkZWxldGVkIGZyb20gYSBub24tZXh0ZW5zaWJsZSBvYmplY3QgY2Fubm90IHJlYXBwZWFyLlxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgIFwiY2Fubm90IHN1Y2Nlc3NmdWxseSBkZWxldGUgZXhpc3RpbmcgcHJvcGVydHkgJ1wiICsgbmFtZSArXG4gICAgICAgICAgXCInIG9uIGEgbm9uLWV4dGVuc2libGUgb2JqZWN0XCIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXM7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFRoZSBnZXRPd25Qcm9wZXJ0eU5hbWVzIHRyYXAgd2FzIHJlcGxhY2VkIGJ5IHRoZSBvd25LZXlzIHRyYXAsXG4gICAqIHdoaWNoIG5vdyBhbHNvIHJldHVybnMgYW4gYXJyYXkgKG9mIHN0cmluZ3Mgb3Igc3ltYm9scykgYW5kXG4gICAqIHdoaWNoIHBlcmZvcm1zIHRoZSBzYW1lIHJpZ29yb3VzIGludmFyaWFudCBjaGVja3MgYXMgZ2V0T3duUHJvcGVydHlOYW1lc1xuICAgKlxuICAgKiBTZWUgaXNzdWUgIzQ4IG9uIGhvdyB0aGlzIHRyYXAgY2FuIHN0aWxsIGdldCBpbnZva2VkIGJ5IGV4dGVybmFsIGxpYnNcbiAgICogdGhhdCBkb24ndCB1c2UgdGhlIHBhdGNoZWQgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgZnVuY3Rpb24uXG4gICAqL1xuICBnZXRPd25Qcm9wZXJ0eU5hbWVzOiBmdW5jdGlvbigpIHtcbiAgICAvLyBOb3RlOiByZW1vdmVkIGRlcHJlY2F0aW9uIHdhcm5pbmcgdG8gYXZvaWQgZGVwZW5kZW5jeSBvbiAnY29uc29sZSdcbiAgICAvLyAoYW5kIG9uIG5vZGUsIHNob3VsZCBhbnl3YXkgdXNlIHV0aWwuZGVwcmVjYXRlKS4gRGVwcmVjYXRpb24gd2FybmluZ3NcbiAgICAvLyBjYW4gYWxzbyBiZSBhbm5veWluZyB3aGVuIHRoZXkgYXJlIG91dHNpZGUgb2YgdGhlIHVzZXIncyBjb250cm9sLCBlLmcuXG4gICAgLy8gd2hlbiBhbiBleHRlcm5hbCBsaWJyYXJ5IGNhbGxzIHVucGF0Y2hlZCBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcy5cbiAgICAvLyBTaW5jZSB0aGVyZSBpcyBhIGNsZWFuIGZhbGxiYWNrIHRvIGBvd25LZXlzYCwgdGhlIGZhY3QgdGhhdCB0aGVcbiAgICAvLyBkZXByZWNhdGVkIG1ldGhvZCBpcyBzdGlsbCBjYWxsZWQgaXMgbW9zdGx5IGhhcm1sZXNzIGFueXdheS5cbiAgICAvLyBTZWUgYWxzbyBpc3N1ZXMgIzY1IGFuZCAjNjYuXG4gICAgLy8gY29uc29sZS53YXJuKFwiZ2V0T3duUHJvcGVydHlOYW1lcyB0cmFwIGlzIGRlcHJlY2F0ZWQuIFVzZSBvd25LZXlzIGluc3RlYWRcIik7XG4gICAgcmV0dXJuIHRoaXMub3duS2V5cygpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBDaGVja3Mgd2hldGhlciB0aGUgdHJhcCByZXN1bHQgZG9lcyBub3QgY29udGFpbiBhbnkgbmV3IHByb3BlcnRpZXNcbiAgICogaWYgdGhlIHByb3h5IGlzIG5vbi1leHRlbnNpYmxlLlxuICAgKlxuICAgKiBBbnkgb3duIG5vbi1jb25maWd1cmFibGUgcHJvcGVydGllcyBvZiB0aGUgdGFyZ2V0IHRoYXQgYXJlIG5vdCBpbmNsdWRlZFxuICAgKiBpbiB0aGUgdHJhcCByZXN1bHQgZ2l2ZSByaXNlIHRvIGEgVHlwZUVycm9yLiBBcyBzdWNoLCB3ZSBjaGVjayB3aGV0aGVyIHRoZVxuICAgKiByZXR1cm5lZCByZXN1bHQgY29udGFpbnMgYXQgbGVhc3QgYWxsIHNlYWxlZCBwcm9wZXJ0aWVzIG9mIHRoZSB0YXJnZXRcbiAgICogb2JqZWN0LlxuICAgKlxuICAgKiBBZGRpdGlvbmFsbHksIHRoZSB0cmFwIHJlc3VsdCBpcyBub3JtYWxpemVkLlxuICAgKiBJbnN0ZWFkIG9mIHJldHVybmluZyB0aGUgdHJhcCByZXN1bHQgZGlyZWN0bHk6XG4gICAqICAtIGNyZWF0ZSBhbmQgcmV0dXJuIGEgZnJlc2ggQXJyYXksXG4gICAqICAtIG9mIHdoaWNoIGVhY2ggZWxlbWVudCBpcyBjb2VyY2VkIHRvIGEgU3RyaW5nXG4gICAqXG4gICAqIFRoaXMgdHJhcCBpcyBjYWxsZWQgYS5vLiBieSBSZWZsZWN0Lm93bktleXMsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzXG4gICAqIGFuZCBPYmplY3Qua2V5cyAodGhlIGxhdHRlciBmaWx0ZXJzIG91dCBvbmx5IHRoZSBlbnVtZXJhYmxlIG93biBwcm9wZXJ0aWVzKS5cbiAgICovXG4gIG93bktleXM6IGZ1bmN0aW9uKCkge1xuICAgIHZhciB0cmFwID0gdGhpcy5nZXRUcmFwKFwib3duS2V5c1wiKTtcbiAgICBpZiAodHJhcCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBkZWZhdWx0IGZvcndhcmRpbmcgYmVoYXZpb3JcbiAgICAgIHJldHVybiBSZWZsZWN0Lm93bktleXModGhpcy50YXJnZXQpO1xuICAgIH1cblxuICAgIHZhciB0cmFwUmVzdWx0ID0gdHJhcC5jYWxsKHRoaXMuaGFuZGxlciwgdGhpcy50YXJnZXQpO1xuXG4gICAgLy8gcHJvcE5hbWVzIGlzIHVzZWQgYXMgYSBzZXQgb2Ygc3RyaW5nc1xuICAgIHZhciBwcm9wTmFtZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHZhciBudW1Qcm9wcyA9ICt0cmFwUmVzdWx0Lmxlbmd0aDtcbiAgICB2YXIgcmVzdWx0ID0gbmV3IEFycmF5KG51bVByb3BzKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtUHJvcHM7IGkrKykge1xuICAgICAgdmFyIHMgPSBTdHJpbmcodHJhcFJlc3VsdFtpXSk7XG4gICAgICBpZiAoIU9iamVjdC5pc0V4dGVuc2libGUodGhpcy50YXJnZXQpICYmICFpc0ZpeGVkKHMsIHRoaXMudGFyZ2V0KSkge1xuICAgICAgICAvLyBub24tZXh0ZW5zaWJsZSBwcm94aWVzIGRvbid0IHRvbGVyYXRlIG5ldyBvd24gcHJvcGVydHkgbmFtZXNcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIm93bktleXMgdHJhcCBjYW5ub3QgbGlzdCBhIG5ldyBcIitcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInByb3BlcnR5ICdcIitzK1wiJyBvbiBhIG5vbi1leHRlbnNpYmxlIG9iamVjdFwiKTtcbiAgICAgIH1cblxuICAgICAgcHJvcE5hbWVzW3NdID0gdHJ1ZTtcbiAgICAgIHJlc3VsdFtpXSA9IHM7XG4gICAgfVxuXG4gICAgdmFyIG93blByb3BzID0gT2JqZWN0X2dldE93blByb3BlcnR5TmFtZXModGhpcy50YXJnZXQpO1xuICAgIHZhciB0YXJnZXQgPSB0aGlzLnRhcmdldDtcbiAgICBvd25Qcm9wcy5mb3JFYWNoKGZ1bmN0aW9uIChvd25Qcm9wKSB7XG4gICAgICBpZiAoIXByb3BOYW1lc1tvd25Qcm9wXSkge1xuICAgICAgICBpZiAoaXNTZWFsZWQob3duUHJvcCwgdGFyZ2V0KSkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJvd25LZXlzIHRyYXAgZmFpbGVkIHRvIGluY2x1ZGUgXCIrXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIm5vbi1jb25maWd1cmFibGUgcHJvcGVydHkgJ1wiK293blByb3ArXCInXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghT2JqZWN0LmlzRXh0ZW5zaWJsZSh0YXJnZXQpICYmXG4gICAgICAgICAgICBpc0ZpeGVkKG93blByb3AsIHRhcmdldCkpIHtcbiAgICAgICAgICAgIC8vIGlmIGhhbmRsZXIgaXMgYWxsb3dlZCB0byByZXBvcnQgb3duUHJvcCBhcyBub24tZXhpc3RlbnQsXG4gICAgICAgICAgICAvLyB3ZSBjYW5ub3QgZ3VhcmFudGVlIHRoYXQgaXQgd2lsbCBuZXZlciBsYXRlciByZXBvcnQgaXQgYXNcbiAgICAgICAgICAgIC8vIGV4aXN0ZW50LiBPbmNlIGEgcHJvcGVydHkgaGFzIGJlZW4gcmVwb3J0ZWQgYXMgbm9uLWV4aXN0ZW50XG4gICAgICAgICAgICAvLyBvbiBhIG5vbi1leHRlbnNpYmxlIG9iamVjdCwgaXQgc2hvdWxkIGZvcmV2ZXIgYmUgcmVwb3J0ZWQgYXNcbiAgICAgICAgICAgIC8vIG5vbi1leGlzdGVudFxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIm93bktleXMgdHJhcCBjYW5ub3QgcmVwb3J0IGV4aXN0aW5nIG93biBwcm9wZXJ0eSAnXCIrXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG93blByb3ArXCInIGFzIG5vbi1leGlzdGVudCBvbiBhIG5vbi1leHRlbnNpYmxlIG9iamVjdFwiKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfSxcblxuICAvKipcbiAgICogQ2hlY2tzIHdoZXRoZXIgdGhlIHRyYXAgcmVzdWx0IGlzIGNvbnNpc3RlbnQgd2l0aCB0aGUgc3RhdGUgb2YgdGhlXG4gICAqIHdyYXBwZWQgdGFyZ2V0LlxuICAgKi9cbiAgaXNFeHRlbnNpYmxlOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdHJhcCA9IHRoaXMuZ2V0VHJhcChcImlzRXh0ZW5zaWJsZVwiKTtcbiAgICBpZiAodHJhcCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBkZWZhdWx0IGZvcndhcmRpbmcgYmVoYXZpb3JcbiAgICAgIHJldHVybiBSZWZsZWN0LmlzRXh0ZW5zaWJsZSh0aGlzLnRhcmdldCk7XG4gICAgfVxuXG4gICAgdmFyIHJlc3VsdCA9IHRyYXAuY2FsbCh0aGlzLmhhbmRsZXIsIHRoaXMudGFyZ2V0KTtcbiAgICByZXN1bHQgPSAhIXJlc3VsdDsgLy8gY29lcmNlIHRvIEJvb2xlYW5cbiAgICB2YXIgc3RhdGUgPSBPYmplY3RfaXNFeHRlbnNpYmxlKHRoaXMudGFyZ2V0KTtcbiAgICBpZiAocmVzdWx0ICE9PSBzdGF0ZSkge1xuICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiY2Fubm90IHJlcG9ydCBub24tZXh0ZW5zaWJsZSBvYmplY3QgYXMgZXh0ZW5zaWJsZTogXCIrXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudGFyZ2V0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJjYW5ub3QgcmVwb3J0IGV4dGVuc2libGUgb2JqZWN0IGFzIG5vbi1leHRlbnNpYmxlOiBcIitcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50YXJnZXQpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc3RhdGU7XG4gIH0sXG5cbiAgLyoqXG4gICAqIENoZWNrIHdoZXRoZXIgdGhlIHRyYXAgcmVzdWx0IGNvcnJlc3BvbmRzIHRvIHRoZSB0YXJnZXQncyBbW1Byb3RvdHlwZV1dXG4gICAqL1xuICBnZXRQcm90b3R5cGVPZjogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHRyYXAgPSB0aGlzLmdldFRyYXAoXCJnZXRQcm90b3R5cGVPZlwiKTtcbiAgICBpZiAodHJhcCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBkZWZhdWx0IGZvcndhcmRpbmcgYmVoYXZpb3JcbiAgICAgIHJldHVybiBSZWZsZWN0LmdldFByb3RvdHlwZU9mKHRoaXMudGFyZ2V0KTtcbiAgICB9XG5cbiAgICB2YXIgYWxsZWdlZFByb3RvID0gdHJhcC5jYWxsKHRoaXMuaGFuZGxlciwgdGhpcy50YXJnZXQpO1xuXG4gICAgaWYgKCFPYmplY3RfaXNFeHRlbnNpYmxlKHRoaXMudGFyZ2V0KSkge1xuICAgICAgdmFyIGFjdHVhbFByb3RvID0gT2JqZWN0X2dldFByb3RvdHlwZU9mKHRoaXMudGFyZ2V0KTtcbiAgICAgIGlmICghc2FtZVZhbHVlKGFsbGVnZWRQcm90bywgYWN0dWFsUHJvdG8pKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJwcm90b3R5cGUgdmFsdWUgZG9lcyBub3QgbWF0Y2g6IFwiICsgdGhpcy50YXJnZXQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBhbGxlZ2VkUHJvdG87XG4gIH0sXG5cbiAgLyoqXG4gICAqIElmIHRhcmdldCBpcyBub24tZXh0ZW5zaWJsZSBhbmQgc2V0UHJvdG90eXBlT2YgdHJhcCByZXR1cm5zIHRydWUsXG4gICAqIGNoZWNrIHdoZXRoZXIgdGhlIHRyYXAgcmVzdWx0IGNvcnJlc3BvbmRzIHRvIHRoZSB0YXJnZXQncyBbW1Byb3RvdHlwZV1dXG4gICAqL1xuICBzZXRQcm90b3R5cGVPZjogZnVuY3Rpb24obmV3UHJvdG8pIHtcbiAgICB2YXIgdHJhcCA9IHRoaXMuZ2V0VHJhcChcInNldFByb3RvdHlwZU9mXCIpO1xuICAgIGlmICh0cmFwID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIGRlZmF1bHQgZm9yd2FyZGluZyBiZWhhdmlvclxuICAgICAgcmV0dXJuIFJlZmxlY3Quc2V0UHJvdG90eXBlT2YodGhpcy50YXJnZXQsIG5ld1Byb3RvKTtcbiAgICB9XG5cbiAgICB2YXIgc3VjY2VzcyA9IHRyYXAuY2FsbCh0aGlzLmhhbmRsZXIsIHRoaXMudGFyZ2V0LCBuZXdQcm90byk7XG5cbiAgICBzdWNjZXNzID0gISFzdWNjZXNzO1xuICAgIGlmIChzdWNjZXNzICYmICFPYmplY3RfaXNFeHRlbnNpYmxlKHRoaXMudGFyZ2V0KSkge1xuICAgICAgdmFyIGFjdHVhbFByb3RvID0gT2JqZWN0X2dldFByb3RvdHlwZU9mKHRoaXMudGFyZ2V0KTtcbiAgICAgIGlmICghc2FtZVZhbHVlKG5ld1Byb3RvLCBhY3R1YWxQcm90bykpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcInByb3RvdHlwZSB2YWx1ZSBkb2VzIG5vdCBtYXRjaDogXCIgKyB0aGlzLnRhcmdldCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHN1Y2Nlc3M7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEluIHRoZSBkaXJlY3QgcHJveGllcyBkZXNpZ24gd2l0aCByZWZhY3RvcmVkIHByb3RvdHlwZSBjbGltYmluZyxcbiAgICogdGhpcyB0cmFwIGlzIGRlcHJlY2F0ZWQuIEZvciBwcm94aWVzLWFzLXByb3RvdHlwZXMsIGZvci1pbiB3aWxsXG4gICAqIGNhbGwgdGhlIGVudW1lcmF0ZSgpIHRyYXAuIElmIHRoYXQgdHJhcCBpcyBub3QgZGVmaW5lZCwgdGhlXG4gICAqIG9wZXJhdGlvbiBpcyBmb3J3YXJkZWQgdG8gdGhlIHRhcmdldCwgbm8gbW9yZSBmYWxsYmFjayBvbiB0aGlzXG4gICAqIGZ1bmRhbWVudGFsIHRyYXAuXG4gICAqL1xuICBnZXRQcm9wZXJ0eU5hbWVzOiBmdW5jdGlvbigpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiZ2V0UHJvcGVydHlOYW1lcyB0cmFwIGlzIGRlcHJlY2F0ZWRcIik7XG4gIH0sXG5cbiAgLy8gPT09IGRlcml2ZWQgdHJhcHMgPT09XG5cbiAgLyoqXG4gICAqIElmIG5hbWUgZGVub3RlcyBhIGZpeGVkIHByb3BlcnR5LCBjaGVjayB3aGV0aGVyIHRoZSB0cmFwIHJldHVybnMgdHJ1ZS5cbiAgICovXG4gIGhhczogZnVuY3Rpb24obmFtZSkge1xuICAgIHZhciB0cmFwID0gdGhpcy5nZXRUcmFwKFwiaGFzXCIpO1xuICAgIGlmICh0cmFwID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIGRlZmF1bHQgZm9yd2FyZGluZyBiZWhhdmlvclxuICAgICAgcmV0dXJuIFJlZmxlY3QuaGFzKHRoaXMudGFyZ2V0LCBuYW1lKTtcbiAgICB9XG5cbiAgICBuYW1lID0gU3RyaW5nKG5hbWUpO1xuICAgIHZhciByZXMgPSB0cmFwLmNhbGwodGhpcy5oYW5kbGVyLCB0aGlzLnRhcmdldCwgbmFtZSk7XG4gICAgcmVzID0gISFyZXM7IC8vIGNvZXJjZSB0byBCb29sZWFuXG5cbiAgICBpZiAocmVzID09PSBmYWxzZSkge1xuICAgICAgaWYgKGlzU2VhbGVkKG5hbWUsIHRoaXMudGFyZ2V0KSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiY2Fubm90IHJlcG9ydCBleGlzdGluZyBub24tY29uZmlndXJhYmxlIG93biBcIitcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInByb3BlcnR5ICdcIisgbmFtZSArIFwiJyBhcyBhIG5vbi1leGlzdGVudCBcIitcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInByb3BlcnR5XCIpO1xuICAgICAgfVxuICAgICAgaWYgKCFPYmplY3QuaXNFeHRlbnNpYmxlKHRoaXMudGFyZ2V0KSAmJlxuICAgICAgICAgIGlzRml4ZWQobmFtZSwgdGhpcy50YXJnZXQpKSB7XG4gICAgICAgICAgLy8gaWYgaGFuZGxlciBpcyBhbGxvd2VkIHRvIHJldHVybiBmYWxzZSwgd2UgY2Fubm90IGd1YXJhbnRlZVxuICAgICAgICAgIC8vIHRoYXQgaXQgd2lsbCBub3QgcmV0dXJuIHRydWUgZm9yIHRoaXMgcHJvcGVydHkgbGF0ZXIuXG4gICAgICAgICAgLy8gT25jZSBhIHByb3BlcnR5IGhhcyBiZWVuIHJlcG9ydGVkIGFzIG5vbi1leGlzdGVudCBvbiBhIG5vbi1leHRlbnNpYmxlXG4gICAgICAgICAgLy8gb2JqZWN0LCBpdCBzaG91bGQgZm9yZXZlciBiZSByZXBvcnRlZCBhcyBub24tZXhpc3RlbnRcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiY2Fubm90IHJlcG9ydCBleGlzdGluZyBvd24gcHJvcGVydHkgJ1wiK25hbWUrXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIicgYXMgbm9uLWV4aXN0ZW50IG9uIGEgbm9uLWV4dGVuc2libGUgb2JqZWN0XCIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGlmIHJlcyA9PT0gdHJ1ZSwgd2UgZG9uJ3QgbmVlZCB0byBjaGVjayBmb3IgZXh0ZW5zaWJpbGl0eVxuICAgIC8vIGV2ZW4gZm9yIGEgbm9uLWV4dGVuc2libGUgcHJveHkgdGhhdCBoYXMgbm8gb3duIG5hbWUgcHJvcGVydHksXG4gICAgLy8gdGhlIHByb3BlcnR5IG1heSBoYXZlIGJlZW4gaW5oZXJpdGVkXG5cbiAgICByZXR1cm4gcmVzO1xuICB9LFxuXG4gIC8qKlxuICAgKiBJZiBuYW1lIGRlbm90ZXMgYSBmaXhlZCBub24tY29uZmlndXJhYmxlLCBub24td3JpdGFibGUgZGF0YSBwcm9wZXJ0eSxcbiAgICogY2hlY2sgaXRzIHJldHVybiB2YWx1ZSBhZ2FpbnN0IHRoZSBwcmV2aW91c2x5IGFzc2VydGVkIHZhbHVlIG9mIHRoZVxuICAgKiBmaXhlZCBwcm9wZXJ0eS5cbiAgICovXG4gIGdldDogZnVuY3Rpb24ocmVjZWl2ZXIsIG5hbWUpIHtcblxuICAgIC8vIGV4cGVyaW1lbnRhbCBzdXBwb3J0IGZvciBpbnZva2UoKSB0cmFwIG9uIHBsYXRmb3JtcyB0aGF0XG4gICAgLy8gc3VwcG9ydCBfX25vU3VjaE1ldGhvZF9fXG4gICAgLypcbiAgICBpZiAobmFtZSA9PT0gJ19fbm9TdWNoTWV0aG9kX18nKSB7XG4gICAgICB2YXIgaGFuZGxlciA9IHRoaXM7XG4gICAgICByZXR1cm4gZnVuY3Rpb24obmFtZSwgYXJncykge1xuICAgICAgICByZXR1cm4gaGFuZGxlci5pbnZva2UocmVjZWl2ZXIsIG5hbWUsIGFyZ3MpO1xuICAgICAgfVxuICAgIH1cbiAgICAqL1xuXG4gICAgdmFyIHRyYXAgPSB0aGlzLmdldFRyYXAoXCJnZXRcIik7XG4gICAgaWYgKHRyYXAgPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gZGVmYXVsdCBmb3J3YXJkaW5nIGJlaGF2aW9yXG4gICAgICByZXR1cm4gUmVmbGVjdC5nZXQodGhpcy50YXJnZXQsIG5hbWUsIHJlY2VpdmVyKTtcbiAgICB9XG5cbiAgICBuYW1lID0gU3RyaW5nKG5hbWUpO1xuICAgIHZhciByZXMgPSB0cmFwLmNhbGwodGhpcy5oYW5kbGVyLCB0aGlzLnRhcmdldCwgbmFtZSwgcmVjZWl2ZXIpO1xuXG4gICAgdmFyIGZpeGVkRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGhpcy50YXJnZXQsIG5hbWUpO1xuICAgIC8vIGNoZWNrIGNvbnNpc3RlbmN5IG9mIHRoZSByZXR1cm5lZCB2YWx1ZVxuICAgIGlmIChmaXhlZERlc2MgIT09IHVuZGVmaW5lZCkgeyAvLyBnZXR0aW5nIGFuIGV4aXN0aW5nIHByb3BlcnR5XG4gICAgICBpZiAoaXNEYXRhRGVzY3JpcHRvcihmaXhlZERlc2MpICYmXG4gICAgICAgICAgZml4ZWREZXNjLmNvbmZpZ3VyYWJsZSA9PT0gZmFsc2UgJiZcbiAgICAgICAgICBmaXhlZERlc2Mud3JpdGFibGUgPT09IGZhbHNlKSB7IC8vIG93biBmcm96ZW4gZGF0YSBwcm9wZXJ0eVxuICAgICAgICBpZiAoIXNhbWVWYWx1ZShyZXMsIGZpeGVkRGVzYy52YWx1ZSkpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiY2Fubm90IHJlcG9ydCBpbmNvbnNpc3RlbnQgdmFsdWUgZm9yIFwiK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJub24td3JpdGFibGUsIG5vbi1jb25maWd1cmFibGUgcHJvcGVydHkgJ1wiK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZStcIidcIik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7IC8vIGl0J3MgYW4gYWNjZXNzb3IgcHJvcGVydHlcbiAgICAgICAgaWYgKGlzQWNjZXNzb3JEZXNjcmlwdG9yKGZpeGVkRGVzYykgJiZcbiAgICAgICAgICAgIGZpeGVkRGVzYy5jb25maWd1cmFibGUgPT09IGZhbHNlICYmXG4gICAgICAgICAgICBmaXhlZERlc2MuZ2V0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBpZiAocmVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJtdXN0IHJlcG9ydCB1bmRlZmluZWQgZm9yIG5vbi1jb25maWd1cmFibGUgXCIrXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiYWNjZXNzb3IgcHJvcGVydHkgJ1wiK25hbWUrXCInIHdpdGhvdXQgZ2V0dGVyXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXM7XG4gIH0sXG5cbiAgLyoqXG4gICAqIElmIG5hbWUgZGVub3RlcyBhIGZpeGVkIG5vbi1jb25maWd1cmFibGUsIG5vbi13cml0YWJsZSBkYXRhIHByb3BlcnR5LFxuICAgKiBjaGVjayB0aGF0IHRoZSB0cmFwIHJlamVjdHMgdGhlIGFzc2lnbm1lbnQuXG4gICAqL1xuICBzZXQ6IGZ1bmN0aW9uKHJlY2VpdmVyLCBuYW1lLCB2YWwpIHtcbiAgICB2YXIgdHJhcCA9IHRoaXMuZ2V0VHJhcChcInNldFwiKTtcbiAgICBpZiAodHJhcCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBkZWZhdWx0IGZvcndhcmRpbmcgYmVoYXZpb3JcbiAgICAgIHJldHVybiBSZWZsZWN0LnNldCh0aGlzLnRhcmdldCwgbmFtZSwgdmFsLCByZWNlaXZlcik7XG4gICAgfVxuXG4gICAgbmFtZSA9IFN0cmluZyhuYW1lKTtcbiAgICB2YXIgcmVzID0gdHJhcC5jYWxsKHRoaXMuaGFuZGxlciwgdGhpcy50YXJnZXQsIG5hbWUsIHZhbCwgcmVjZWl2ZXIpO1xuICAgIHJlcyA9ICEhcmVzOyAvLyBjb2VyY2UgdG8gQm9vbGVhblxuXG4gICAgLy8gaWYgc3VjY2VzcyBpcyByZXBvcnRlZCwgY2hlY2sgd2hldGhlciBwcm9wZXJ0eSBpcyB0cnVseSBhc3NpZ25hYmxlXG4gICAgaWYgKHJlcyA9PT0gdHJ1ZSkge1xuICAgICAgdmFyIGZpeGVkRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGhpcy50YXJnZXQsIG5hbWUpO1xuICAgICAgaWYgKGZpeGVkRGVzYyAhPT0gdW5kZWZpbmVkKSB7IC8vIHNldHRpbmcgYW4gZXhpc3RpbmcgcHJvcGVydHlcbiAgICAgICAgaWYgKGlzRGF0YURlc2NyaXB0b3IoZml4ZWREZXNjKSAmJlxuICAgICAgICAgICAgZml4ZWREZXNjLmNvbmZpZ3VyYWJsZSA9PT0gZmFsc2UgJiZcbiAgICAgICAgICAgIGZpeGVkRGVzYy53cml0YWJsZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICBpZiAoIXNhbWVWYWx1ZSh2YWwsIGZpeGVkRGVzYy52YWx1ZSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJjYW5ub3Qgc3VjY2Vzc2Z1bGx5IGFzc2lnbiB0byBhIFwiK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIm5vbi13cml0YWJsZSwgbm9uLWNvbmZpZ3VyYWJsZSBwcm9wZXJ0eSAnXCIrXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWUrXCInXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoaXNBY2Nlc3NvckRlc2NyaXB0b3IoZml4ZWREZXNjKSAmJlxuICAgICAgICAgICAgICBmaXhlZERlc2MuY29uZmlndXJhYmxlID09PSBmYWxzZSAmJiAvLyBub24tY29uZmlndXJhYmxlXG4gICAgICAgICAgICAgIGZpeGVkRGVzYy5zZXQgPT09IHVuZGVmaW5lZCkgeyAgICAgIC8vIGFjY2Vzc29yIHdpdGggdW5kZWZpbmVkIHNldHRlclxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcInNldHRpbmcgYSBwcm9wZXJ0eSAnXCIrbmFtZStcIicgdGhhdCBoYXMgXCIrXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiIG9ubHkgYSBnZXR0ZXJcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcztcbiAgfSxcblxuICAvKipcbiAgICogQW55IG93biBlbnVtZXJhYmxlIG5vbi1jb25maWd1cmFibGUgcHJvcGVydGllcyBvZiB0aGUgdGFyZ2V0IHRoYXQgYXJlIG5vdFxuICAgKiBpbmNsdWRlZCBpbiB0aGUgdHJhcCByZXN1bHQgZ2l2ZSByaXNlIHRvIGEgVHlwZUVycm9yLiBBcyBzdWNoLCB3ZSBjaGVja1xuICAgKiB3aGV0aGVyIHRoZSByZXR1cm5lZCByZXN1bHQgY29udGFpbnMgYXQgbGVhc3QgYWxsIHNlYWxlZCBlbnVtZXJhYmxlIHByb3BlcnRpZXNcbiAgICogb2YgdGhlIHRhcmdldCBvYmplY3QuXG4gICAqXG4gICAqIFRoZSB0cmFwIHNob3VsZCByZXR1cm4gYW4gaXRlcmF0b3IuXG4gICAqXG4gICAqIEhvd2V2ZXIsIGFzIGltcGxlbWVudGF0aW9ucyBvZiBwcmUtZGlyZWN0IHByb3hpZXMgc3RpbGwgZXhwZWN0IGVudW1lcmF0ZVxuICAgKiB0byByZXR1cm4gYW4gYXJyYXkgb2Ygc3RyaW5ncywgd2UgY29udmVydCB0aGUgaXRlcmF0b3IgaW50byBhbiBhcnJheS5cbiAgICovXG4gIGVudW1lcmF0ZTogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHRyYXAgPSB0aGlzLmdldFRyYXAoXCJlbnVtZXJhdGVcIik7XG4gICAgaWYgKHRyYXAgPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gZGVmYXVsdCBmb3J3YXJkaW5nIGJlaGF2aW9yXG4gICAgICB2YXIgdHJhcFJlc3VsdCA9IFJlZmxlY3QuZW51bWVyYXRlKHRoaXMudGFyZ2V0KTtcbiAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgIHZhciBueHQgPSB0cmFwUmVzdWx0Lm5leHQoKTtcbiAgICAgIHdoaWxlICghbnh0LmRvbmUpIHtcbiAgICAgICAgcmVzdWx0LnB1c2goU3RyaW5nKG54dC52YWx1ZSkpO1xuICAgICAgICBueHQgPSB0cmFwUmVzdWx0Lm5leHQoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgdmFyIHRyYXBSZXN1bHQgPSB0cmFwLmNhbGwodGhpcy5oYW5kbGVyLCB0aGlzLnRhcmdldCk7XG4gICAgXG4gICAgaWYgKHRyYXBSZXN1bHQgPT09IG51bGwgfHxcbiAgICAgICAgdHJhcFJlc3VsdCA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICAgIHRyYXBSZXN1bHQubmV4dCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiZW51bWVyYXRlIHRyYXAgc2hvdWxkIHJldHVybiBhbiBpdGVyYXRvciwgZ290OiBcIitcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhcFJlc3VsdCk7ICAgIFxuICAgIH1cbiAgICBcbiAgICAvLyBwcm9wTmFtZXMgaXMgdXNlZCBhcyBhIHNldCBvZiBzdHJpbmdzXG4gICAgdmFyIHByb3BOYW1lcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgXG4gICAgLy8gdmFyIG51bVByb3BzID0gK3RyYXBSZXN1bHQubGVuZ3RoO1xuICAgIHZhciByZXN1bHQgPSBbXTsgLy8gbmV3IEFycmF5KG51bVByb3BzKTtcbiAgICBcbiAgICAvLyB0cmFwUmVzdWx0IGlzIHN1cHBvc2VkIHRvIGJlIGFuIGl0ZXJhdG9yXG4gICAgLy8gZHJhaW4gaXRlcmF0b3IgdG8gYXJyYXkgYXMgY3VycmVudCBpbXBsZW1lbnRhdGlvbnMgc3RpbGwgZXhwZWN0XG4gICAgLy8gZW51bWVyYXRlIHRvIHJldHVybiBhbiBhcnJheSBvZiBzdHJpbmdzXG4gICAgdmFyIG54dCA9IHRyYXBSZXN1bHQubmV4dCgpO1xuICAgIFxuICAgIHdoaWxlICghbnh0LmRvbmUpIHtcbiAgICAgIHZhciBzID0gU3RyaW5nKG54dC52YWx1ZSk7XG4gICAgICBpZiAocHJvcE5hbWVzW3NdKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJlbnVtZXJhdGUgdHJhcCBjYW5ub3QgbGlzdCBhIFwiK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiZHVwbGljYXRlIHByb3BlcnR5ICdcIitzK1wiJ1wiKTtcbiAgICAgIH1cbiAgICAgIHByb3BOYW1lc1tzXSA9IHRydWU7XG4gICAgICByZXN1bHQucHVzaChzKTtcbiAgICAgIG54dCA9IHRyYXBSZXN1bHQubmV4dCgpO1xuICAgIH1cbiAgICBcbiAgICAvKmZvciAodmFyIGkgPSAwOyBpIDwgbnVtUHJvcHM7IGkrKykge1xuICAgICAgdmFyIHMgPSBTdHJpbmcodHJhcFJlc3VsdFtpXSk7XG4gICAgICBpZiAocHJvcE5hbWVzW3NdKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJlbnVtZXJhdGUgdHJhcCBjYW5ub3QgbGlzdCBhIFwiK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiZHVwbGljYXRlIHByb3BlcnR5ICdcIitzK1wiJ1wiKTtcbiAgICAgIH1cblxuICAgICAgcHJvcE5hbWVzW3NdID0gdHJ1ZTtcbiAgICAgIHJlc3VsdFtpXSA9IHM7XG4gICAgfSAqL1xuXG4gICAgdmFyIG93bkVudW1lcmFibGVQcm9wcyA9IE9iamVjdC5rZXlzKHRoaXMudGFyZ2V0KTtcbiAgICB2YXIgdGFyZ2V0ID0gdGhpcy50YXJnZXQ7XG4gICAgb3duRW51bWVyYWJsZVByb3BzLmZvckVhY2goZnVuY3Rpb24gKG93bkVudW1lcmFibGVQcm9wKSB7XG4gICAgICBpZiAoIXByb3BOYW1lc1tvd25FbnVtZXJhYmxlUHJvcF0pIHtcbiAgICAgICAgaWYgKGlzU2VhbGVkKG93bkVudW1lcmFibGVQcm9wLCB0YXJnZXQpKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImVudW1lcmF0ZSB0cmFwIGZhaWxlZCB0byBpbmNsdWRlIFwiK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJub24tY29uZmlndXJhYmxlIGVudW1lcmFibGUgcHJvcGVydHkgJ1wiK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3duRW51bWVyYWJsZVByb3ArXCInXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghT2JqZWN0LmlzRXh0ZW5zaWJsZSh0YXJnZXQpICYmXG4gICAgICAgICAgICBpc0ZpeGVkKG93bkVudW1lcmFibGVQcm9wLCB0YXJnZXQpKSB7XG4gICAgICAgICAgICAvLyBpZiBoYW5kbGVyIGlzIGFsbG93ZWQgbm90IHRvIHJlcG9ydCBvd25FbnVtZXJhYmxlUHJvcCBhcyBhbiBvd25cbiAgICAgICAgICAgIC8vIHByb3BlcnR5LCB3ZSBjYW5ub3QgZ3VhcmFudGVlIHRoYXQgaXQgd2lsbCBuZXZlciByZXBvcnQgaXQgYXNcbiAgICAgICAgICAgIC8vIGFuIG93biBwcm9wZXJ0eSBsYXRlci4gT25jZSBhIHByb3BlcnR5IGhhcyBiZWVuIHJlcG9ydGVkIGFzXG4gICAgICAgICAgICAvLyBub24tZXhpc3RlbnQgb24gYSBub24tZXh0ZW5zaWJsZSBvYmplY3QsIGl0IHNob3VsZCBmb3JldmVyIGJlXG4gICAgICAgICAgICAvLyByZXBvcnRlZCBhcyBub24tZXhpc3RlbnRcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJjYW5ub3QgcmVwb3J0IGV4aXN0aW5nIG93biBwcm9wZXJ0eSAnXCIrXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG93bkVudW1lcmFibGVQcm9wK1wiJyBhcyBub24tZXhpc3RlbnQgb24gYSBcIitcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJub24tZXh0ZW5zaWJsZSBvYmplY3RcIik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFRoZSBpdGVyYXRlIHRyYXAgaXMgZGVwcmVjYXRlZCBieSB0aGUgZW51bWVyYXRlIHRyYXAuXG4gICAqL1xuICBpdGVyYXRlOiBWYWxpZGF0b3IucHJvdG90eXBlLmVudW1lcmF0ZSxcblxuICAvKipcbiAgICogQW55IG93biBub24tY29uZmlndXJhYmxlIHByb3BlcnRpZXMgb2YgdGhlIHRhcmdldCB0aGF0IGFyZSBub3QgaW5jbHVkZWRcbiAgICogaW4gdGhlIHRyYXAgcmVzdWx0IGdpdmUgcmlzZSB0byBhIFR5cGVFcnJvci4gQXMgc3VjaCwgd2UgY2hlY2sgd2hldGhlciB0aGVcbiAgICogcmV0dXJuZWQgcmVzdWx0IGNvbnRhaW5zIGF0IGxlYXN0IGFsbCBzZWFsZWQgcHJvcGVydGllcyBvZiB0aGUgdGFyZ2V0XG4gICAqIG9iamVjdC5cbiAgICpcbiAgICogVGhlIHRyYXAgcmVzdWx0IGlzIG5vcm1hbGl6ZWQuXG4gICAqIFRoZSB0cmFwIHJlc3VsdCBpcyBub3QgcmV0dXJuZWQgZGlyZWN0bHkuIEluc3RlYWQ6XG4gICAqICAtIGNyZWF0ZSBhbmQgcmV0dXJuIGEgZnJlc2ggQXJyYXksXG4gICAqICAtIG9mIHdoaWNoIGVhY2ggZWxlbWVudCBpcyBjb2VyY2VkIHRvIFN0cmluZyxcbiAgICogIC0gd2hpY2ggZG9lcyBub3QgY29udGFpbiBkdXBsaWNhdGVzXG4gICAqXG4gICAqIEZJWE1FOiBrZXlzIHRyYXAgaXMgZGVwcmVjYXRlZFxuICAgKi9cbiAgLypcbiAga2V5czogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHRyYXAgPSB0aGlzLmdldFRyYXAoXCJrZXlzXCIpO1xuICAgIGlmICh0cmFwID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIGRlZmF1bHQgZm9yd2FyZGluZyBiZWhhdmlvclxuICAgICAgcmV0dXJuIFJlZmxlY3Qua2V5cyh0aGlzLnRhcmdldCk7XG4gICAgfVxuXG4gICAgdmFyIHRyYXBSZXN1bHQgPSB0cmFwLmNhbGwodGhpcy5oYW5kbGVyLCB0aGlzLnRhcmdldCk7XG5cbiAgICAvLyBwcm9wTmFtZXMgaXMgdXNlZCBhcyBhIHNldCBvZiBzdHJpbmdzXG4gICAgdmFyIHByb3BOYW1lcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdmFyIG51bVByb3BzID0gK3RyYXBSZXN1bHQubGVuZ3RoO1xuICAgIHZhciByZXN1bHQgPSBuZXcgQXJyYXkobnVtUHJvcHMpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW1Qcm9wczsgaSsrKSB7XG4gICAgIHZhciBzID0gU3RyaW5nKHRyYXBSZXN1bHRbaV0pO1xuICAgICBpZiAocHJvcE5hbWVzW3NdKSB7XG4gICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImtleXMgdHJhcCBjYW5ub3QgbGlzdCBhIFwiK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJkdXBsaWNhdGUgcHJvcGVydHkgJ1wiK3MrXCInXCIpO1xuICAgICB9XG4gICAgIGlmICghT2JqZWN0LmlzRXh0ZW5zaWJsZSh0aGlzLnRhcmdldCkgJiYgIWlzRml4ZWQocywgdGhpcy50YXJnZXQpKSB7XG4gICAgICAgLy8gbm9uLWV4dGVuc2libGUgcHJveGllcyBkb24ndCB0b2xlcmF0ZSBuZXcgb3duIHByb3BlcnR5IG5hbWVzXG4gICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImtleXMgdHJhcCBjYW5ub3QgbGlzdCBhIG5ldyBcIitcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIFwicHJvcGVydHkgJ1wiK3MrXCInIG9uIGEgbm9uLWV4dGVuc2libGUgb2JqZWN0XCIpO1xuICAgICB9XG5cbiAgICAgcHJvcE5hbWVzW3NdID0gdHJ1ZTtcbiAgICAgcmVzdWx0W2ldID0gcztcbiAgICB9XG5cbiAgICB2YXIgb3duRW51bWVyYWJsZVByb3BzID0gT2JqZWN0LmtleXModGhpcy50YXJnZXQpO1xuICAgIHZhciB0YXJnZXQgPSB0aGlzLnRhcmdldDtcbiAgICBvd25FbnVtZXJhYmxlUHJvcHMuZm9yRWFjaChmdW5jdGlvbiAob3duRW51bWVyYWJsZVByb3ApIHtcbiAgICAgIGlmICghcHJvcE5hbWVzW293bkVudW1lcmFibGVQcm9wXSkge1xuICAgICAgICBpZiAoaXNTZWFsZWQob3duRW51bWVyYWJsZVByb3AsIHRhcmdldCkpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwia2V5cyB0cmFwIGZhaWxlZCB0byBpbmNsdWRlIFwiK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJub24tY29uZmlndXJhYmxlIGVudW1lcmFibGUgcHJvcGVydHkgJ1wiK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3duRW51bWVyYWJsZVByb3ArXCInXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghT2JqZWN0LmlzRXh0ZW5zaWJsZSh0YXJnZXQpICYmXG4gICAgICAgICAgICBpc0ZpeGVkKG93bkVudW1lcmFibGVQcm9wLCB0YXJnZXQpKSB7XG4gICAgICAgICAgICAvLyBpZiBoYW5kbGVyIGlzIGFsbG93ZWQgbm90IHRvIHJlcG9ydCBvd25FbnVtZXJhYmxlUHJvcCBhcyBhbiBvd25cbiAgICAgICAgICAgIC8vIHByb3BlcnR5LCB3ZSBjYW5ub3QgZ3VhcmFudGVlIHRoYXQgaXQgd2lsbCBuZXZlciByZXBvcnQgaXQgYXNcbiAgICAgICAgICAgIC8vIGFuIG93biBwcm9wZXJ0eSBsYXRlci4gT25jZSBhIHByb3BlcnR5IGhhcyBiZWVuIHJlcG9ydGVkIGFzXG4gICAgICAgICAgICAvLyBub24tZXhpc3RlbnQgb24gYSBub24tZXh0ZW5zaWJsZSBvYmplY3QsIGl0IHNob3VsZCBmb3JldmVyIGJlXG4gICAgICAgICAgICAvLyByZXBvcnRlZCBhcyBub24tZXhpc3RlbnRcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJjYW5ub3QgcmVwb3J0IGV4aXN0aW5nIG93biBwcm9wZXJ0eSAnXCIrXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG93bkVudW1lcmFibGVQcm9wK1wiJyBhcyBub24tZXhpc3RlbnQgb24gYSBcIitcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJub24tZXh0ZW5zaWJsZSBvYmplY3RcIik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH0sXG4gICovXG4gIFxuICAvKipcbiAgICogTmV3IHRyYXAgdGhhdCByZWlmaWVzIFtbQ2FsbF1dLlxuICAgKiBJZiB0aGUgdGFyZ2V0IGlzIGEgZnVuY3Rpb24sIHRoZW4gYSBjYWxsIHRvXG4gICAqICAgcHJveHkoLi4uYXJncylcbiAgICogVHJpZ2dlcnMgdGhpcyB0cmFwXG4gICAqL1xuICBhcHBseTogZnVuY3Rpb24odGFyZ2V0LCB0aGlzQmluZGluZywgYXJncykge1xuICAgIHZhciB0cmFwID0gdGhpcy5nZXRUcmFwKFwiYXBwbHlcIik7XG4gICAgaWYgKHRyYXAgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIFJlZmxlY3QuYXBwbHkodGFyZ2V0LCB0aGlzQmluZGluZywgYXJncyk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiB0aGlzLnRhcmdldCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICByZXR1cm4gdHJhcC5jYWxsKHRoaXMuaGFuZGxlciwgdGFyZ2V0LCB0aGlzQmluZGluZywgYXJncyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJhcHBseTogXCIrIHRhcmdldCArIFwiIGlzIG5vdCBhIGZ1bmN0aW9uXCIpO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogTmV3IHRyYXAgdGhhdCByZWlmaWVzIFtbQ29uc3RydWN0XV0uXG4gICAqIElmIHRoZSB0YXJnZXQgaXMgYSBmdW5jdGlvbiwgdGhlbiBhIGNhbGwgdG9cbiAgICogICBuZXcgcHJveHkoLi4uYXJncylcbiAgICogVHJpZ2dlcnMgdGhpcyB0cmFwXG4gICAqL1xuICBjb25zdHJ1Y3Q6IGZ1bmN0aW9uKHRhcmdldCwgYXJncywgbmV3VGFyZ2V0KSB7XG4gICAgdmFyIHRyYXAgPSB0aGlzLmdldFRyYXAoXCJjb25zdHJ1Y3RcIik7XG4gICAgaWYgKHRyYXAgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIFJlZmxlY3QuY29uc3RydWN0KHRhcmdldCwgYXJncywgbmV3VGFyZ2V0KTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHRhcmdldCAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwibmV3OiBcIisgdGFyZ2V0ICsgXCIgaXMgbm90IGEgZnVuY3Rpb25cIik7XG4gICAgfVxuXG4gICAgaWYgKG5ld1RhcmdldCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBuZXdUYXJnZXQgPSB0YXJnZXQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0eXBlb2YgbmV3VGFyZ2V0ICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIm5ldzogXCIrIG5ld1RhcmdldCArIFwiIGlzIG5vdCBhIGZ1bmN0aW9uXCIpO1xuICAgICAgfSAgICAgIFxuICAgIH1cbiAgICByZXR1cm4gdHJhcC5jYWxsKHRoaXMuaGFuZGxlciwgdGFyZ2V0LCBhcmdzLCBuZXdUYXJnZXQpO1xuICB9XG59O1xuXG4vLyAtLS0tIGVuZCBvZiB0aGUgVmFsaWRhdG9yIGhhbmRsZXIgd3JhcHBlciBoYW5kbGVyIC0tLS1cblxuLy8gSW4gd2hhdCBmb2xsb3dzLCBhICdkaXJlY3QgcHJveHknIGlzIGEgcHJveHlcbi8vIHdob3NlIGhhbmRsZXIgaXMgYSBWYWxpZGF0b3IuIFN1Y2ggcHJveGllcyBjYW4gYmUgbWFkZSBub24tZXh0ZW5zaWJsZSxcbi8vIHNlYWxlZCBvciBmcm96ZW4gd2l0aG91dCBsb3NpbmcgdGhlIGFiaWxpdHkgdG8gdHJhcC5cblxuLy8gbWFwcyBkaXJlY3QgcHJveGllcyB0byB0aGVpciBWYWxpZGF0b3IgaGFuZGxlcnNcbnZhciBkaXJlY3RQcm94aWVzID0gbmV3IFdlYWtNYXAoKTtcblxuLy8gcGF0Y2ggT2JqZWN0LntwcmV2ZW50RXh0ZW5zaW9ucyxzZWFsLGZyZWV6ZX0gc28gdGhhdFxuLy8gdGhleSByZWNvZ25pemUgZml4YWJsZSBwcm94aWVzIGFuZCBhY3QgYWNjb3JkaW5nbHlcbk9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyA9IGZ1bmN0aW9uKHN1YmplY3QpIHtcbiAgdmFyIHZoYW5kbGVyID0gZGlyZWN0UHJveGllcy5nZXQoc3ViamVjdCk7XG4gIGlmICh2aGFuZGxlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKHZoYW5kbGVyLnByZXZlbnRFeHRlbnNpb25zKCkpIHtcbiAgICAgIHJldHVybiBzdWJqZWN0O1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwicHJldmVudEV4dGVuc2lvbnMgb24gXCIrc3ViamVjdCtcIiByZWplY3RlZFwiKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHByaW1fcHJldmVudEV4dGVuc2lvbnMoc3ViamVjdCk7XG4gIH1cbn07XG5PYmplY3Quc2VhbCA9IGZ1bmN0aW9uKHN1YmplY3QpIHtcbiAgc2V0SW50ZWdyaXR5TGV2ZWwoc3ViamVjdCwgXCJzZWFsZWRcIik7XG4gIHJldHVybiBzdWJqZWN0O1xufTtcbk9iamVjdC5mcmVlemUgPSBmdW5jdGlvbihzdWJqZWN0KSB7XG4gIHNldEludGVncml0eUxldmVsKHN1YmplY3QsIFwiZnJvemVuXCIpO1xuICByZXR1cm4gc3ViamVjdDtcbn07XG5PYmplY3QuaXNFeHRlbnNpYmxlID0gT2JqZWN0X2lzRXh0ZW5zaWJsZSA9IGZ1bmN0aW9uKHN1YmplY3QpIHtcbiAgdmFyIHZIYW5kbGVyID0gZGlyZWN0UHJveGllcy5nZXQoc3ViamVjdCk7XG4gIGlmICh2SGFuZGxlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHZIYW5kbGVyLmlzRXh0ZW5zaWJsZSgpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBwcmltX2lzRXh0ZW5zaWJsZShzdWJqZWN0KTtcbiAgfVxufTtcbk9iamVjdC5pc1NlYWxlZCA9IE9iamVjdF9pc1NlYWxlZCA9IGZ1bmN0aW9uKHN1YmplY3QpIHtcbiAgcmV0dXJuIHRlc3RJbnRlZ3JpdHlMZXZlbChzdWJqZWN0LCBcInNlYWxlZFwiKTtcbn07XG5PYmplY3QuaXNGcm96ZW4gPSBPYmplY3RfaXNGcm96ZW4gPSBmdW5jdGlvbihzdWJqZWN0KSB7XG4gIHJldHVybiB0ZXN0SW50ZWdyaXR5TGV2ZWwoc3ViamVjdCwgXCJmcm96ZW5cIik7XG59O1xuT2JqZWN0LmdldFByb3RvdHlwZU9mID0gT2JqZWN0X2dldFByb3RvdHlwZU9mID0gZnVuY3Rpb24oc3ViamVjdCkge1xuICB2YXIgdkhhbmRsZXIgPSBkaXJlY3RQcm94aWVzLmdldChzdWJqZWN0KTtcbiAgaWYgKHZIYW5kbGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gdkhhbmRsZXIuZ2V0UHJvdG90eXBlT2YoKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcHJpbV9nZXRQcm90b3R5cGVPZihzdWJqZWN0KTtcbiAgfVxufTtcblxuLy8gcGF0Y2ggT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciB0byBkaXJlY3RseSBjYWxsXG4vLyB0aGUgVmFsaWRhdG9yLnByb3RvdHlwZS5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgdHJhcFxuLy8gVGhpcyBpcyB0byBjaXJjdW12ZW50IGFuIGFzc2VydGlvbiBpbiB0aGUgYnVpbHQtaW4gUHJveHlcbi8vIHRyYXBwaW5nIG1lY2hhbmlzbSBvZiB2OCwgd2hpY2ggZGlzYWxsb3dzIHRoYXQgdHJhcCB0b1xuLy8gcmV0dXJuIG5vbi1jb25maWd1cmFibGUgcHJvcGVydHkgZGVzY3JpcHRvcnMgKGFzIHBlciB0aGVcbi8vIG9sZCBQcm94eSBkZXNpZ24pXG5PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZnVuY3Rpb24oc3ViamVjdCwgbmFtZSkge1xuICB2YXIgdmhhbmRsZXIgPSBkaXJlY3RQcm94aWVzLmdldChzdWJqZWN0KTtcbiAgaWYgKHZoYW5kbGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gdmhhbmRsZXIuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG5hbWUpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBwcmltX2dldE93blByb3BlcnR5RGVzY3JpcHRvcihzdWJqZWN0LCBuYW1lKTtcbiAgfVxufTtcblxuLy8gcGF0Y2ggT2JqZWN0LmRlZmluZVByb3BlcnR5IHRvIGRpcmVjdGx5IGNhbGxcbi8vIHRoZSBWYWxpZGF0b3IucHJvdG90eXBlLmRlZmluZVByb3BlcnR5IHRyYXBcbi8vIFRoaXMgaXMgdG8gY2lyY3VtdmVudCB0d28gaXNzdWVzIHdpdGggdGhlIGJ1aWx0LWluXG4vLyB0cmFwIG1lY2hhbmlzbTpcbi8vIDEpIHRoZSBjdXJyZW50IHRyYWNlbW9ua2V5IGltcGxlbWVudGF0aW9uIG9mIHByb3hpZXNcbi8vIGF1dG8tY29tcGxldGVzICdkZXNjJywgd2hpY2ggaXMgbm90IGNvcnJlY3QuICdkZXNjJyBzaG91bGQgYmVcbi8vIG5vcm1hbGl6ZWQsIGJ1dCBub3QgY29tcGxldGVkLiBDb25zaWRlcjpcbi8vIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm94eSwgJ2ZvbycsIHtlbnVtZXJhYmxlOmZhbHNlfSlcbi8vIFRoaXMgdHJhcCB3aWxsIHJlY2VpdmUgZGVzYyA9XG4vLyAge3ZhbHVlOnVuZGVmaW5lZCx3cml0YWJsZTpmYWxzZSxlbnVtZXJhYmxlOmZhbHNlLGNvbmZpZ3VyYWJsZTpmYWxzZX1cbi8vIFRoaXMgd2lsbCBhbHNvIHNldCBhbGwgb3RoZXIgYXR0cmlidXRlcyB0byB0aGVpciBkZWZhdWx0IHZhbHVlLFxuLy8gd2hpY2ggaXMgdW5leHBlY3RlZCBhbmQgZGlmZmVyZW50IGZyb20gW1tEZWZpbmVPd25Qcm9wZXJ0eV1dLlxuLy8gQnVnIGZpbGVkOiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02MDEzMjlcbi8vIDIpIHRoZSBjdXJyZW50IHNwaWRlcm1vbmtleSBpbXBsZW1lbnRhdGlvbiBkb2VzIG5vdFxuLy8gdGhyb3cgYW4gZXhjZXB0aW9uIHdoZW4gdGhpcyB0cmFwIHJldHVybnMgJ2ZhbHNlJywgYnV0IGluc3RlYWQgc2lsZW50bHlcbi8vIGlnbm9yZXMgdGhlIG9wZXJhdGlvbiAodGhpcyBpcyByZWdhcmRsZXNzIG9mIHN0cmljdC1tb2RlKVxuLy8gMmEpIHY4IGRvZXMgdGhyb3cgYW4gZXhjZXB0aW9uIGZvciB0aGlzIGNhc2UsIGJ1dCBpbmNsdWRlcyB0aGUgcmF0aGVyXG4vLyAgICAgdW5oZWxwZnVsIGVycm9yIG1lc3NhZ2U6XG4vLyAnUHJveHkgaGFuZGxlciAjPE9iamVjdD4gcmV0dXJuZWQgZmFsc2UgZnJvbSAnZGVmaW5lUHJvcGVydHknIHRyYXAnXG5PYmplY3QuZGVmaW5lUHJvcGVydHkgPSBmdW5jdGlvbihzdWJqZWN0LCBuYW1lLCBkZXNjKSB7XG4gIHZhciB2aGFuZGxlciA9IGRpcmVjdFByb3hpZXMuZ2V0KHN1YmplY3QpO1xuICBpZiAodmhhbmRsZXIgIT09IHVuZGVmaW5lZCkge1xuICAgIHZhciBub3JtYWxpemVkRGVzYyA9IG5vcm1hbGl6ZVByb3BlcnR5RGVzY3JpcHRvcihkZXNjKTtcbiAgICB2YXIgc3VjY2VzcyA9IHZoYW5kbGVyLmRlZmluZVByb3BlcnR5KG5hbWUsIG5vcm1hbGl6ZWREZXNjKTtcbiAgICBpZiAoc3VjY2VzcyA9PT0gZmFsc2UpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJjYW4ndCByZWRlZmluZSBwcm9wZXJ0eSAnXCIrbmFtZStcIidcIik7XG4gICAgfVxuICAgIHJldHVybiBzdWJqZWN0O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBwcmltX2RlZmluZVByb3BlcnR5KHN1YmplY3QsIG5hbWUsIGRlc2MpO1xuICB9XG59O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyA9IGZ1bmN0aW9uKHN1YmplY3QsIGRlc2NzKSB7XG4gIHZhciB2aGFuZGxlciA9IGRpcmVjdFByb3hpZXMuZ2V0KHN1YmplY3QpO1xuICBpZiAodmhhbmRsZXIgIT09IHVuZGVmaW5lZCkge1xuICAgIHZhciBuYW1lcyA9IE9iamVjdC5rZXlzKGRlc2NzKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5hbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgbmFtZSA9IG5hbWVzW2ldO1xuICAgICAgdmFyIG5vcm1hbGl6ZWREZXNjID0gbm9ybWFsaXplUHJvcGVydHlEZXNjcmlwdG9yKGRlc2NzW25hbWVdKTtcbiAgICAgIHZhciBzdWNjZXNzID0gdmhhbmRsZXIuZGVmaW5lUHJvcGVydHkobmFtZSwgbm9ybWFsaXplZERlc2MpO1xuICAgICAgaWYgKHN1Y2Nlc3MgPT09IGZhbHNlKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJjYW4ndCByZWRlZmluZSBwcm9wZXJ0eSAnXCIrbmFtZStcIidcIik7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzdWJqZWN0O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBwcmltX2RlZmluZVByb3BlcnRpZXMoc3ViamVjdCwgZGVzY3MpO1xuICB9XG59O1xuXG5PYmplY3Qua2V5cyA9IGZ1bmN0aW9uKHN1YmplY3QpIHtcbiAgdmFyIHZIYW5kbGVyID0gZGlyZWN0UHJveGllcy5nZXQoc3ViamVjdCk7XG4gIGlmICh2SGFuZGxlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgdmFyIG93bktleXMgPSB2SGFuZGxlci5vd25LZXlzKCk7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb3duS2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGsgPSBTdHJpbmcob3duS2V5c1tpXSk7XG4gICAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc3ViamVjdCwgayk7XG4gICAgICBpZiAoZGVzYyAhPT0gdW5kZWZpbmVkICYmIGRlc2MuZW51bWVyYWJsZSA9PT0gdHJ1ZSkge1xuICAgICAgICByZXN1bHQucHVzaChrKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcHJpbV9rZXlzKHN1YmplY3QpO1xuICB9XG59XG5cbk9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzID0gT2JqZWN0X2dldE93blByb3BlcnR5TmFtZXMgPSBmdW5jdGlvbihzdWJqZWN0KSB7XG4gIHZhciB2SGFuZGxlciA9IGRpcmVjdFByb3hpZXMuZ2V0KHN1YmplY3QpO1xuICBpZiAodkhhbmRsZXIgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiB2SGFuZGxlci5vd25LZXlzKCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHByaW1fZ2V0T3duUHJvcGVydHlOYW1lcyhzdWJqZWN0KTtcbiAgfVxufVxuXG4vLyBmaXhlcyBpc3N1ZSAjNzEgKENhbGxpbmcgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scygpIG9uIGEgUHJveHlcbi8vIHRocm93cyBhbiBlcnJvcilcbmlmIChwcmltX2dldE93blByb3BlcnR5U3ltYm9scyAhPT0gdW5kZWZpbmVkKSB7XG4gIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBmdW5jdGlvbihzdWJqZWN0KSB7XG4gICAgdmFyIHZIYW5kbGVyID0gZGlyZWN0UHJveGllcy5nZXQoc3ViamVjdCk7XG4gICAgaWYgKHZIYW5kbGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIGFzIHRoaXMgc2hpbSBkb2VzIG5vdCBzdXBwb3J0IHN5bWJvbHMsIGEgUHJveHkgbmV2ZXIgYWR2ZXJ0aXNlc1xuICAgICAgLy8gYW55IHN5bWJvbC12YWx1ZWQgb3duIHByb3BlcnRpZXNcbiAgICAgIHJldHVybiBbXTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHByaW1fZ2V0T3duUHJvcGVydHlTeW1ib2xzKHN1YmplY3QpO1xuICAgIH1cbiAgfTtcbn1cblxuLy8gZml4ZXMgaXNzdWUgIzcyICgnSWxsZWdhbCBhY2Nlc3MnIGVycm9yIHdoZW4gdXNpbmcgT2JqZWN0LmFzc2lnbilcbi8vIE9iamVjdC5hc3NpZ24gcG9seWZpbGwgYmFzZWQgb24gYSBwb2x5ZmlsbCBwb3N0ZWQgb24gTUROOiBcbi8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL1xcXG4vLyAgR2xvYmFsX09iamVjdHMvT2JqZWN0L2Fzc2lnblxuLy8gTm90ZSB0aGF0IHRoaXMgcG9seWZpbGwgZG9lcyBub3Qgc3VwcG9ydCBTeW1ib2xzLCBidXQgdGhpcyBQcm94eSBTaGltXG4vLyBkb2VzIG5vdCBzdXBwb3J0IFN5bWJvbHMgYW55d2F5LlxuaWYgKHByaW1fYXNzaWduICE9PSB1bmRlZmluZWQpIHtcbiAgT2JqZWN0LmFzc2lnbiA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBcbiAgICAvLyBjaGVjayBpZiBhbnkgYXJndW1lbnQgaXMgYSBwcm94eSBvYmplY3RcbiAgICB2YXIgbm9Qcm94aWVzID0gdHJ1ZTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHZIYW5kbGVyID0gZGlyZWN0UHJveGllcy5nZXQoYXJndW1lbnRzW2ldKTtcbiAgICAgIGlmICh2SGFuZGxlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIG5vUHJveGllcyA9IGZhbHNlO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG5vUHJveGllcykge1xuICAgICAgLy8gbm90IGEgc2luZ2xlIGFyZ3VtZW50IGlzIGEgcHJveHksIHBlcmZvcm0gYnVpbHQtaW4gYWxnb3JpdGhtXG4gICAgICByZXR1cm4gcHJpbV9hc3NpZ24uYXBwbHkoT2JqZWN0LCBhcmd1bWVudHMpO1xuICAgIH1cbiAgICBcbiAgICAvLyB0aGVyZSBpcyBhdCBsZWFzdCBvbmUgcHJveHkgYXJndW1lbnQsIHVzZSB0aGUgcG9seWZpbGxcbiAgICBcbiAgICBpZiAodGFyZ2V0ID09PSB1bmRlZmluZWQgfHwgdGFyZ2V0ID09PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY29udmVydCB1bmRlZmluZWQgb3IgbnVsbCB0byBvYmplY3QnKTtcbiAgICB9XG5cbiAgICB2YXIgb3V0cHV0ID0gT2JqZWN0KHRhcmdldCk7XG4gICAgZm9yICh2YXIgaW5kZXggPSAxOyBpbmRleCA8IGFyZ3VtZW50cy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaW5kZXhdO1xuICAgICAgaWYgKHNvdXJjZSAhPT0gdW5kZWZpbmVkICYmIHNvdXJjZSAhPT0gbnVsbCkge1xuICAgICAgICBmb3IgKHZhciBuZXh0S2V5IGluIHNvdXJjZSkge1xuICAgICAgICAgIGlmIChzb3VyY2UuaGFzT3duUHJvcGVydHkobmV4dEtleSkpIHtcbiAgICAgICAgICAgIG91dHB1dFtuZXh0S2V5XSA9IHNvdXJjZVtuZXh0S2V5XTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG91dHB1dDtcbiAgfTtcbn1cblxuLy8gcmV0dXJucyB3aGV0aGVyIGFuIGFyZ3VtZW50IGlzIGEgcmVmZXJlbmNlIHRvIGFuIG9iamVjdCxcbi8vIHdoaWNoIGlzIGxlZ2FsIGFzIGEgV2Vha01hcCBrZXkuXG5mdW5jdGlvbiBpc09iamVjdChhcmcpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgYXJnO1xuICByZXR1cm4gKHR5cGUgPT09ICdvYmplY3QnICYmIGFyZyAhPT0gbnVsbCkgfHwgKHR5cGUgPT09ICdmdW5jdGlvbicpO1xufTtcblxuLy8gYSB3cmFwcGVyIGZvciBXZWFrTWFwLmdldCB3aGljaCByZXR1cm5zIHRoZSB1bmRlZmluZWQgdmFsdWVcbi8vIGZvciBrZXlzIHRoYXQgYXJlIG5vdCBvYmplY3RzIChpbiB3aGljaCBjYXNlIHRoZSB1bmRlcmx5aW5nXG4vLyBXZWFrTWFwIHdvdWxkIGhhdmUgdGhyb3duIGEgVHlwZUVycm9yKS5cbmZ1bmN0aW9uIHNhZmVXZWFrTWFwR2V0KG1hcCwga2V5KSB7XG4gIHJldHVybiBpc09iamVjdChrZXkpID8gbWFwLmdldChrZXkpIDogdW5kZWZpbmVkO1xufTtcblxuLy8gcmV0dXJucyBhIG5ldyBmdW5jdGlvbiBvZiB6ZXJvIGFyZ3VtZW50cyB0aGF0IHJlY3Vyc2l2ZWx5XG4vLyB1bndyYXBzIGFueSBwcm94aWVzIHNwZWNpZmllZCBhcyB0aGUgfHRoaXN8LXZhbHVlLlxuLy8gVGhlIHByaW1pdGl2ZSBpcyBhc3N1bWVkIHRvIGJlIGEgemVyby1hcmd1bWVudCBtZXRob2Rcbi8vIHRoYXQgdXNlcyBpdHMgfHRoaXN8LWJpbmRpbmcuXG5mdW5jdGlvbiBtYWtlVW53cmFwcGluZzBBcmdNZXRob2QocHJpbWl0aXZlKSB7XG4gIHJldHVybiBmdW5jdGlvbiBidWlsdGluKCkge1xuICAgIHZhciB2SGFuZGxlciA9IHNhZmVXZWFrTWFwR2V0KGRpcmVjdFByb3hpZXMsIHRoaXMpO1xuICAgIGlmICh2SGFuZGxlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gYnVpbHRpbi5jYWxsKHZIYW5kbGVyLnRhcmdldCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBwcmltaXRpdmUuY2FsbCh0aGlzKTtcbiAgICB9XG4gIH1cbn07XG5cbi8vIHJldHVybnMgYSBuZXcgZnVuY3Rpb24gb2YgMSBhcmd1bWVudHMgdGhhdCByZWN1cnNpdmVseVxuLy8gdW53cmFwcyBhbnkgcHJveGllcyBzcGVjaWZpZWQgYXMgdGhlIHx0aGlzfC12YWx1ZS5cbi8vIFRoZSBwcmltaXRpdmUgaXMgYXNzdW1lZCB0byBiZSBhIDEtYXJndW1lbnQgbWV0aG9kXG4vLyB0aGF0IHVzZXMgaXRzIHx0aGlzfC1iaW5kaW5nLlxuZnVuY3Rpb24gbWFrZVVud3JhcHBpbmcxQXJnTWV0aG9kKHByaW1pdGl2ZSkge1xuICByZXR1cm4gZnVuY3Rpb24gYnVpbHRpbihhcmcpIHtcbiAgICB2YXIgdkhhbmRsZXIgPSBzYWZlV2Vha01hcEdldChkaXJlY3RQcm94aWVzLCB0aGlzKTtcbiAgICBpZiAodkhhbmRsZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGJ1aWx0aW4uY2FsbCh2SGFuZGxlci50YXJnZXQsIGFyZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBwcmltaXRpdmUuY2FsbCh0aGlzLCBhcmcpO1xuICAgIH1cbiAgfVxufTtcblxuT2JqZWN0LnByb3RvdHlwZS52YWx1ZU9mID1cbiAgbWFrZVVud3JhcHBpbmcwQXJnTWV0aG9kKE9iamVjdC5wcm90b3R5cGUudmFsdWVPZik7XG5PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nID1cbiAgbWFrZVVud3JhcHBpbmcwQXJnTWV0aG9kKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcpO1xuRnVuY3Rpb24ucHJvdG90eXBlLnRvU3RyaW5nID1cbiAgbWFrZVVud3JhcHBpbmcwQXJnTWV0aG9kKEZ1bmN0aW9uLnByb3RvdHlwZS50b1N0cmluZyk7XG5EYXRlLnByb3RvdHlwZS50b1N0cmluZyA9XG4gIG1ha2VVbndyYXBwaW5nMEFyZ01ldGhvZChEYXRlLnByb3RvdHlwZS50b1N0cmluZyk7XG5cbk9iamVjdC5wcm90b3R5cGUuaXNQcm90b3R5cGVPZiA9IGZ1bmN0aW9uIGJ1aWx0aW4oYXJnKSB7XG4gIC8vIGJ1Z2ZpeCB0aGFua3MgdG8gQmlsbCBNYXJrOlxuICAvLyBidWlsdC1pbiBpc1Byb3RvdHlwZU9mIGRvZXMgbm90IHVud3JhcCBwcm94aWVzIHVzZWRcbiAgLy8gYXMgYXJndW1lbnRzLiBTbywgd2UgaW1wbGVtZW50IHRoZSBidWlsdGluIG91cnNlbHZlcyxcbiAgLy8gYmFzZWQgb24gdGhlIEVDTUFTY3JpcHQgNiBzcGVjLiBPdXIgZW5jb2Rpbmcgd2lsbFxuICAvLyBtYWtlIHN1cmUgdGhhdCBpZiBhIHByb3h5IGlzIHVzZWQgYXMgYW4gYXJndW1lbnQsXG4gIC8vIGl0cyBnZXRQcm90b3R5cGVPZiB0cmFwIHdpbGwgYmUgY2FsbGVkLlxuICB3aGlsZSAodHJ1ZSkge1xuICAgIHZhciB2SGFuZGxlcjIgPSBzYWZlV2Vha01hcEdldChkaXJlY3RQcm94aWVzLCBhcmcpO1xuICAgIGlmICh2SGFuZGxlcjIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgYXJnID0gdkhhbmRsZXIyLmdldFByb3RvdHlwZU9mKCk7XG4gICAgICBpZiAoYXJnID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH0gZWxzZSBpZiAoc2FtZVZhbHVlKGFyZywgdGhpcykpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBwcmltX2lzUHJvdG90eXBlT2YuY2FsbCh0aGlzLCBhcmcpO1xuICAgIH1cbiAgfVxufTtcblxuQXJyYXkuaXNBcnJheSA9IGZ1bmN0aW9uKHN1YmplY3QpIHtcbiAgdmFyIHZIYW5kbGVyID0gc2FmZVdlYWtNYXBHZXQoZGlyZWN0UHJveGllcywgc3ViamVjdCk7XG4gIGlmICh2SGFuZGxlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkodkhhbmRsZXIudGFyZ2V0KTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcHJpbV9pc0FycmF5KHN1YmplY3QpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBpc1Byb3h5QXJyYXkoYXJnKSB7XG4gIHZhciB2SGFuZGxlciA9IHNhZmVXZWFrTWFwR2V0KGRpcmVjdFByb3hpZXMsIGFyZyk7XG4gIGlmICh2SGFuZGxlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkodkhhbmRsZXIudGFyZ2V0KTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8vIEFycmF5LnByb3RvdHlwZS5jb25jYXQgaW50ZXJuYWxseSB0ZXN0cyB3aGV0aGVyIG9uZSBvZiBpdHNcbi8vIGFyZ3VtZW50cyBpcyBhbiBBcnJheSwgYnkgY2hlY2tpbmcgd2hldGhlciBbW0NsYXNzXV0gPT0gXCJBcnJheVwiXG4vLyBBcyBzdWNoLCBpdCB3aWxsIGZhaWwgdG8gcmVjb2duaXplIHByb3hpZXMtZm9yLWFycmF5cyBhcyBhcnJheXMuXG4vLyBXZSBwYXRjaCBBcnJheS5wcm90b3R5cGUuY29uY2F0IHNvIHRoYXQgaXQgXCJ1bndyYXBzXCIgcHJveGllcy1mb3ItYXJyYXlzXG4vLyBieSBtYWtpbmcgYSBjb3B5LiBUaGlzIHdpbGwgdHJpZ2dlciB0aGUgZXhhY3Qgc2FtZSBzZXF1ZW5jZSBvZlxuLy8gdHJhcHMgb24gdGhlIHByb3h5LWZvci1hcnJheSBhcyBpZiB3ZSB3b3VsZCBub3QgaGF2ZSB1bndyYXBwZWQgaXQuXG4vLyBTZWUgPGh0dHBzOi8vZ2l0aHViLmNvbS90dmN1dHNlbS9oYXJtb255LXJlZmxlY3QvaXNzdWVzLzE5PiBmb3IgbW9yZS5cbkFycmF5LnByb3RvdHlwZS5jb25jYXQgPSBmdW5jdGlvbigvKi4uLmFyZ3MqLykge1xuICB2YXIgbGVuZ3RoO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIGlmIChpc1Byb3h5QXJyYXkoYXJndW1lbnRzW2ldKSkge1xuICAgICAgbGVuZ3RoID0gYXJndW1lbnRzW2ldLmxlbmd0aDtcbiAgICAgIGFyZ3VtZW50c1tpXSA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50c1tpXSwgMCwgbGVuZ3RoKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHByaW1fY29uY2F0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59O1xuXG4vLyBzZXRQcm90b3R5cGVPZiBzdXBwb3J0IG9uIHBsYXRmb3JtcyB0aGF0IHN1cHBvcnQgX19wcm90b19fXG5cbnZhciBwcmltX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mO1xuXG4vLyBwYXRjaCBhbmQgZXh0cmFjdCBvcmlnaW5hbCBfX3Byb3RvX18gc2V0dGVyXG52YXIgX19wcm90b19fc2V0dGVyID0gKGZ1bmN0aW9uKCkge1xuICB2YXIgcHJvdG9EZXNjID0gcHJpbV9nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoT2JqZWN0LnByb3RvdHlwZSwnX19wcm90b19fJyk7XG4gIGlmIChwcm90b0Rlc2MgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgdHlwZW9mIHByb3RvRGVzYy5zZXQgIT09IFwiZnVuY3Rpb25cIikge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJzZXRQcm90b3R5cGVPZiBub3Qgc3VwcG9ydGVkIG9uIHRoaXMgcGxhdGZvcm1cIik7XG4gICAgfVxuICB9XG5cbiAgLy8gc2VlIGlmIHdlIGNhbiBhY3R1YWxseSBtdXRhdGUgYSBwcm90b3R5cGUgd2l0aCB0aGUgZ2VuZXJpYyBzZXR0ZXJcbiAgLy8gKGUuZy4gQ2hyb21lIHYyOCBkb2Vzbid0IGFsbG93IHNldHRpbmcgX19wcm90b19fIHZpYSB0aGUgZ2VuZXJpYyBzZXR0ZXIpXG4gIHRyeSB7XG4gICAgcHJvdG9EZXNjLnNldC5jYWxsKHt9LHt9KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJzZXRQcm90b3R5cGVPZiBub3Qgc3VwcG9ydGVkIG9uIHRoaXMgcGxhdGZvcm1cIik7XG4gICAgfVxuICB9XG5cbiAgcHJpbV9kZWZpbmVQcm9wZXJ0eShPYmplY3QucHJvdG90eXBlLCAnX19wcm90b19fJywge1xuICAgIHNldDogZnVuY3Rpb24obmV3UHJvdG8pIHtcbiAgICAgIHJldHVybiBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgT2JqZWN0KG5ld1Byb3RvKSk7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gcHJvdG9EZXNjLnNldDtcbn0oKSk7XG5cbk9iamVjdC5zZXRQcm90b3R5cGVPZiA9IGZ1bmN0aW9uKHRhcmdldCwgbmV3UHJvdG8pIHtcbiAgdmFyIGhhbmRsZXIgPSBkaXJlY3RQcm94aWVzLmdldCh0YXJnZXQpO1xuICBpZiAoaGFuZGxlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKGhhbmRsZXIuc2V0UHJvdG90eXBlT2YobmV3UHJvdG8pKSB7XG4gICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwicHJveHkgcmVqZWN0ZWQgcHJvdG90eXBlIG11dGF0aW9uXCIpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoIU9iamVjdF9pc0V4dGVuc2libGUodGFyZ2V0KSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImNhbid0IHNldCBwcm90b3R5cGUgb24gbm9uLWV4dGVuc2libGUgb2JqZWN0OiBcIiArXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldCk7XG4gICAgfVxuICAgIGlmIChwcmltX3NldFByb3RvdHlwZU9mKVxuICAgICAgcmV0dXJuIHByaW1fc2V0UHJvdG90eXBlT2YodGFyZ2V0LCBuZXdQcm90byk7XG5cbiAgICBpZiAoT2JqZWN0KG5ld1Byb3RvKSAhPT0gbmV3UHJvdG8gfHwgbmV3UHJvdG8gPT09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJPYmplY3QgcHJvdG90eXBlIG1heSBvbmx5IGJlIGFuIE9iamVjdCBvciBudWxsOiBcIiArXG4gICAgICAgICAgICAgICAgICAgICAgICAgbmV3UHJvdG8pO1xuICAgICAgLy8gdGhyb3cgbmV3IFR5cGVFcnJvcihcInByb3RvdHlwZSBtdXN0IGJlIGFuIG9iamVjdCBvciBudWxsXCIpXG4gICAgfVxuICAgIF9fcHJvdG9fX3NldHRlci5jYWxsKHRhcmdldCwgbmV3UHJvdG8pO1xuICAgIHJldHVybiB0YXJnZXQ7XG4gIH1cbn1cblxuT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgdmFyIGhhbmRsZXIgPSBzYWZlV2Vha01hcEdldChkaXJlY3RQcm94aWVzLCB0aGlzKTtcbiAgaWYgKGhhbmRsZXIgIT09IHVuZGVmaW5lZCkge1xuICAgIHZhciBkZXNjID0gaGFuZGxlci5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobmFtZSk7XG4gICAgcmV0dXJuIGRlc2MgIT09IHVuZGVmaW5lZDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcHJpbV9oYXNPd25Qcm9wZXJ0eS5jYWxsKHRoaXMsIG5hbWUpO1xuICB9XG59XG5cbi8vID09PT09PT09PT09PT0gUmVmbGVjdGlvbiBtb2R1bGUgPT09PT09PT09PT09PVxuLy8gc2VlIGh0dHA6Ly93aWtpLmVjbWFzY3JpcHQub3JnL2Rva3UucGhwP2lkPWhhcm1vbnk6cmVmbGVjdF9hcGlcblxudmFyIFJlZmxlY3QgPSBnbG9iYWwuUmVmbGVjdCA9IHtcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiBmdW5jdGlvbih0YXJnZXQsIG5hbWUpIHtcbiAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIG5hbWUpO1xuICB9LFxuICBkZWZpbmVQcm9wZXJ0eTogZnVuY3Rpb24odGFyZ2V0LCBuYW1lLCBkZXNjKSB7XG5cbiAgICAvLyBpZiB0YXJnZXQgaXMgYSBwcm94eSwgaW52b2tlIGl0cyBcImRlZmluZVByb3BlcnR5XCIgdHJhcFxuICAgIHZhciBoYW5kbGVyID0gZGlyZWN0UHJveGllcy5nZXQodGFyZ2V0KTtcbiAgICBpZiAoaGFuZGxlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gaGFuZGxlci5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIG5hbWUsIGRlc2MpO1xuICAgIH1cblxuICAgIC8vIEltcGxlbWVudGF0aW9uIHRyYW5zbGl0ZXJhdGVkIGZyb20gW1tEZWZpbmVPd25Qcm9wZXJ0eV1dXG4gICAgLy8gc2VlIEVTNS4xIHNlY3Rpb24gOC4xMi45XG4gICAgLy8gdGhpcyBpcyB0aGUgX2V4YWN0IHNhbWUgYWxnb3JpdGhtXyBhcyB0aGUgaXNDb21wYXRpYmxlRGVzY3JpcHRvclxuICAgIC8vIGFsZ29yaXRobSBkZWZpbmVkIGFib3ZlLCBleGNlcHQgdGhhdCBhdCBldmVyeSBwbGFjZSBpdFxuICAgIC8vIHJldHVybnMgdHJ1ZSwgdGhpcyBhbGdvcml0aG0gYWN0dWFsbHkgZG9lcyBkZWZpbmUgdGhlIHByb3BlcnR5LlxuICAgIHZhciBjdXJyZW50ID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIG5hbWUpO1xuICAgIHZhciBleHRlbnNpYmxlID0gT2JqZWN0LmlzRXh0ZW5zaWJsZSh0YXJnZXQpO1xuICAgIGlmIChjdXJyZW50ID09PSB1bmRlZmluZWQgJiYgZXh0ZW5zaWJsZSA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKGN1cnJlbnQgPT09IHVuZGVmaW5lZCAmJiBleHRlbnNpYmxlID09PSB0cnVlKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBuYW1lLCBkZXNjKTsgLy8gc2hvdWxkIG5ldmVyIGZhaWxcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoaXNFbXB0eURlc2NyaXB0b3IoZGVzYykpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoaXNFcXVpdmFsZW50RGVzY3JpcHRvcihjdXJyZW50LCBkZXNjKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmIChjdXJyZW50LmNvbmZpZ3VyYWJsZSA9PT0gZmFsc2UpIHtcbiAgICAgIGlmIChkZXNjLmNvbmZpZ3VyYWJsZSA9PT0gdHJ1ZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAoJ2VudW1lcmFibGUnIGluIGRlc2MgJiYgZGVzYy5lbnVtZXJhYmxlICE9PSBjdXJyZW50LmVudW1lcmFibGUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaXNHZW5lcmljRGVzY3JpcHRvcihkZXNjKSkge1xuICAgICAgLy8gbm8gZnVydGhlciB2YWxpZGF0aW9uIG5lY2Vzc2FyeVxuICAgIH0gZWxzZSBpZiAoaXNEYXRhRGVzY3JpcHRvcihjdXJyZW50KSAhPT0gaXNEYXRhRGVzY3JpcHRvcihkZXNjKSkge1xuICAgICAgaWYgKGN1cnJlbnQuY29uZmlndXJhYmxlID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc0RhdGFEZXNjcmlwdG9yKGN1cnJlbnQpICYmIGlzRGF0YURlc2NyaXB0b3IoZGVzYykpIHtcbiAgICAgIGlmIChjdXJyZW50LmNvbmZpZ3VyYWJsZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgaWYgKGN1cnJlbnQud3JpdGFibGUgPT09IGZhbHNlICYmIGRlc2Mud3JpdGFibGUgPT09IHRydWUpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGN1cnJlbnQud3JpdGFibGUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgaWYgKCd2YWx1ZScgaW4gZGVzYyAmJiAhc2FtZVZhbHVlKGRlc2MudmFsdWUsIGN1cnJlbnQudmFsdWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc0FjY2Vzc29yRGVzY3JpcHRvcihjdXJyZW50KSAmJiBpc0FjY2Vzc29yRGVzY3JpcHRvcihkZXNjKSkge1xuICAgICAgaWYgKGN1cnJlbnQuY29uZmlndXJhYmxlID09PSBmYWxzZSkge1xuICAgICAgICBpZiAoJ3NldCcgaW4gZGVzYyAmJiAhc2FtZVZhbHVlKGRlc2Muc2V0LCBjdXJyZW50LnNldCkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCdnZXQnIGluIGRlc2MgJiYgIXNhbWVWYWx1ZShkZXNjLmdldCwgY3VycmVudC5nZXQpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIG5hbWUsIGRlc2MpOyAvLyBzaG91bGQgbmV2ZXIgZmFpbFxuICAgIHJldHVybiB0cnVlO1xuICB9LFxuICBkZWxldGVQcm9wZXJ0eTogZnVuY3Rpb24odGFyZ2V0LCBuYW1lKSB7XG4gICAgdmFyIGhhbmRsZXIgPSBkaXJlY3RQcm94aWVzLmdldCh0YXJnZXQpO1xuICAgIGlmIChoYW5kbGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBoYW5kbGVyLmRlbGV0ZShuYW1lKTtcbiAgICB9XG4gICAgXG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwgbmFtZSk7XG4gICAgaWYgKGRlc2MgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmIChkZXNjLmNvbmZpZ3VyYWJsZSA9PT0gdHJ1ZSkge1xuICAgICAgZGVsZXRlIHRhcmdldFtuYW1lXTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7ICAgIFxuICB9LFxuICBnZXRQcm90b3R5cGVPZjogZnVuY3Rpb24odGFyZ2V0KSB7XG4gICAgcmV0dXJuIE9iamVjdC5nZXRQcm90b3R5cGVPZih0YXJnZXQpO1xuICB9LFxuICBzZXRQcm90b3R5cGVPZjogZnVuY3Rpb24odGFyZ2V0LCBuZXdQcm90bykge1xuICAgIFxuICAgIHZhciBoYW5kbGVyID0gZGlyZWN0UHJveGllcy5nZXQodGFyZ2V0KTtcbiAgICBpZiAoaGFuZGxlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gaGFuZGxlci5zZXRQcm90b3R5cGVPZihuZXdQcm90byk7XG4gICAgfVxuICAgIFxuICAgIGlmIChPYmplY3QobmV3UHJvdG8pICE9PSBuZXdQcm90byB8fCBuZXdQcm90byA9PT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIk9iamVjdCBwcm90b3R5cGUgbWF5IG9ubHkgYmUgYW4gT2JqZWN0IG9yIG51bGw6IFwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgICBuZXdQcm90byk7XG4gICAgfVxuICAgIFxuICAgIGlmICghT2JqZWN0X2lzRXh0ZW5zaWJsZSh0YXJnZXQpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIFxuICAgIHZhciBjdXJyZW50ID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHRhcmdldCk7XG4gICAgaWYgKHNhbWVWYWx1ZShjdXJyZW50LCBuZXdQcm90bykpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBcbiAgICBpZiAocHJpbV9zZXRQcm90b3R5cGVPZikge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcHJpbV9zZXRQcm90b3R5cGVPZih0YXJnZXQsIG5ld1Byb3RvKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBfX3Byb3RvX19zZXR0ZXIuY2FsbCh0YXJnZXQsIG5ld1Byb3RvKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSxcbiAgcHJldmVudEV4dGVuc2lvbnM6IGZ1bmN0aW9uKHRhcmdldCkge1xuICAgIHZhciBoYW5kbGVyID0gZGlyZWN0UHJveGllcy5nZXQodGFyZ2V0KTtcbiAgICBpZiAoaGFuZGxlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gaGFuZGxlci5wcmV2ZW50RXh0ZW5zaW9ucygpO1xuICAgIH1cbiAgICBwcmltX3ByZXZlbnRFeHRlbnNpb25zKHRhcmdldCk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0sXG4gIGlzRXh0ZW5zaWJsZTogZnVuY3Rpb24odGFyZ2V0KSB7XG4gICAgcmV0dXJuIE9iamVjdC5pc0V4dGVuc2libGUodGFyZ2V0KTtcbiAgfSxcbiAgaGFzOiBmdW5jdGlvbih0YXJnZXQsIG5hbWUpIHtcbiAgICByZXR1cm4gbmFtZSBpbiB0YXJnZXQ7XG4gIH0sXG4gIGdldDogZnVuY3Rpb24odGFyZ2V0LCBuYW1lLCByZWNlaXZlcikge1xuICAgIHJlY2VpdmVyID0gcmVjZWl2ZXIgfHwgdGFyZ2V0O1xuXG4gICAgLy8gaWYgdGFyZ2V0IGlzIGEgcHJveHksIGludm9rZSBpdHMgXCJnZXRcIiB0cmFwXG4gICAgdmFyIGhhbmRsZXIgPSBkaXJlY3RQcm94aWVzLmdldCh0YXJnZXQpO1xuICAgIGlmIChoYW5kbGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBoYW5kbGVyLmdldChyZWNlaXZlciwgbmFtZSk7XG4gICAgfVxuXG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwgbmFtZSk7XG4gICAgaWYgKGRlc2MgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdmFyIHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHRhcmdldCk7XG4gICAgICBpZiAocHJvdG8gPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBSZWZsZWN0LmdldChwcm90bywgbmFtZSwgcmVjZWl2ZXIpO1xuICAgIH1cbiAgICBpZiAoaXNEYXRhRGVzY3JpcHRvcihkZXNjKSkge1xuICAgICAgcmV0dXJuIGRlc2MudmFsdWU7XG4gICAgfVxuICAgIHZhciBnZXR0ZXIgPSBkZXNjLmdldDtcbiAgICBpZiAoZ2V0dGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHJldHVybiBkZXNjLmdldC5jYWxsKHJlY2VpdmVyKTtcbiAgfSxcbiAgLy8gUmVmbGVjdC5zZXQgaW1wbGVtZW50YXRpb24gYmFzZWQgb24gbGF0ZXN0IHZlcnNpb24gb2YgW1tTZXRQXV0gYXRcbiAgLy8gaHR0cDovL3dpa2kuZWNtYXNjcmlwdC5vcmcvZG9rdS5waHA/aWQ9aGFybW9ueTpwcm90b19jbGltYmluZ19yZWZhY3RvcmluZ1xuICBzZXQ6IGZ1bmN0aW9uKHRhcmdldCwgbmFtZSwgdmFsdWUsIHJlY2VpdmVyKSB7XG4gICAgcmVjZWl2ZXIgPSByZWNlaXZlciB8fCB0YXJnZXQ7XG5cbiAgICAvLyBpZiB0YXJnZXQgaXMgYSBwcm94eSwgaW52b2tlIGl0cyBcInNldFwiIHRyYXBcbiAgICB2YXIgaGFuZGxlciA9IGRpcmVjdFByb3hpZXMuZ2V0KHRhcmdldCk7XG4gICAgaWYgKGhhbmRsZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGhhbmRsZXIuc2V0KHJlY2VpdmVyLCBuYW1lLCB2YWx1ZSk7XG4gICAgfVxuXG4gICAgLy8gZmlyc3QsIGNoZWNrIHdoZXRoZXIgdGFyZ2V0IGhhcyBhIG5vbi13cml0YWJsZSBwcm9wZXJ0eVxuICAgIC8vIHNoYWRvd2luZyBuYW1lIG9uIHJlY2VpdmVyXG4gICAgdmFyIG93bkRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwgbmFtZSk7XG5cbiAgICBpZiAob3duRGVzYyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBuYW1lIGlzIG5vdCBkZWZpbmVkIGluIHRhcmdldCwgc2VhcmNoIHRhcmdldCdzIHByb3RvdHlwZVxuICAgICAgdmFyIHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHRhcmdldCk7XG5cbiAgICAgIGlmIChwcm90byAhPT0gbnVsbCkge1xuICAgICAgICAvLyBjb250aW51ZSB0aGUgc2VhcmNoIGluIHRhcmdldCdzIHByb3RvdHlwZVxuICAgICAgICByZXR1cm4gUmVmbGVjdC5zZXQocHJvdG8sIG5hbWUsIHZhbHVlLCByZWNlaXZlcik7XG4gICAgICB9XG5cbiAgICAgIC8vIFJldjE2IGNoYW5nZS4gQ2YuIGh0dHBzOi8vYnVncy5lY21hc2NyaXB0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTU0OVxuICAgICAgLy8gdGFyZ2V0IHdhcyB0aGUgbGFzdCBwcm90b3R5cGUsIG5vdyB3ZSBrbm93IHRoYXQgJ25hbWUnIGlzIG5vdCBzaGFkb3dlZFxuICAgICAgLy8gYnkgYW4gZXhpc3RpbmcgKGFjY2Vzc29yIG9yIGRhdGEpIHByb3BlcnR5LCBzbyB3ZSBjYW4gYWRkIHRoZSBwcm9wZXJ0eVxuICAgICAgLy8gdG8gdGhlIGluaXRpYWwgcmVjZWl2ZXIgb2JqZWN0XG4gICAgICAvLyAodGhpcyBicmFuY2ggd2lsbCBpbnRlbnRpb25hbGx5IGZhbGwgdGhyb3VnaCB0byB0aGUgY29kZSBiZWxvdylcbiAgICAgIG93bkRlc2MgPVxuICAgICAgICB7IHZhbHVlOiB1bmRlZmluZWQsXG4gICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUgfTtcbiAgICB9XG5cbiAgICAvLyB3ZSBub3cga25vdyB0aGF0IG93bkRlc2MgIT09IHVuZGVmaW5lZFxuICAgIGlmIChpc0FjY2Vzc29yRGVzY3JpcHRvcihvd25EZXNjKSkge1xuICAgICAgdmFyIHNldHRlciA9IG93bkRlc2Muc2V0O1xuICAgICAgaWYgKHNldHRlciA9PT0gdW5kZWZpbmVkKSByZXR1cm4gZmFsc2U7XG4gICAgICBzZXR0ZXIuY2FsbChyZWNlaXZlciwgdmFsdWUpOyAvLyBhc3N1bWVzIEZ1bmN0aW9uLnByb3RvdHlwZS5jYWxsXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgLy8gb3RoZXJ3aXNlLCBpc0RhdGFEZXNjcmlwdG9yKG93bkRlc2MpIG11c3QgYmUgdHJ1ZVxuICAgIGlmIChvd25EZXNjLndyaXRhYmxlID09PSBmYWxzZSkgcmV0dXJuIGZhbHNlO1xuICAgIC8vIHdlIGZvdW5kIGFuIGV4aXN0aW5nIHdyaXRhYmxlIGRhdGEgcHJvcGVydHkgb24gdGhlIHByb3RvdHlwZSBjaGFpbi5cbiAgICAvLyBOb3cgdXBkYXRlIG9yIGFkZCB0aGUgZGF0YSBwcm9wZXJ0eSBvbiB0aGUgcmVjZWl2ZXIsIGRlcGVuZGluZyBvblxuICAgIC8vIHdoZXRoZXIgdGhlIHJlY2VpdmVyIGFscmVhZHkgZGVmaW5lcyB0aGUgcHJvcGVydHkgb3Igbm90LlxuICAgIHZhciBleGlzdGluZ0Rlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHJlY2VpdmVyLCBuYW1lKTtcbiAgICBpZiAoZXhpc3RpbmdEZXNjICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHZhciB1cGRhdGVEZXNjID1cbiAgICAgICAgeyB2YWx1ZTogdmFsdWUsXG4gICAgICAgICAgLy8gRklYTUU6IGl0IHNob3VsZCBub3QgYmUgbmVjZXNzYXJ5IHRvIGRlc2NyaWJlIHRoZSBmb2xsb3dpbmdcbiAgICAgICAgICAvLyBhdHRyaWJ1dGVzLiBBZGRlZCB0byBjaXJjdW12ZW50IGEgYnVnIGluIHRyYWNlbW9ua2V5OlxuICAgICAgICAgIC8vIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTYwMTMyOVxuICAgICAgICAgIHdyaXRhYmxlOiAgICAgZXhpc3RpbmdEZXNjLndyaXRhYmxlLFxuICAgICAgICAgIGVudW1lcmFibGU6ICAgZXhpc3RpbmdEZXNjLmVudW1lcmFibGUsXG4gICAgICAgICAgY29uZmlndXJhYmxlOiBleGlzdGluZ0Rlc2MuY29uZmlndXJhYmxlIH07XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVjZWl2ZXIsIG5hbWUsIHVwZGF0ZURlc2MpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICghT2JqZWN0LmlzRXh0ZW5zaWJsZShyZWNlaXZlcikpIHJldHVybiBmYWxzZTtcbiAgICAgIHZhciBuZXdEZXNjID1cbiAgICAgICAgeyB2YWx1ZTogdmFsdWUsXG4gICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUgfTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZWNlaXZlciwgbmFtZSwgbmV3RGVzYyk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0sXG4gIC8qaW52b2tlOiBmdW5jdGlvbih0YXJnZXQsIG5hbWUsIGFyZ3MsIHJlY2VpdmVyKSB7XG4gICAgcmVjZWl2ZXIgPSByZWNlaXZlciB8fCB0YXJnZXQ7XG5cbiAgICB2YXIgaGFuZGxlciA9IGRpcmVjdFByb3hpZXMuZ2V0KHRhcmdldCk7XG4gICAgaWYgKGhhbmRsZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGhhbmRsZXIuaW52b2tlKHJlY2VpdmVyLCBuYW1lLCBhcmdzKTtcbiAgICB9XG5cbiAgICB2YXIgZnVuID0gUmVmbGVjdC5nZXQodGFyZ2V0LCBuYW1lLCByZWNlaXZlcik7XG4gICAgcmV0dXJuIEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseS5jYWxsKGZ1biwgcmVjZWl2ZXIsIGFyZ3MpO1xuICB9LCovXG4gIGVudW1lcmF0ZTogZnVuY3Rpb24odGFyZ2V0KSB7XG4gICAgdmFyIGhhbmRsZXIgPSBkaXJlY3RQcm94aWVzLmdldCh0YXJnZXQpO1xuICAgIHZhciByZXN1bHQ7XG4gICAgaWYgKGhhbmRsZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gaGFuZGxlci5lbnVtZXJhdGUgc2hvdWxkIHJldHVybiBhbiBpdGVyYXRvciBkaXJlY3RseSwgYnV0IHRoZVxuICAgICAgLy8gaXRlcmF0b3IgZ2V0cyBjb252ZXJ0ZWQgdG8gYW4gYXJyYXkgZm9yIGJhY2t3YXJkLWNvbXBhdCByZWFzb25zLFxuICAgICAgLy8gc28gd2UgbXVzdCByZS1pdGVyYXRlIG92ZXIgdGhlIGFycmF5XG4gICAgICByZXN1bHQgPSBoYW5kbGVyLmVudW1lcmF0ZShoYW5kbGVyLnRhcmdldCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdCA9IFtdO1xuICAgICAgZm9yICh2YXIgbmFtZSBpbiB0YXJnZXQpIHsgcmVzdWx0LnB1c2gobmFtZSk7IH07ICAgICAgXG4gICAgfVxuICAgIHZhciBsID0gK3Jlc3VsdC5sZW5ndGg7XG4gICAgdmFyIGlkeCA9IDA7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5leHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoaWR4ID09PSBsKSByZXR1cm4geyBkb25lOiB0cnVlIH07XG4gICAgICAgIHJldHVybiB7IGRvbmU6IGZhbHNlLCB2YWx1ZTogcmVzdWx0W2lkeCsrXSB9O1xuICAgICAgfVxuICAgIH07XG4gIH0sXG4gIC8vIGltcGVyZmVjdCBvd25LZXlzIGltcGxlbWVudGF0aW9uOiBpbiBFUzYsIHNob3VsZCBhbHNvIGluY2x1ZGVcbiAgLy8gc3ltYm9sLWtleWVkIHByb3BlcnRpZXMuXG4gIG93bktleXM6IGZ1bmN0aW9uKHRhcmdldCkge1xuICAgIHJldHVybiBPYmplY3RfZ2V0T3duUHJvcGVydHlOYW1lcyh0YXJnZXQpO1xuICB9LFxuICBhcHBseTogZnVuY3Rpb24odGFyZ2V0LCByZWNlaXZlciwgYXJncykge1xuICAgIC8vIHRhcmdldC5hcHBseShyZWNlaXZlciwgYXJncylcbiAgICByZXR1cm4gRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5LmNhbGwodGFyZ2V0LCByZWNlaXZlciwgYXJncyk7XG4gIH0sXG4gIGNvbnN0cnVjdDogZnVuY3Rpb24odGFyZ2V0LCBhcmdzLCBuZXdUYXJnZXQpIHtcbiAgICAvLyByZXR1cm4gbmV3IHRhcmdldCguLi5hcmdzKTtcblxuICAgIC8vIGlmIHRhcmdldCBpcyBhIHByb3h5LCBpbnZva2UgaXRzIFwiY29uc3RydWN0XCIgdHJhcFxuICAgIHZhciBoYW5kbGVyID0gZGlyZWN0UHJveGllcy5nZXQodGFyZ2V0KTtcbiAgICBpZiAoaGFuZGxlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gaGFuZGxlci5jb25zdHJ1Y3QoaGFuZGxlci50YXJnZXQsIGFyZ3MsIG5ld1RhcmdldCk7XG4gICAgfVxuICAgIFxuICAgIGlmICh0eXBlb2YgdGFyZ2V0ICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJ0YXJnZXQgaXMgbm90IGEgZnVuY3Rpb246IFwiICsgdGFyZ2V0KTtcbiAgICB9XG4gICAgaWYgKG5ld1RhcmdldCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBuZXdUYXJnZXQgPSB0YXJnZXQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0eXBlb2YgbmV3VGFyZ2V0ICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIm5ld1RhcmdldCBpcyBub3QgYSBmdW5jdGlvbjogXCIgKyB0YXJnZXQpO1xuICAgICAgfSAgICAgIFxuICAgIH1cblxuICAgIHJldHVybiBuZXcgKEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kLmFwcGx5KG5ld1RhcmdldCwgW251bGxdLmNvbmNhdChhcmdzKSkpO1xuICB9XG59O1xuXG4vLyBmZWF0dXJlLXRlc3Qgd2hldGhlciB0aGUgUHJveHkgZ2xvYmFsIGV4aXN0cywgd2l0aFxuLy8gdGhlIGhhcm1vbnktZXJhIFByb3h5LmNyZWF0ZSBBUElcbmlmICh0eXBlb2YgUHJveHkgIT09IFwidW5kZWZpbmVkXCIgJiZcbiAgICB0eXBlb2YgUHJveHkuY3JlYXRlICE9PSBcInVuZGVmaW5lZFwiKSB7XG5cbiAgdmFyIHByaW1DcmVhdGUgPSBQcm94eS5jcmVhdGUsXG4gICAgICBwcmltQ3JlYXRlRnVuY3Rpb24gPSBQcm94eS5jcmVhdGVGdW5jdGlvbjtcblxuICB2YXIgcmV2b2tlZEhhbmRsZXIgPSBwcmltQ3JlYXRlKHtcbiAgICBnZXQ6IGZ1bmN0aW9uKCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwicHJveHkgaXMgcmV2b2tlZFwiKTsgfVxuICB9KTtcblxuICBnbG9iYWwuUHJveHkgPSBmdW5jdGlvbih0YXJnZXQsIGhhbmRsZXIpIHtcbiAgICAvLyBjaGVjayB0aGF0IHRhcmdldCBpcyBhbiBPYmplY3RcbiAgICBpZiAoT2JqZWN0KHRhcmdldCkgIT09IHRhcmdldCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByb3h5IHRhcmdldCBtdXN0IGJlIGFuIE9iamVjdCwgZ2l2ZW4gXCIrdGFyZ2V0KTtcbiAgICB9XG4gICAgLy8gY2hlY2sgdGhhdCBoYW5kbGVyIGlzIGFuIE9iamVjdFxuICAgIGlmIChPYmplY3QoaGFuZGxlcikgIT09IGhhbmRsZXIpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcm94eSBoYW5kbGVyIG11c3QgYmUgYW4gT2JqZWN0LCBnaXZlbiBcIitoYW5kbGVyKTtcbiAgICB9XG5cbiAgICB2YXIgdkhhbmRsZXIgPSBuZXcgVmFsaWRhdG9yKHRhcmdldCwgaGFuZGxlcik7XG4gICAgdmFyIHByb3h5O1xuICAgIGlmICh0eXBlb2YgdGFyZ2V0ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIHByb3h5ID0gcHJpbUNyZWF0ZUZ1bmN0aW9uKHZIYW5kbGVyLFxuICAgICAgICAvLyBjYWxsIHRyYXBcbiAgICAgICAgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuICAgICAgICAgIHJldHVybiB2SGFuZGxlci5hcHBseSh0YXJnZXQsIHRoaXMsIGFyZ3MpO1xuICAgICAgICB9LFxuICAgICAgICAvLyBjb25zdHJ1Y3QgdHJhcFxuICAgICAgICBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG4gICAgICAgICAgcmV0dXJuIHZIYW5kbGVyLmNvbnN0cnVjdCh0YXJnZXQsIGFyZ3MpO1xuICAgICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJveHkgPSBwcmltQ3JlYXRlKHZIYW5kbGVyLCBPYmplY3QuZ2V0UHJvdG90eXBlT2YodGFyZ2V0KSk7XG4gICAgfVxuICAgIGRpcmVjdFByb3hpZXMuc2V0KHByb3h5LCB2SGFuZGxlcik7XG4gICAgcmV0dXJuIHByb3h5O1xuICB9O1xuXG4gIGdsb2JhbC5Qcm94eS5yZXZvY2FibGUgPSBmdW5jdGlvbih0YXJnZXQsIGhhbmRsZXIpIHtcbiAgICB2YXIgcHJveHkgPSBuZXcgUHJveHkodGFyZ2V0LCBoYW5kbGVyKTtcbiAgICB2YXIgcmV2b2tlID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgdkhhbmRsZXIgPSBkaXJlY3RQcm94aWVzLmdldChwcm94eSk7XG4gICAgICBpZiAodkhhbmRsZXIgIT09IG51bGwpIHtcbiAgICAgICAgdkhhbmRsZXIudGFyZ2V0ICA9IG51bGw7XG4gICAgICAgIHZIYW5kbGVyLmhhbmRsZXIgPSByZXZva2VkSGFuZGxlcjtcbiAgICAgIH1cbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfTtcbiAgICByZXR1cm4ge3Byb3h5OiBwcm94eSwgcmV2b2tlOiByZXZva2V9O1xuICB9XG4gIFxuICAvLyBhZGQgdGhlIG9sZCBQcm94eS5jcmVhdGUgYW5kIFByb3h5LmNyZWF0ZUZ1bmN0aW9uIG1ldGhvZHNcbiAgLy8gc28gb2xkIGNvZGUgdGhhdCBzdGlsbCBkZXBlbmRzIG9uIHRoZSBoYXJtb255LWVyYSBQcm94eSBvYmplY3RcbiAgLy8gaXMgbm90IGJyb2tlbi4gQWxzbyBlbnN1cmVzIHRoYXQgbXVsdGlwbGUgdmVyc2lvbnMgb2YgdGhpc1xuICAvLyBsaWJyYXJ5IHNob3VsZCBsb2FkIGZpbmVcbiAgZ2xvYmFsLlByb3h5LmNyZWF0ZSA9IHByaW1DcmVhdGU7XG4gIGdsb2JhbC5Qcm94eS5jcmVhdGVGdW5jdGlvbiA9IHByaW1DcmVhdGVGdW5jdGlvbjtcblxufSBlbHNlIHtcbiAgLy8gUHJveHkgZ2xvYmFsIG5vdCBkZWZpbmVkLCBvciBvbGQgQVBJIG5vdCBhdmFpbGFibGVcbiAgaWYgKHR5cGVvZiBQcm94eSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIC8vIFByb3h5IGdsb2JhbCBub3QgZGVmaW5lZCwgYWRkIGEgUHJveHkgZnVuY3Rpb24gc3R1YlxuICAgIGdsb2JhbC5Qcm94eSA9IGZ1bmN0aW9uKF90YXJnZXQsIF9oYW5kbGVyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJwcm94aWVzIG5vdCBzdXBwb3J0ZWQgb24gdGhpcyBwbGF0Zm9ybS4gT24gdjgvbm9kZS9pb2pzLCBtYWtlIHN1cmUgdG8gcGFzcyB0aGUgLS1oYXJtb255X3Byb3hpZXMgZmxhZ1wiKTtcbiAgICB9O1xuICB9XG4gIC8vIFByb3h5IGdsb2JhbCBkZWZpbmVkIGJ1dCBvbGQgQVBJIG5vdCBhdmFpbGFibGVcbiAgLy8gcHJlc3VtYWJseSBQcm94eSBnbG9iYWwgYWxyZWFkeSBzdXBwb3J0cyBuZXcgQVBJLCBsZWF2ZSB1bnRvdWNoZWRcbn1cblxuLy8gZm9yIG5vZGUuanMgbW9kdWxlcywgZXhwb3J0IGV2ZXJ5IHByb3BlcnR5IGluIHRoZSBSZWZsZWN0IG9iamVjdFxuLy8gYXMgcGFydCBvZiB0aGUgbW9kdWxlIGludGVyZmFjZVxuaWYgKHR5cGVvZiBleHBvcnRzICE9PSAndW5kZWZpbmVkJykge1xuICBPYmplY3Qua2V5cyhSZWZsZWN0KS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBleHBvcnRzW2tleV0gPSBSZWZsZWN0W2tleV07XG4gIH0pO1xufVxuXG4vLyBmdW5jdGlvbi1hcy1tb2R1bGUgcGF0dGVyblxufSh0eXBlb2YgZXhwb3J0cyAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWwgOiB0aGlzKSk7IiwiLy8gZDMudGlwXG4vLyBDb3B5cmlnaHQgKGMpIDIwMTMgSnVzdGluIFBhbG1lclxuLy8gRVM2IC8gRDMgdjQgQWRhcHRpb24gQ29weXJpZ2h0IChjKSAyMDE2IENvbnN0YW50aW4gR2F2cmlsZXRlXG4vLyBSZW1vdmFsIG9mIEVTNiBmb3IgRDMgdjQgQWRhcHRpb24gQ29weXJpZ2h0IChjKSAyMDE2IERhdmlkIEdvdHpcbi8vXG4vLyBUb29sdGlwcyBmb3IgZDMuanMgU1ZHIHZpc3VhbGl6YXRpb25zXG5cbmV4cG9ydCBjb25zdCBkM1RpcCA9IChmdW5jdGlvbigpe1xuICBkMy5mdW5jdG9yID0gZnVuY3Rpb24gZnVuY3Rvcih2KSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2ID09PSBcImZ1bmN0aW9uXCIgPyB2IDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdjtcbiAgICB9O1xuICB9O1xuXG4gIGQzLnRpcCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgdmFyIGRpcmVjdGlvbiA9IGQzX3RpcF9kaXJlY3Rpb24sXG4gICAgICAgIG9mZnNldCAgICA9IGQzX3RpcF9vZmZzZXQsXG4gICAgICAgIGh0bWwgICAgICA9IGQzX3RpcF9odG1sLFxuICAgICAgICBub2RlICAgICAgPSBpbml0Tm9kZSgpLFxuICAgICAgICBzdmcgICAgICAgPSBudWxsLFxuICAgICAgICBwb2ludCAgICAgPSBudWxsLFxuICAgICAgICB0YXJnZXQgICAgPSBudWxsXG5cbiAgICBmdW5jdGlvbiB0aXAodmlzKSB7XG4gICAgICBzdmcgPSBnZXRTVkdOb2RlKHZpcylcbiAgICAgIHBvaW50ID0gc3ZnLmNyZWF0ZVNWR1BvaW50KClcbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQobm9kZSlcbiAgICB9XG5cbiAgICAvLyBQdWJsaWMgLSBzaG93IHRoZSB0b29sdGlwIG9uIHRoZSBzY3JlZW5cbiAgICAvL1xuICAgIC8vIFJldHVybnMgYSB0aXBcbiAgICB0aXAuc2hvdyA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpXG4gICAgICBpZihhcmdzW2FyZ3MubGVuZ3RoIC0gMV0gaW5zdGFuY2VvZiBTVkdFbGVtZW50KSB0YXJnZXQgPSBhcmdzLnBvcCgpXG4gICAgICB2YXIgY29udGVudCA9IGh0bWwuYXBwbHkodGhpcywgYXJncyksXG4gICAgICAgICAgcG9mZnNldCA9IG9mZnNldC5hcHBseSh0aGlzLCBhcmdzKSxcbiAgICAgICAgICBkaXIgICAgID0gZGlyZWN0aW9uLmFwcGx5KHRoaXMsIGFyZ3MpLFxuICAgICAgICAgIG5vZGVsICAgPSBnZXROb2RlRWwoKSxcbiAgICAgICAgICBpICAgICAgID0gZGlyZWN0aW9ucy5sZW5ndGgsXG4gICAgICAgICAgY29vcmRzLFxuICAgICAgICAgIHNjcm9sbFRvcCAgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wIHx8IGRvY3VtZW50LmJvZHkuc2Nyb2xsVG9wLFxuICAgICAgICAgIHNjcm9sbExlZnQgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsTGVmdCB8fCBkb2N1bWVudC5ib2R5LnNjcm9sbExlZnRcblxuICAgICAgbm9kZWwuaHRtbChjb250ZW50KVxuICAgICAgICAuc3R5bGUoJ3Bvc2l0aW9uJywgJ2Fic29sdXRlJylcbiAgICAgICAgLnN0eWxlKCdvcGFjaXR5JywgMSlcbiAgICAgICAgLnN0eWxlKCdwb2ludGVyLWV2ZW50cycsICdhbGwnKVxuXG4gICAgICB3aGlsZShpLS0pIG5vZGVsLmNsYXNzZWQoZGlyZWN0aW9uc1tpXSwgZmFsc2UpXG4gICAgICBjb29yZHMgPSBkaXJlY3Rpb25fY2FsbGJhY2tzW2Rpcl0uYXBwbHkodGhpcylcbiAgICAgIG5vZGVsLmNsYXNzZWQoZGlyLCB0cnVlKVxuICAgICAgICAuc3R5bGUoJ3RvcCcsIChjb29yZHMudG9wICsgIHBvZmZzZXRbMF0pICsgc2Nyb2xsVG9wICsgJ3B4JylcbiAgICAgICAgLnN0eWxlKCdsZWZ0JywgKGNvb3Jkcy5sZWZ0ICsgcG9mZnNldFsxXSkgKyBzY3JvbGxMZWZ0ICsgJ3B4JylcblxuICAgICAgcmV0dXJuIHRpcFxuICAgIH1cblxuICAgIC8vIFB1YmxpYyAtIGhpZGUgdGhlIHRvb2x0aXBcbiAgICAvL1xuICAgIC8vIFJldHVybnMgYSB0aXBcbiAgICB0aXAuaGlkZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIG5vZGVsID0gZ2V0Tm9kZUVsKClcbiAgICAgIG5vZGVsXG4gICAgICAgIC5zdHlsZSgnb3BhY2l0eScsIDApXG4gICAgICAgIC5zdHlsZSgncG9pbnRlci1ldmVudHMnLCAnbm9uZScpXG4gICAgICByZXR1cm4gdGlwXG4gICAgfVxuXG4gICAgLy8gUHVibGljOiBQcm94eSBhdHRyIGNhbGxzIHRvIHRoZSBkMyB0aXAgY29udGFpbmVyLiAgU2V0cyBvciBnZXRzIGF0dHJpYnV0ZSB2YWx1ZS5cbiAgICAvL1xuICAgIC8vIG4gLSBuYW1lIG9mIHRoZSBhdHRyaWJ1dGVcbiAgICAvLyB2IC0gdmFsdWUgb2YgdGhlIGF0dHJpYnV0ZVxuICAgIC8vXG4gICAgLy8gUmV0dXJucyB0aXAgb3IgYXR0cmlidXRlIHZhbHVlXG4gICAgdGlwLmF0dHIgPSBmdW5jdGlvbihuLCB2KSB7XG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIgJiYgdHlwZW9mIG4gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiBnZXROb2RlRWwoKS5hdHRyKG4pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgYXJncyA9ICBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpXG4gICAgICAgIGQzLnNlbGVjdGlvbi5wcm90b3R5cGUuYXR0ci5hcHBseShnZXROb2RlRWwoKSwgYXJncylcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRpcFxuICAgIH1cblxuICAgIC8vIFB1YmxpYzogUHJveHkgc3R5bGUgY2FsbHMgdG8gdGhlIGQzIHRpcCBjb250YWluZXIuICBTZXRzIG9yIGdldHMgYSBzdHlsZSB2YWx1ZS5cbiAgICAvL1xuICAgIC8vIG4gLSBuYW1lIG9mIHRoZSBwcm9wZXJ0eVxuICAgIC8vIHYgLSB2YWx1ZSBvZiB0aGUgcHJvcGVydHlcbiAgICAvL1xuICAgIC8vIFJldHVybnMgdGlwIG9yIHN0eWxlIHByb3BlcnR5IHZhbHVlXG4gICAgdGlwLnN0eWxlID0gZnVuY3Rpb24obiwgdikge1xuICAgICAgLy8gZGVidWdnZXI7XG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIgJiYgdHlwZW9mIG4gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiBnZXROb2RlRWwoKS5zdHlsZShuKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuICAgICAgICBpZiAoYXJncy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICB2YXIgc3R5bGVzID0gYXJnc1swXTtcbiAgICAgICAgICBPYmplY3Qua2V5cyhzdHlsZXMpLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgICAgICByZXR1cm4gZDMuc2VsZWN0aW9uLnByb3RvdHlwZS5zdHlsZS5hcHBseShnZXROb2RlRWwoKSwgW2tleSwgc3R5bGVzW2tleV1dKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGlwXG4gICAgfVxuXG4gICAgLy8gUHVibGljOiBTZXQgb3IgZ2V0IHRoZSBkaXJlY3Rpb24gb2YgdGhlIHRvb2x0aXBcbiAgICAvL1xuICAgIC8vIHYgLSBPbmUgb2Ygbihub3J0aCksIHMoc291dGgpLCBlKGVhc3QpLCBvciB3KHdlc3QpLCBudyhub3J0aHdlc3QpLFxuICAgIC8vICAgICBzdyhzb3V0aHdlc3QpLCBuZShub3J0aGVhc3QpIG9yIHNlKHNvdXRoZWFzdClcbiAgICAvL1xuICAgIC8vIFJldHVybnMgdGlwIG9yIGRpcmVjdGlvblxuICAgIHRpcC5kaXJlY3Rpb24gPSBmdW5jdGlvbih2KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBkaXJlY3Rpb25cbiAgICAgIGRpcmVjdGlvbiA9IHYgPT0gbnVsbCA/IHYgOiBkMy5mdW5jdG9yKHYpXG5cbiAgICAgIHJldHVybiB0aXBcbiAgICB9XG5cbiAgICAvLyBQdWJsaWM6IFNldHMgb3IgZ2V0cyB0aGUgb2Zmc2V0IG9mIHRoZSB0aXBcbiAgICAvL1xuICAgIC8vIHYgLSBBcnJheSBvZiBbeCwgeV0gb2Zmc2V0XG4gICAgLy9cbiAgICAvLyBSZXR1cm5zIG9mZnNldCBvclxuICAgIHRpcC5vZmZzZXQgPSBmdW5jdGlvbih2KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBvZmZzZXRcbiAgICAgIG9mZnNldCA9IHYgPT0gbnVsbCA/IHYgOiBkMy5mdW5jdG9yKHYpXG5cbiAgICAgIHJldHVybiB0aXBcbiAgICB9XG5cbiAgICAvLyBQdWJsaWM6IHNldHMgb3IgZ2V0cyB0aGUgaHRtbCB2YWx1ZSBvZiB0aGUgdG9vbHRpcFxuICAgIC8vXG4gICAgLy8gdiAtIFN0cmluZyB2YWx1ZSBvZiB0aGUgdGlwXG4gICAgLy9cbiAgICAvLyBSZXR1cm5zIGh0bWwgdmFsdWUgb3IgdGlwXG4gICAgdGlwLmh0bWwgPSBmdW5jdGlvbih2KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBodG1sXG4gICAgICBodG1sID0gdiA9PSBudWxsID8gdiA6IGQzLmZ1bmN0b3IodilcblxuICAgICAgcmV0dXJuIHRpcFxuICAgIH1cblxuICAgIC8vIFB1YmxpYzogZGVzdHJveXMgdGhlIHRvb2x0aXAgYW5kIHJlbW92ZXMgaXQgZnJvbSB0aGUgRE9NXG4gICAgLy9cbiAgICAvLyBSZXR1cm5zIGEgdGlwXG4gICAgdGlwLmRlc3Ryb3kgPSBmdW5jdGlvbigpIHtcbiAgICAgIGlmKG5vZGUpIHtcbiAgICAgICAgZ2V0Tm9kZUVsKCkucmVtb3ZlKCk7XG4gICAgICAgIG5vZGUgPSBudWxsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRpcDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkM190aXBfZGlyZWN0aW9uKCkgeyByZXR1cm4gJ24nIH1cbiAgICBmdW5jdGlvbiBkM190aXBfb2Zmc2V0KCkgeyByZXR1cm4gWzAsIDBdIH1cbiAgICBmdW5jdGlvbiBkM190aXBfaHRtbCgpIHsgcmV0dXJuICcgJyB9XG5cbiAgICB2YXIgZGlyZWN0aW9uX2NhbGxiYWNrcyA9IHtcbiAgICAgIG46ICBkaXJlY3Rpb25fbixcbiAgICAgIHM6ICBkaXJlY3Rpb25fcyxcbiAgICAgIGU6ICBkaXJlY3Rpb25fZSxcbiAgICAgIHc6ICBkaXJlY3Rpb25fdyxcbiAgICAgIG53OiBkaXJlY3Rpb25fbncsXG4gICAgICBuZTogZGlyZWN0aW9uX25lLFxuICAgICAgc3c6IGRpcmVjdGlvbl9zdyxcbiAgICAgIHNlOiBkaXJlY3Rpb25fc2VcbiAgICB9O1xuXG4gICAgdmFyIGRpcmVjdGlvbnMgPSBPYmplY3Qua2V5cyhkaXJlY3Rpb25fY2FsbGJhY2tzKTtcblxuICAgIGZ1bmN0aW9uIGRpcmVjdGlvbl9uKCkge1xuICAgICAgdmFyIGJib3ggPSBnZXRTY3JlZW5CQm94KClcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHRvcDogIGJib3gubi55IC0gbm9kZS5vZmZzZXRIZWlnaHQsXG4gICAgICAgIGxlZnQ6IGJib3gubi54IC0gbm9kZS5vZmZzZXRXaWR0aCAvIDJcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkaXJlY3Rpb25fcygpIHtcbiAgICAgIHZhciBiYm94ID0gZ2V0U2NyZWVuQkJveCgpXG4gICAgICByZXR1cm4ge1xuICAgICAgICB0b3A6ICBiYm94LnMueSxcbiAgICAgICAgbGVmdDogYmJveC5zLnggLSBub2RlLm9mZnNldFdpZHRoIC8gMlxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRpcmVjdGlvbl9lKCkge1xuICAgICAgdmFyIGJib3ggPSBnZXRTY3JlZW5CQm94KClcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHRvcDogIGJib3guZS55IC0gbm9kZS5vZmZzZXRIZWlnaHQgLyAyLFxuICAgICAgICBsZWZ0OiBiYm94LmUueFxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRpcmVjdGlvbl93KCkge1xuICAgICAgdmFyIGJib3ggPSBnZXRTY3JlZW5CQm94KClcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHRvcDogIGJib3gudy55IC0gbm9kZS5vZmZzZXRIZWlnaHQgLyAyLFxuICAgICAgICBsZWZ0OiBiYm94LncueCAtIG5vZGUub2Zmc2V0V2lkdGhcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkaXJlY3Rpb25fbncoKSB7XG4gICAgICB2YXIgYmJveCA9IGdldFNjcmVlbkJCb3goKVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdG9wOiAgYmJveC5udy55IC0gbm9kZS5vZmZzZXRIZWlnaHQsXG4gICAgICAgIGxlZnQ6IGJib3gubncueCAtIG5vZGUub2Zmc2V0V2lkdGhcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkaXJlY3Rpb25fbmUoKSB7XG4gICAgICB2YXIgYmJveCA9IGdldFNjcmVlbkJCb3goKVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdG9wOiAgYmJveC5uZS55IC0gbm9kZS5vZmZzZXRIZWlnaHQsXG4gICAgICAgIGxlZnQ6IGJib3gubmUueFxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRpcmVjdGlvbl9zdygpIHtcbiAgICAgIHZhciBiYm94ID0gZ2V0U2NyZWVuQkJveCgpXG4gICAgICByZXR1cm4ge1xuICAgICAgICB0b3A6ICBiYm94LnN3LnksXG4gICAgICAgIGxlZnQ6IGJib3guc3cueCAtIG5vZGUub2Zmc2V0V2lkdGhcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkaXJlY3Rpb25fc2UoKSB7XG4gICAgICB2YXIgYmJveCA9IGdldFNjcmVlbkJCb3goKVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdG9wOiAgYmJveC5zZS55LFxuICAgICAgICBsZWZ0OiBiYm94LmUueFxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluaXROb2RlKCkge1xuICAgICAgdmFyIG5vZGUgPSBkMy5zZWxlY3QoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykpXG4gICAgICBub2RlXG4gICAgICAgIC5zdHlsZSgncG9zaXRpb24nLCAnYWJzb2x1dGUnKVxuICAgICAgICAuc3R5bGUoJ3RvcCcsIDApXG4gICAgICAgIC5zdHlsZSgnb3BhY2l0eScsIDApXG4gICAgICAgIC5zdHlsZSgncG9pbnRlci1ldmVudHMnLCAnbm9uZScpXG4gICAgICAgIC5zdHlsZSgnYm94LXNpemluZycsICdib3JkZXItYm94JylcblxuICAgICAgcmV0dXJuIG5vZGUubm9kZSgpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0U1ZHTm9kZShlbCkge1xuICAgICAgZWwgPSBlbC5ub2RlKClcbiAgICAgIGlmKGVsLnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ3N2ZycpXG4gICAgICAgIHJldHVybiBlbFxuXG4gICAgICByZXR1cm4gZWwub3duZXJTVkdFbGVtZW50XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0Tm9kZUVsKCkge1xuICAgICAgaWYobm9kZSA9PT0gbnVsbCkge1xuICAgICAgICBub2RlID0gaW5pdE5vZGUoKTtcbiAgICAgICAgLy8gcmUtYWRkIG5vZGUgdG8gRE9NXG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQobm9kZSk7XG4gICAgICB9O1xuICAgICAgcmV0dXJuIGQzLnNlbGVjdChub2RlKTtcbiAgICB9XG5cbiAgICAvLyBQcml2YXRlIC0gZ2V0cyB0aGUgc2NyZWVuIGNvb3JkaW5hdGVzIG9mIGEgc2hhcGVcbiAgICAvL1xuICAgIC8vIEdpdmVuIGEgc2hhcGUgb24gdGhlIHNjcmVlbiwgd2lsbCByZXR1cm4gYW4gU1ZHUG9pbnQgZm9yIHRoZSBkaXJlY3Rpb25zXG4gICAgLy8gbihub3J0aCksIHMoc291dGgpLCBlKGVhc3QpLCB3KHdlc3QpLCBuZShub3J0aGVhc3QpLCBzZShzb3V0aGVhc3QpLCBudyhub3J0aHdlc3QpLFxuICAgIC8vIHN3KHNvdXRod2VzdCkuXG4gICAgLy9cbiAgICAvLyAgICArLSstK1xuICAgIC8vICAgIHwgICB8XG4gICAgLy8gICAgKyAgICtcbiAgICAvLyAgICB8ICAgfFxuICAgIC8vICAgICstKy0rXG4gICAgLy9cbiAgICAvLyBSZXR1cm5zIGFuIE9iamVjdCB7biwgcywgZSwgdywgbncsIHN3LCBuZSwgc2V9XG4gICAgZnVuY3Rpb24gZ2V0U2NyZWVuQkJveCgpIHtcbiAgICAgIHZhciB0YXJnZXRlbCAgID0gdGFyZ2V0IHx8IGQzLmV2ZW50LnRhcmdldDtcbiAgICAgIGNvbnNvbGUubG9nKHRhcmdldGVsKTtcbiAgICAgIGZ1bmN0aW9uIHRyeUJCb3goKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB0YXJnZXRlbC5nZXRCQm94KCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgIHRhcmdldGVsID0gdGFyZ2V0ZWwucGFyZW50Tm9kZTtcbiAgICAgICAgICB0cnlCQm94KCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRyeUJCb3goKTtcbiAgICAgIHdoaWxlICgndW5kZWZpbmVkJyA9PT0gdHlwZW9mIHRhcmdldGVsLmdldFNjcmVlbkNUTSApey8vICYmICd1bmRlZmluZWQnID09PSB0YXJnZXRlbC5wYXJlbnROb2RlKSB7XG4gICAgICAgICAgdGFyZ2V0ZWwgPSB0YXJnZXRlbC5wYXJlbnROb2RlO1xuICAgICAgfVxuICAgICAgY29uc29sZS5sb2codGFyZ2V0ZWwpO1xuICAgICAgdmFyIGJib3ggICAgICAgPSB7fSxcbiAgICAgICAgICBtYXRyaXggICAgID0gdGFyZ2V0ZWwuZ2V0U2NyZWVuQ1RNKCksXG4gICAgICAgICAgdGJib3ggICAgICA9IHRhcmdldGVsLmdldEJCb3goKSxcbiAgICAgICAgICB3aWR0aCAgICAgID0gdGJib3gud2lkdGgsXG4gICAgICAgICAgaGVpZ2h0ICAgICA9IHRiYm94LmhlaWdodCxcbiAgICAgICAgICB4ICAgICAgICAgID0gdGJib3gueCxcbiAgICAgICAgICB5ICAgICAgICAgID0gdGJib3gueVxuXG4gICAgICBwb2ludC54ID0geFxuICAgICAgcG9pbnQueSA9IHlcbiAgICAgIGJib3gubncgPSBwb2ludC5tYXRyaXhUcmFuc2Zvcm0obWF0cml4KVxuICAgICAgcG9pbnQueCArPSB3aWR0aFxuICAgICAgYmJveC5uZSA9IHBvaW50Lm1hdHJpeFRyYW5zZm9ybShtYXRyaXgpXG4gICAgICBwb2ludC55ICs9IGhlaWdodFxuICAgICAgYmJveC5zZSA9IHBvaW50Lm1hdHJpeFRyYW5zZm9ybShtYXRyaXgpXG4gICAgICBwb2ludC54IC09IHdpZHRoXG4gICAgICBiYm94LnN3ID0gcG9pbnQubWF0cml4VHJhbnNmb3JtKG1hdHJpeClcbiAgICAgIHBvaW50LnkgLT0gaGVpZ2h0IC8gMlxuICAgICAgYmJveC53ICA9IHBvaW50Lm1hdHJpeFRyYW5zZm9ybShtYXRyaXgpXG4gICAgICBwb2ludC54ICs9IHdpZHRoXG4gICAgICBiYm94LmUgPSBwb2ludC5tYXRyaXhUcmFuc2Zvcm0obWF0cml4KVxuICAgICAgcG9pbnQueCAtPSB3aWR0aCAvIDJcbiAgICAgIHBvaW50LnkgLT0gaGVpZ2h0IC8gMlxuICAgICAgYmJveC5uID0gcG9pbnQubWF0cml4VHJhbnNmb3JtKG1hdHJpeClcbiAgICAgIHBvaW50LnkgKz0gaGVpZ2h0XG4gICAgICBiYm94LnMgPSBwb2ludC5tYXRyaXhUcmFuc2Zvcm0obWF0cml4KVxuXG4gICAgICByZXR1cm4gYmJveFxuICAgIH1cblxuICAgIHJldHVybiB0aXBcbiAgfTtcbn0pKCk7Il19
